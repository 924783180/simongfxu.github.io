{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/typing/source/css/donate.css","path":"css/donate.css","modified":1,"renderable":1},{"_id":"themes/typing/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/typing/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/typing/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/typing/source/css/typing.css","path":"css/typing.css","modified":1,"renderable":1},{"_id":"themes/typing/source/css/source.css","path":"css/source.css","modified":0,"renderable":1},{"_id":"themes/typing/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/typing/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/typing/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/typing/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/typing/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/typing/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/typing/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/typing/source/images/alipay.svg","path":"images/alipay.svg","modified":0,"renderable":1},{"_id":"themes/typing/source/images/bitcoin.svg","path":"images/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/typing/source/images/github.svg","path":"images/github.svg","modified":0,"renderable":1},{"_id":"themes/typing/source/images/paypal.svg","path":"images/paypal.svg","modified":0,"renderable":1},{"_id":"themes/typing/source/js/typing.js","path":"js/typing.js","modified":0,"renderable":1},{"_id":"themes/typing/source/images/like.svg","path":"images/like.svg","modified":0,"renderable":1},{"_id":"themes/typing/source/images/wechat.svg","path":"images/wechat.svg","modified":0,"renderable":1},{"_id":"themes/typing/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/typing/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/typing/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/typing/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/typing/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/typing/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/typing/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/typing/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/typing/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/typing/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/typing/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/typing/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/typing/.gitignore","hash":"d83e98433e68316c1ba1260e46463447ad71aaa1","modified":1513873389000},{"_id":"themes/typing/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1513873389000},{"_id":"themes/typing/CHANGELOG.md","hash":"c0e70d58a9b4f2adedfcfbfa95d4b2093876ff54","modified":1513873389000},{"_id":"themes/typing/LICENSE","hash":"e4bf48251989dd666899d2d22b351b8db4764992","modified":1513873389000},{"_id":"themes/typing/README.md","hash":"cf32084022c38441601e657e510dfc6234ccf9f3","modified":1513873389000},{"_id":"themes/typing/_config.yml","hash":"fcc8fbf914f40672602827dbec027f5447ef1c80","modified":1513873389000},{"_id":"themes/typing/makefile","hash":"7c9528377cb1ca4a95a004c0637f3ea04c4b11a0","modified":1513873389000},{"_id":"themes/typing/package.json","hash":"962f51a65faf8f0c9df3cbedff9079ecc249ba37","modified":1513873389000},{"_id":"source/_posts/test.md","hash":"adbb4f12a8a295fea55b908f4987f4f0e84f69c4","modified":1513873389000},{"_id":"themes/typing/.git/COMMIT_EDITMSG","hash":"aa855fd0db4d31979834994cc604651cad984af8","modified":1513873389000},{"_id":"themes/typing/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1513873389000},{"_id":"source/_posts/hello-world.md","hash":"dc4fbcff570bc6115af55158b1709552915f1ca4","modified":1513955753000},{"_id":"themes/typing/.git/config","hash":"f6db1a7b27987dba29c61c7d3f03a8efb136c4c9","modified":1513873389000},{"_id":"themes/typing/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1513873389000},{"_id":"themes/typing/.git/index","hash":"cedb20fa45bf9da0bafe66fe32b18d5d0cd20f11","modified":1513956690000},{"_id":"themes/typing/.git/packed-refs","hash":"58888856159111a12f64efc9e588e7d113ef5c63","modified":1513873389000},{"_id":"themes/typing/languages/default.yml","hash":"eca57588ffb6614dfe40572016d0a0999b49fec8","modified":1513873389000},{"_id":"themes/typing/languages/en.yml","hash":"bd8e9329c5636b85bc554b76f06830269869864d","modified":1513873389000},{"_id":"themes/typing/languages/es.yml","hash":"23dc21c62927062829e31fcfd6c5d2c7e9257844","modified":1513873389000},{"_id":"themes/typing/languages/fr.yml","hash":"559b094ef6b9d02506c33044be8b50ebeda28a70","modified":1513873389000},{"_id":"themes/typing/languages/nl.yml","hash":"95fc8003c34e1353f73f6315291d0cb10b5d7e73","modified":1513873389000},{"_id":"themes/typing/languages/no.yml","hash":"53ba8ffd6353262138016bd1b4c3a65a113e6c52","modified":1513873389000},{"_id":"themes/typing/languages/zh-CN.yml","hash":"4f227318cce98303496e423d85de28b79fb01f00","modified":1513873389000},{"_id":"themes/typing/languages/zh-TW.yml","hash":"b68f12091eeae30b56847997d059f5ce29f086ac","modified":1513873389000},{"_id":"themes/typing/languages/ru.yml","hash":"3d45b446862c8a305823533b868556f6111308fe","modified":1513873389000},{"_id":"themes/typing/layout/archive.ejs","hash":"1326b972ea3dcdc23a453e3c61709ffe561ed931","modified":1513873389000},{"_id":"themes/typing/layout/category.ejs","hash":"a6f14dc7f869d6cd0663fef8747c708cdbb18fe7","modified":1513873389000},{"_id":"themes/typing/layout/index.ejs","hash":"8ff309cafb42d8e28e55ce4dc7fdc27286bd1a33","modified":1513873389000},{"_id":"themes/typing/layout/layout.ejs","hash":"3701846fc68235aeeb9fb470d510780ca2dd037d","modified":1513873389000},{"_id":"themes/typing/layout/page.ejs","hash":"a05fd1a27e1c54c9dbab9e69a257a299b0f549cc","modified":1513873389000},{"_id":"themes/typing/layout/post.ejs","hash":"a05fd1a27e1c54c9dbab9e69a257a299b0f549cc","modified":1513873389000},{"_id":"themes/typing/layout/tag.ejs","hash":"b9558a0789e3549d6bbcaf86544af9bd3a7a472a","modified":1513873389000},{"_id":"themes/typing/preview/preview.png","hash":"33b39c8a626db45ee473ce3e3d0e37ebd9fb83d3","modified":1513873389000},{"_id":"themes/typing/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1513873389000},{"_id":"themes/typing/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1513873389000},{"_id":"themes/typing/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1513873389000},{"_id":"themes/typing/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1513873389000},{"_id":"themes/typing/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1513873389000},{"_id":"themes/typing/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1513873389000},{"_id":"themes/typing/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1513873389000},{"_id":"themes/typing/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1513873389000},{"_id":"themes/typing/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1513873389000},{"_id":"themes/typing/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1513873389000},{"_id":"themes/typing/.git/logs/HEAD","hash":"4b166a1c9229eaeb8d10dbc36ab813f222702ddc","modified":1513873389000},{"_id":"themes/typing/layout/_partial/archive-post.ejs","hash":"4efe8f6056c710b1924aae7f9f56088393e83ad5","modified":1513873389000},{"_id":"themes/typing/layout/_partial/after-footer.ejs","hash":"d6b38979a70d59627b5a3a41949a544917545868","modified":1513873389000},{"_id":"themes/typing/layout/_partial/archive.ejs","hash":"9665ed77377c8eb15d94c04a33905d26704f2e13","modified":1513873389000},{"_id":"themes/typing/layout/_partial/footer.ejs","hash":"d3876fa98b26a0d853fb1d99958122cc04cb0c20","modified":1513873389000},{"_id":"themes/typing/layout/_partial/baidu_tongji.ejs","hash":"998936b5bf3fcef3b2de5e21fe24e956afa43f59","modified":1513873389000},{"_id":"themes/typing/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1513873389000},{"_id":"themes/typing/layout/_partial/article.ejs","hash":"d60fbd8e1b02230b64317e45e90a0dbd77964bec","modified":1513873389000},{"_id":"themes/typing/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1513873389000},{"_id":"themes/typing/layout/_partial/head.ejs","hash":"4a39d4684f14d7852151924b2a74d7daf0d0e70d","modified":1513873389000},{"_id":"themes/typing/layout/_partial/header.ejs","hash":"6c23f09fc807e2b3779d5f252503fd60edb77892","modified":1513873389000},{"_id":"themes/typing/source/css/donate.css","hash":"25d676b6f9c4987d66cd2fcb4e97252ce54f42a0","modified":1513956573000},{"_id":"themes/typing/source/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1513873389000},{"_id":"themes/typing/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1513873389000},{"_id":"themes/typing/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1513873389000},{"_id":"themes/typing/source/css/typing.css","hash":"7babfee348af348d4baef09a15f2d6763711aebc","modified":1513956649000},{"_id":"themes/typing/source/css/source.css","hash":"c2db61f1854743b6fbec35d197b49f32ee09061a","modified":1513873389000},{"_id":"themes/typing/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1513873389000},{"_id":"themes/typing/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1513873389000},{"_id":"themes/typing/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1513873389000},{"_id":"themes/typing/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1513873389000},{"_id":"themes/typing/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1513873389000},{"_id":"themes/typing/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1513873389000},{"_id":"themes/typing/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1513873389000},{"_id":"themes/typing/source/images/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1513873389000},{"_id":"themes/typing/source/images/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1513873389000},{"_id":"themes/typing/source/images/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1513873389000},{"_id":"themes/typing/source/images/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1513873389000},{"_id":"themes/typing/source/js/typing.js","hash":"011bfad2aa293ed0fc73390efd3af3a2bd56adf7","modified":1513873389000},{"_id":"themes/typing/source/images/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1513873389000},{"_id":"themes/typing/source/images/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1513873389000},{"_id":"themes/typing/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1513873389000},{"_id":"themes/typing/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1513873389000},{"_id":"themes/typing/.git/objects/0b/afa2af5c5a8d011c87bf126953ea3dc65fa30c","hash":"1c34e289d154c89194d6e5a86f255bf217a6360d","modified":1513873389000},{"_id":"themes/typing/.git/objects/10/0b394ec8a1b79a6f6f4525a4f239db5c2d21d9","hash":"3f8931d59e65d42b35060ebfcd33fff0b431a41f","modified":1513873389000},{"_id":"themes/typing/.git/objects/6e/3e3f7d2d01cba1fc13680bba4e86c1b7c83bb7","hash":"d7c6b3edd593407876498ebf04637cae268e2911","modified":1513873389000},{"_id":"themes/typing/.git/objects/ce/05c62696b2c284f37648a85ade72423352ce38","hash":"bd770cef183f3b019844c03b5250e532f04dfbac","modified":1513873389000},{"_id":"themes/typing/.git/objects/69/f80d4ecd1f3a7e0e52a75e062f38314019b43e","hash":"9b259699a56e551751e130eced5cf381b4d2644b","modified":1513873389000},{"_id":"themes/typing/.git/objects/d8/809ec6f944741f55492a5cd92c278f1c6ca644","hash":"17b5117bfc99aefb38d65a600eb833336f9f6d2a","modified":1513873389000},{"_id":"themes/typing/.git/objects/ce/01f475cd24f35040483cac7e0952d51424cd13","hash":"0a867692992b8acc41de39337d2d836b5c5c2673","modified":1513873389000},{"_id":"themes/typing/.git/objects/f9/3ae67ef1646ecba78260283302d66620ab783a","hash":"ed17b682e920f05fd8ff5827d4514f3e34bc2488","modified":1513873389000},{"_id":"themes/typing/.git/refs/heads/master","hash":"851808feca8398d64a1bfcfaef5f01f59b0cd7db","modified":1513873389000},{"_id":"themes/typing/.git/objects/pack/pack-ef9a8014a99c9bf1d06f7d46d2319bea71b91039.idx","hash":"ed293a27e5bba36d924a71c9e4cc42f8b0bdda1f","modified":1513873389000},{"_id":"themes/typing/layout/_partial/post/category.ejs","hash":"6cd9c85b105db04a74678d0a6c5440e51d9d84f7","modified":1513873389000},{"_id":"themes/typing/layout/_partial/post/date.ejs","hash":"38affd429d5ed376b349219f3094a7d530c58a70","modified":1513873389000},{"_id":"themes/typing/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1513873389000},{"_id":"themes/typing/layout/_partial/post/nav.ejs","hash":"93e594128978c0e7310c9aef3e150effbf549f0e","modified":1513873389000},{"_id":"themes/typing/layout/_partial/post/tag.ejs","hash":"90209686eabc6c3e7a6a7ef2defd0b84611d9f41","modified":1513873389000},{"_id":"themes/typing/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1513873389000},{"_id":"themes/typing/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1513873389000},{"_id":"themes/typing/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1513873389000},{"_id":"themes/typing/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1513873389000},{"_id":"themes/typing/preview/preview-dark-mode.png","hash":"4eaf8d046cf3e06373d93efcefb2ef126d9486cc","modified":1513873389000},{"_id":"themes/typing/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1513873389000},{"_id":"themes/typing/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1513873389000},{"_id":"themes/typing/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1513873389000},{"_id":"themes/typing/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1513873389000},{"_id":"themes/typing/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1513873389000},{"_id":"themes/typing/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1513873389000},{"_id":"themes/typing/.git/logs/refs/heads/master","hash":"4b166a1c9229eaeb8d10dbc36ab813f222702ddc","modified":1513873389000},{"_id":"themes/typing/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1513873389000},{"_id":"themes/typing/.git/refs/remotes/origin/master","hash":"851808feca8398d64a1bfcfaef5f01f59b0cd7db","modified":1513873389000},{"_id":"themes/typing/.git/logs/refs/remotes/origin/HEAD","hash":"41c766dfda5c98e63232b4f09f616da9b7608c7c","modified":1513873389000},{"_id":"themes/typing/.git/logs/refs/remotes/origin/master","hash":"0cb7435ad3d50950e6925166d9d139210247d838","modified":1513873389000},{"_id":"themes/typing/source/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1513873389000},{"_id":"themes/typing/.git/objects/pack/pack-ef9a8014a99c9bf1d06f7d46d2319bea71b91039.pack","hash":"7d86d948697079d32593c74a5f91c005b5ab4724","modified":1513873389000},{"_id":"source/_posts/AOP-in-JavaScript.md","hash":"c7bc9a5630f9c2e0e0ffd4afcbeb0477eb16dab9","modified":1513930706000},{"_id":"source/_posts/Dimensions-of-Elements.md","hash":"078a2f72412a454e62c239e63697fb83671bce17","modified":1513930713000},{"_id":"source/_posts/JSONP-Memory-Leak.md","hash":"d058bb18cb9e5f1aef98567eaba4282a0f0ea872","modified":1513930760000},{"_id":"source/_posts/JavaScript-Template-Engine.md","hash":"08145e43c303446a3a1b2a4327b3c34b8c07a855","modified":1513930741000},{"_id":"source/_posts/A-Cross-Domain-Practice.md","hash":"fdf6f064db3424b0da4d65838a42b473fd64e05b","modified":1513930687000},{"_id":"source/_posts/JavaScript 乱弹之(四) 关于Form(ASPX)，你必须知道的.md","hash":"70b3d3852eacddf9d0bf49d09365901c39fb9f2e","modified":1513926885000},{"_id":"source/_posts/JavaScript乱弹之(二) String.md","hash":"e1657f4bb954290c00d2ec9e420692caee0a57fc","modified":1513926674000},{"_id":"source/_posts/Ajax-Encoding.md","hash":"89196519c93e51b1fb027950595dadecd7f19876","modified":1513930694000},{"_id":"source/_posts/JavaScript乱弹之（一）JQuery+CSS入门.md","hash":"b5000db43e3ecaaf0bf29579833642ac64367b10","modified":1513926641000},{"_id":"source/_posts/JavaScript乱弹之（三）管理浏览器窗口.md","hash":"2720244f57b97626997c89fd4c3d91799206c325","modified":1513926724000},{"_id":"source/_posts/JavaScript乱弹之（五）使用脚本创建动态内容.md","hash":"3af7ade414e87a5056cbcd1b466a442019bc377f","modified":1513926902000},{"_id":"source/_posts/RactiveJS文档说明.md","hash":"fb07801f3b1f4a28d82d47d34d5d67c2c7c581c5","modified":1513927469000},{"_id":"source/_posts/RequieJS优化实践.md","hash":"369bba839bbbe222d5717dd6e3a35952b6376a97","modified":1513927521000},{"_id":"source/_posts/iOS-UIWebView-Class-Reference.md","hash":"710d46f82dd57c64cb0638fdcdd0afca59bceb7d","modified":1513956360000},{"_id":"source/_posts/前端国际化如何更快.md","hash":"234c08c715f42fbf37a7a9dc44eab58c23946fd5","modified":1513927488000},{"_id":"source/_posts/初识JavaScript Promises之一.md","hash":"a200d93e2a66788b2698491a8787fcaa0a5f38b4","modified":1513927127000},{"_id":"source/_posts/初识JavaScript Promises之二.md","hash":"5f1f0d9f04d2ca2a79cb5d8a2e461184a1e2c4d9","modified":1513927185000},{"_id":"source/_posts/关于容灾，前端能够做什么.md","hash":"e7fc6d984084d577334ffbd1d60be5d909d51638","modified":1513927015000},{"_id":"source/_posts/白鹭引擎无废话快速上手.md","hash":"9ba481555c96ee95bbdf009039bafc5035ef86d6","modified":1513927434000},{"_id":"source/_posts/程序员的强迫症.md","hash":"39f34accd6d76e3e90566147d51fa95d52109b95","modified":1513927405000},{"_id":"source/.DS_Store","hash":"ffa5d186a46061b1c2aed8f211d29e9a87da7da0","modified":1513952881000},{"_id":"source/_posts/.DS_Store","hash":"77430591750c221e8c7617f89ac4e3da9e59afc2","modified":1513952881000},{"_id":"source/_posts/JavaScript乱弹之（一）：JQuery+CSS入门.md","hash":"bef4a8e1bfbb9833cf0e1f8cff1106a70f170b7b","modified":1513953251000},{"_id":"source/_posts/JavaScript乱弹之（三）：管理浏览器窗口.md","hash":"06190681a4871bd17c21dce0b71bbde586334f42","modified":1513953273000},{"_id":"source/_posts/JavaScript乱弹之（二）： String.md","hash":"2b598b8c9ddc09411fd80a0c875c09b5cba9e66e","modified":1513953293000},{"_id":"source/_posts/JavaScript乱弹之（五）：使用脚本创建动态内容.md","hash":"288ebd08969f6740539f3ffbe834d031201abb05","modified":1513953310000},{"_id":"source/_posts/JavaScript乱弹之（四）： 关于Form(ASPX)，你必须知道的.md","hash":"d77bd6070f8c3e32cd0eaab9189d11905b62c200","modified":1513953286000},{"_id":"public/2017/12/22/hello-world/index.html","hash":"76eb3436897d8ca49b719da60ccc81d8096611da","modified":1513953567897},{"_id":"public/2015/09/07/前端国际化如何更快/index.html","hash":"a90489b41befa15a92f350f6d0f0817c600aa323","modified":1513953567897},{"_id":"public/2015/05/03/白鹭引擎无废话快速上手/index.html","hash":"eb578865324ac28a64763b4be07905b72b7b7848","modified":1513956379357},{"_id":"public/2012/10/30/iOS-UIWebView-Class-Reference/index.html","hash":"b7970717e66ee1ec35f7038b5c3184cb955428e8","modified":1513956379357},{"_id":"public/2012/03/18/AOP-in-JavaScript/index.html","hash":"32809bd00040985396dfcb053b86ac272d599326","modified":1513956379357},{"_id":"public/2010/01/29/JavaScript乱弹之（五）：使用脚本创建动态内容/index.html","hash":"ee09930478e55082b1e829d41a58347dc75f522c","modified":1513956379357},{"_id":"public/2010/01/28/JavaScript乱弹之（四）： 关于Form(ASPX)，你必须知道的/index.html","hash":"6ec8e6f6711954e47f74433503d7141caedcbe20","modified":1513956379358},{"_id":"public/2010/01/27/JavaScript乱弹之（三）：管理浏览器窗口/index.html","hash":"31054e95acb66946e3ca6987cbe1217e667fcea2","modified":1513956379358},{"_id":"public/2010/01/26/JavaScript乱弹之（二）： String/index.html","hash":"47d2369960e648bc615d1e9481e4c4fa45102795","modified":1513956379358},{"_id":"public/archives/index.html","hash":"c73cda0ecd5a88848485fda3eb902dc5d803ef89","modified":1513956379363},{"_id":"public/archives/2010/index.html","hash":"580f1de388cab60aab8ddf08ed0d295afa648a18","modified":1513956379358},{"_id":"public/archives/2010/01/index.html","hash":"b3612b73a535a0570a11c6f6d95d4888c4ff11aa","modified":1513956379358},{"_id":"public/archives/2011/index.html","hash":"a16a45fe54add1ef520ddee767736d24e40780a8","modified":1513956379358},{"_id":"public/archives/2011/10/index.html","hash":"2d855c1523530ef31ed380a97b9b1d9c7f6b7664","modified":1513956379359},{"_id":"public/archives/2012/index.html","hash":"5d646b53195326cdfee4894f99ef8b2c02f05c33","modified":1513956379359},{"_id":"public/archives/2012/02/index.html","hash":"8cecad2d8164fdb1da189237736788194d6f70fc","modified":1513956379359},{"_id":"public/archives/2012/03/index.html","hash":"fcd0ab0778f76c55f24b1f8fc25bd73255f8e759","modified":1513956379359},{"_id":"public/archives/2012/07/index.html","hash":"69288a6ffaa3c20234ae3ac113a202cd43ca80cd","modified":1513956379359},{"_id":"public/archives/2012/10/index.html","hash":"03a5cf1fc2afad0d73c0fed1cf8aa3fce74d7a33","modified":1513956379359},{"_id":"public/archives/2012/11/index.html","hash":"67d39db9edf8050fda5ed66276a3a2dd76723074","modified":1513956379359},{"_id":"public/archives/2014/index.html","hash":"6a591c2cf1e44774c9c59583cbb35fb721c44239","modified":1513956379359},{"_id":"public/archives/2014/06/index.html","hash":"b36a9a6e71f54ff42c7a8da0b788caf9c4e82300","modified":1513956379359},{"_id":"public/archives/2014/07/index.html","hash":"45e94641e1703ba080da8c60dd83cd032db8fa89","modified":1513956379359},{"_id":"public/archives/2015/index.html","hash":"01ec01c7bfa9c50633692d5edc5f0445d83ff61a","modified":1513956379360},{"_id":"public/archives/2015/05/index.html","hash":"92580c3bef4faa72fc081274d58581f04dd97e9e","modified":1513956379360},{"_id":"public/archives/2015/09/index.html","hash":"ef314c7cede586eeaeb5bc2e056f86b4a4aa702d","modified":1513953567903},{"_id":"public/archives/2017/index.html","hash":"5618f43a88eaeced09db8de099028ed490a29875","modified":1513953567903},{"_id":"public/archives/2017/12/index.html","hash":"196bbda711edbdc2edf257baacfd84b87c3ab2e8","modified":1513953567903},{"_id":"public/index.html","hash":"400d50cff55998ca73aa6784bcee2b2b5c50595c","modified":1513956259421},{"_id":"public/page/2/index.html","hash":"ddc2e09ac10857980bace05ccae98d57a50fdf7c","modified":1513956259421},{"_id":"public/tags/JavaScript/index.html","hash":"fee7f33a1048a81bf47a1143e41cf35ed4eeb738","modified":1513956379361},{"_id":"public/2014/07/29/程序员的强迫症/index.html","hash":"9ed03fd39efa5251cf4fd190d3acd8ff386616d1","modified":1513956379362},{"_id":"public/2014/07/15/初识JavaScript Promises之二/index.html","hash":"9883171e77e34f0dc3e8a078146469b319a86e70","modified":1513956379362},{"_id":"public/2014/06/28/初识JavaScript Promises之一/index.html","hash":"87876afd38b9d832c87a99d918b51cf7d404707f","modified":1513956379362},{"_id":"public/2012/11/11/Ajax-Encoding/index.html","hash":"806633923ba5830e7850b7dd67002b927ea4fe1a","modified":1513956379362},{"_id":"public/2012/07/27/A-Cross-Domain-Practice/index.html","hash":"b137ad065b9137e29bee1a093867ec2b07a892be","modified":1513956379362},{"_id":"public/2012/03/28/关于容灾，前端能够做什么/index.html","hash":"18d8fd4a837fff08ab4bfffaa4c53707946bf12c","modified":1513956379362},{"_id":"public/2012/02/06/JavaScript-Template-Engine/index.html","hash":"c1db2e79832fdf9356751094c3df4c35bc6f16ec","modified":1513956379362},{"_id":"public/2011/10/22/JSONP-Memory-Leak/index.html","hash":"d5f527145a5647adee118f9373e91eefb39f3d35","modified":1513956379362},{"_id":"public/2010/01/25/JavaScript乱弹之（一）：JQuery+CSS入门/index.html","hash":"14232a7e9c635a0cf0633ea3682cd20cc1896544","modified":1513956379362},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1513953567914},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1513953567914},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1513953567914},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1513953567914},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1513953567914},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1513953567914},{"_id":"public/images/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1513953567914},{"_id":"public/images/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1513953567915},{"_id":"public/images/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1513953567915},{"_id":"public/images/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1513953567915},{"_id":"public/images/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1513953567915},{"_id":"public/images/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1513953567915},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1513953567915},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1513953567922},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1513953567923},{"_id":"public/css/donate.css","hash":"25d676b6f9c4987d66cd2fcb4e97252ce54f42a0","modified":1513956709960},{"_id":"public/css/source.css","hash":"c2db61f1854743b6fbec35d197b49f32ee09061a","modified":1513953567929},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1513953567929},{"_id":"public/js/typing.js","hash":"011bfad2aa293ed0fc73390efd3af3a2bd56adf7","modified":1513953567929},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1513953567929},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1513953567929},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1513953567929},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1513953567930},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1513953567930},{"_id":"public/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1513953567930},{"_id":"public/css/typing.css","hash":"7babfee348af348d4baef09a15f2d6763711aebc","modified":1513956709961},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1513953567930},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1513953567930},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1513953567930},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1513953567930},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1513953567931},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1513953567948},{"_id":"source/_posts/better-react-2.md","hash":"d398cf244bc2df116d4952aa224c921f0da6bb83","modified":1513955457000},{"_id":"source/_posts/better-react.md","hash":"f4cc696d35ed4d0209552b24d3bba7240c446564","modified":1513955268000},{"_id":"source/_posts/ci-1.md","hash":"747a66615415eca65931e80bf57e10d7f41ba977","modified":1513955057000},{"_id":"source/_posts/ci-2.md","hash":"4fb79853b852795f445850f345f7fe2df2777025","modified":1513955111000},{"_id":"source/_posts/code-management.md","hash":"3cf7d2d7e55eb8973e9d7c1ccd6e39a3d694bd07","modified":1513956229000},{"_id":"source/_posts/decodeURIComponent.md","hash":"dd6758e653f080401d8220591d0f20d69eb5b7fa","modified":1513954947000},{"_id":"source/_posts/parser.md","hash":"e47c4d382ca481880f00e71f6e00ac90f8a57c54","modified":1513955689000},{"_id":"source/_posts/redux.md","hash":"5e40f7f96f347a6f5e009958b91bd422d374c765","modified":1513955343000},{"_id":"source/_posts/requirejs定义模块的两种方式.md","hash":"3fb57cb180218a192cc8500ff1f369d8639c55bc","modified":1513954856000},{"_id":"source/_posts/slimerjs.md","hash":"c77f407719a9585a35d7cb3e8da2ca4dffab9a9c","modified":1513955932000},{"_id":"source/_posts/isArguments.md","hash":"2469e770d52b1909fdfeaf3aeb9ab0f092aa1c6e","modified":1513954742000},{"_id":"source/_posts/space.md","hash":"9eb8819ab125dd9002176eaecef796cf0d8410dd","modified":1513955612000},{"_id":"source/_posts/violet.md","hash":"a22791ce68ace06ead1f2d1ea720e3deca6190d4","modified":1513955548000},{"_id":"public/2016/09/09/space/index.html","hash":"174fcc7e38a0fbb71ed883fcf739d467385ea3f9","modified":1513956379355},{"_id":"public/2016/06/18/violet/index.html","hash":"f9af7d5fe9b17093d75c42e03c2cf77f6c521a2f","modified":1513956379356},{"_id":"public/2016/07/17/parser/index.html","hash":"9d3182d168a1e21d1d67d3dc27e67b487cfe1ece","modified":1513956379355},{"_id":"public/2016/03/12/better-react-2/index.html","hash":"0c9e475a25847d2df35c740ffd568b35f6916356","modified":1513956379356},{"_id":"public/2016/06/26/code-management/index.html","hash":"f2bdbe521bbbc8279fd2150e2947f70d8a39f01d","modified":1513956379356},{"_id":"public/2016/02/21/redux/index.html","hash":"67b833144cd3e7a1ba30ca50fcd150a05edc066c","modified":1513956379356},{"_id":"public/2016/02/04/better-react/index.html","hash":"0702c0ec8a919e6bd1d3e4f649841b7f4d2719dd","modified":1513956379356},{"_id":"public/2015/06/30/decodeURIComponent/index.html","hash":"5d1b3b8806408886ec9d083483e27aac351ff729","modified":1513956379357},{"_id":"public/2015/12/17/ci-2/index.html","hash":"44e731098596b3d09d92638bdc88b4d4d9ee72cc","modified":1513956379357},{"_id":"public/2015/04/02/isArguments/index.html","hash":"6182db470eddc02314ff3525dee997fd99c3100e","modified":1513956379357},{"_id":"public/2015/12/10/ci-1/index.html","hash":"69d084cbf9d58146ba5926e8c32ba3647f06015d","modified":1513956379357},{"_id":"public/2015/04/09/requirejs定义模块的两种方式/index.html","hash":"57d24c8ebc00fe3c68238352c3dc0c9ccd289b68","modified":1513956379357},{"_id":"public/1970/01/01/hello-world/index.html","hash":"c3da502d1c470d5ff0d2c207e812cf598a3e0c78","modified":1513956379358},{"_id":"public/archives/1970/index.html","hash":"d05bfa682e5e2d66e6eb08cedff2b224f5f4ed98","modified":1513956379358},{"_id":"public/archives/1970/01/index.html","hash":"8a0870807dc4778c6823e5c6f6085771f376fb7c","modified":1513956379358},{"_id":"public/2016/06/29/slimerjs/index.html","hash":"f79329515cf97bfa6e2a3c9041c5137f218adfe9","modified":1513956379361},{"_id":"public/archives/2015/04/index.html","hash":"a4502d76b014c328697824997e136c4d53e178ef","modified":1513956379360},{"_id":"public/archives/2015/06/index.html","hash":"3ff88bbc6eb2952654f6001841f8d14d1ccb5b58","modified":1513956379360},{"_id":"public/archives/2015/12/index.html","hash":"432fc500a318c640dfa33081f55527a8cbcc4cdc","modified":1513956379360},{"_id":"public/archives/2016/index.html","hash":"3a9e61854c348c631a8b951184e50de505b3fd53","modified":1513956379360},{"_id":"public/archives/2016/02/index.html","hash":"3d3abe58ef51f5b7b541016945f7d8ac3e4507b2","modified":1513956379360},{"_id":"public/archives/2016/03/index.html","hash":"86895fc73fc5bc4e0596f149ed176f66d69131d2","modified":1513956379360},{"_id":"public/archives/2016/06/index.html","hash":"bd57e3dee9e793716f4d248e1ca3896358aafb27","modified":1513956379360},{"_id":"public/archives/2016/07/index.html","hash":"e538d2a1b1a11da19423c31c46965bb8a24c79e1","modified":1513956379360},{"_id":"public/archives/2016/09/index.html","hash":"b739734d2cae97fc2406f79beab83ff20d4d9a0a","modified":1513956379361},{"_id":"public/page/3/index.html","hash":"276b4bdfa7521f78402067096c5a18082f19f21c","modified":1513956259427},{"_id":"public/tags/React/index.html","hash":"9a1d96e19e905c1fefe79d742ac306bc076d8779","modified":1513956379361},{"_id":"public/tags/持续集成/index.html","hash":"b9fcc9ca3152fe1e15cfd82db41d80313dfcd795","modified":1513956379361},{"_id":"public/tags/代码管理/index.html","hash":"f30365e5bf5402f9e94f8d683deb9e9755d1c340","modified":1513956379361},{"_id":"public/tags/JavaScript-解析器/index.html","hash":"e8ee8cc9b6f27cc5a7a5439a4bb848bb8b99ae02","modified":1513956379361},{"_id":"public/tags/Redux/index.html","hash":"aa4df4d57f6b5c7bd9f9961531d814fd24ecdcba","modified":1513956379361},{"_id":"public/tags/SlimerJS/index.html","hash":"e7b4d9722f14258b5b3105e1be23c87d73e087b3","modified":1513956379361}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","date":"1969-12-31T16:00:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 1970-01-01\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2017-12-22T15:15:53.000Z","_id":"cjbgp5ghe0000c395g82mj1ml","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"白鹭引擎无废话快速上手","date":"2015-05-02T16:00:00.000Z","_content":"\n如果你从未听说白鹭引擎，也不了解其用途，那么本文可能并不适合你。阅读之前请确保你已了解白鹭引擎是一套基于`TypeScript`的游戏开发引擎，本文讲述了使用白鹭引擎开发HTML5项目的一般流程。\n\n## 安装白鹭引擎\n\n安装很简单，不论是windows还是mac，前往官网下载白鹭引擎的安装包，解压安装即可。参考链接：\n\n> * [Windows](http://docs.egret-labs.org/post/quitestart/install/installwin.html)\n> * [Mac](http://docs.egret-labs.org/post/quitestart/install/instalformac.html)\n\n友情提示：至本教程完成时，白鹭引擎尚未提供适用于Linux系统的安装包。\n\n## 验证安装过程\n\n安装完成之后，打开终端输入`egret`，命令行会展示用法提示以及command列表。\n\n如果egret命令未找到，说明你的安装过程出错了。\n\n白鹭引擎的命令行工具是基于`Node.js`开发的，其源代码也是开源的。如果对某个命令有疑问或者对其实现感兴趣，可以直接查看其源代码更为方便。具体位置在白鹭引擎安装路径下的`/egret/tools/lib/tools`，比如`build.js`和`publish.js`分别对应`egret build `和`egret publish`命令。或者前往GitHub查看[https://github.com/egret-labs/egret-core/tree/master/tools/lib/tools](https://github.com/egret-labs/egret-core/tree/master/tools/lib/tools)\n\n## 创建项目\n\n```bash\negret create HelloWorld\n```\n\n## 编译项目\n\n```bash\negret build HelloWorld\n```\n\n将TypeScript的源代码编译为原生JavaScript代码，默认编译为HTML5项目。**如果需要编译为native项目**，则加上`--runtime native`参数。\n\n## 运行项目\n\n```bash\negret startserver HelloWorld\n```\n\n白鹭引擎内部创建了一个基于Express的WebServer，当运行此命令后会自动在默认刘传奇中打开项目首页。\n\n## 发布项目\n\n```bash\negret publish HelloWorld\n```\n\n## 其它\n\nHelloWorld之后继续深入，请阅读[http://docs.egret-labs.org/post/quitestart/helloworld/helloworld2.html](http://docs.egret-labs.org/post/quitestart/helloworld/helloworld2.html)。\n\n白鹭引擎相关开源项目：[https://github.com/egret-labs](https://github.com/egret-labs)\n\n## 关于TypeScript\n\n如果读者需要使用白鹭引擎开发游戏，那么系统地学习TypeScript是必经之路。虽然TypeScript的入门门槛不算高，但是完全掌握也需不少时间，不过对于开发一款游戏来说，掌握这门语言带来的收益应该远远大于学习的成本。\n","source":"_posts/白鹭引擎无废话快速上手.md","raw":"---\ntitle: 白鹭引擎无废话快速上手\ndate: 2015-05-03\ntags: JavaScript\n---\n\n如果你从未听说白鹭引擎，也不了解其用途，那么本文可能并不适合你。阅读之前请确保你已了解白鹭引擎是一套基于`TypeScript`的游戏开发引擎，本文讲述了使用白鹭引擎开发HTML5项目的一般流程。\n\n## 安装白鹭引擎\n\n安装很简单，不论是windows还是mac，前往官网下载白鹭引擎的安装包，解压安装即可。参考链接：\n\n> * [Windows](http://docs.egret-labs.org/post/quitestart/install/installwin.html)\n> * [Mac](http://docs.egret-labs.org/post/quitestart/install/instalformac.html)\n\n友情提示：至本教程完成时，白鹭引擎尚未提供适用于Linux系统的安装包。\n\n## 验证安装过程\n\n安装完成之后，打开终端输入`egret`，命令行会展示用法提示以及command列表。\n\n如果egret命令未找到，说明你的安装过程出错了。\n\n白鹭引擎的命令行工具是基于`Node.js`开发的，其源代码也是开源的。如果对某个命令有疑问或者对其实现感兴趣，可以直接查看其源代码更为方便。具体位置在白鹭引擎安装路径下的`/egret/tools/lib/tools`，比如`build.js`和`publish.js`分别对应`egret build `和`egret publish`命令。或者前往GitHub查看[https://github.com/egret-labs/egret-core/tree/master/tools/lib/tools](https://github.com/egret-labs/egret-core/tree/master/tools/lib/tools)\n\n## 创建项目\n\n```bash\negret create HelloWorld\n```\n\n## 编译项目\n\n```bash\negret build HelloWorld\n```\n\n将TypeScript的源代码编译为原生JavaScript代码，默认编译为HTML5项目。**如果需要编译为native项目**，则加上`--runtime native`参数。\n\n## 运行项目\n\n```bash\negret startserver HelloWorld\n```\n\n白鹭引擎内部创建了一个基于Express的WebServer，当运行此命令后会自动在默认刘传奇中打开项目首页。\n\n## 发布项目\n\n```bash\negret publish HelloWorld\n```\n\n## 其它\n\nHelloWorld之后继续深入，请阅读[http://docs.egret-labs.org/post/quitestart/helloworld/helloworld2.html](http://docs.egret-labs.org/post/quitestart/helloworld/helloworld2.html)。\n\n白鹭引擎相关开源项目：[https://github.com/egret-labs](https://github.com/egret-labs)\n\n## 关于TypeScript\n\n如果读者需要使用白鹭引擎开发游戏，那么系统地学习TypeScript是必经之路。虽然TypeScript的入门门槛不算高，但是完全掌握也需不少时间，不过对于开发一款游戏来说，掌握这门语言带来的收益应该远远大于学习的成本。\n","slug":"白鹭引擎无废话快速上手","published":1,"updated":"2017-12-22T07:23:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbhnknmz0000yx95bz6k24fq","content":"<p>如果你从未听说白鹭引擎，也不了解其用途，那么本文可能并不适合你。阅读之前请确保你已了解白鹭引擎是一套基于<code>TypeScript</code>的游戏开发引擎，本文讲述了使用白鹭引擎开发HTML5项目的一般流程。</p>\n<h2 id=\"安装白鹭引擎\"><a href=\"#安装白鹭引擎\" class=\"headerlink\" title=\"安装白鹭引擎\"></a>安装白鹭引擎</h2><p>安装很简单，不论是windows还是mac，前往官网下载白鹭引擎的安装包，解压安装即可。参考链接：</p>\n<blockquote>\n<ul>\n<li><a href=\"http://docs.egret-labs.org/post/quitestart/install/installwin.html\" target=\"_blank\" rel=\"noopener\">Windows</a></li>\n<li><a href=\"http://docs.egret-labs.org/post/quitestart/install/instalformac.html\" target=\"_blank\" rel=\"noopener\">Mac</a></li>\n</ul>\n</blockquote>\n<p>友情提示：至本教程完成时，白鹭引擎尚未提供适用于Linux系统的安装包。</p>\n<h2 id=\"验证安装过程\"><a href=\"#验证安装过程\" class=\"headerlink\" title=\"验证安装过程\"></a>验证安装过程</h2><p>安装完成之后，打开终端输入<code>egret</code>，命令行会展示用法提示以及command列表。</p>\n<p>如果egret命令未找到，说明你的安装过程出错了。</p>\n<p>白鹭引擎的命令行工具是基于<code>Node.js</code>开发的，其源代码也是开源的。如果对某个命令有疑问或者对其实现感兴趣，可以直接查看其源代码更为方便。具体位置在白鹭引擎安装路径下的<code>/egret/tools/lib/tools</code>，比如<code>build.js</code>和<code>publish.js</code>分别对应<code>egret build</code>和<code>egret publish</code>命令。或者前往GitHub查看<a href=\"https://github.com/egret-labs/egret-core/tree/master/tools/lib/tools\" target=\"_blank\" rel=\"noopener\">https://github.com/egret-labs/egret-core/tree/master/tools/lib/tools</a></p>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egret create HelloWorld</span><br></pre></td></tr></table></figure>\n<h2 id=\"编译项目\"><a href=\"#编译项目\" class=\"headerlink\" title=\"编译项目\"></a>编译项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egret build HelloWorld</span><br></pre></td></tr></table></figure>\n<p>将TypeScript的源代码编译为原生JavaScript代码，默认编译为HTML5项目。<strong>如果需要编译为native项目</strong>，则加上<code>--runtime native</code>参数。</p>\n<h2 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egret startserver HelloWorld</span><br></pre></td></tr></table></figure>\n<p>白鹭引擎内部创建了一个基于Express的WebServer，当运行此命令后会自动在默认刘传奇中打开项目首页。</p>\n<h2 id=\"发布项目\"><a href=\"#发布项目\" class=\"headerlink\" title=\"发布项目\"></a>发布项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egret publish HelloWorld</span><br></pre></td></tr></table></figure>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>HelloWorld之后继续深入，请阅读<a href=\"http://docs.egret-labs.org/post/quitestart/helloworld/helloworld2.html\" target=\"_blank\" rel=\"noopener\">http://docs.egret-labs.org/post/quitestart/helloworld/helloworld2.html</a>。</p>\n<p>白鹭引擎相关开源项目：<a href=\"https://github.com/egret-labs\" target=\"_blank\" rel=\"noopener\">https://github.com/egret-labs</a></p>\n<h2 id=\"关于TypeScript\"><a href=\"#关于TypeScript\" class=\"headerlink\" title=\"关于TypeScript\"></a>关于TypeScript</h2><p>如果读者需要使用白鹭引擎开发游戏，那么系统地学习TypeScript是必经之路。虽然TypeScript的入门门槛不算高，但是完全掌握也需不少时间，不过对于开发一款游戏来说，掌握这门语言带来的收益应该远远大于学习的成本。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>如果你从未听说白鹭引擎，也不了解其用途，那么本文可能并不适合你。阅读之前请确保你已了解白鹭引擎是一套基于<code>TypeScript</code>的游戏开发引擎，本文讲述了使用白鹭引擎开发HTML5项目的一般流程。</p>\n<h2 id=\"安装白鹭引擎\"><a href=\"#安装白鹭引擎\" class=\"headerlink\" title=\"安装白鹭引擎\"></a>安装白鹭引擎</h2><p>安装很简单，不论是windows还是mac，前往官网下载白鹭引擎的安装包，解压安装即可。参考链接：</p>\n<blockquote>\n<ul>\n<li><a href=\"http://docs.egret-labs.org/post/quitestart/install/installwin.html\" target=\"_blank\" rel=\"noopener\">Windows</a></li>\n<li><a href=\"http://docs.egret-labs.org/post/quitestart/install/instalformac.html\" target=\"_blank\" rel=\"noopener\">Mac</a></li>\n</ul>\n</blockquote>\n<p>友情提示：至本教程完成时，白鹭引擎尚未提供适用于Linux系统的安装包。</p>\n<h2 id=\"验证安装过程\"><a href=\"#验证安装过程\" class=\"headerlink\" title=\"验证安装过程\"></a>验证安装过程</h2><p>安装完成之后，打开终端输入<code>egret</code>，命令行会展示用法提示以及command列表。</p>\n<p>如果egret命令未找到，说明你的安装过程出错了。</p>\n<p>白鹭引擎的命令行工具是基于<code>Node.js</code>开发的，其源代码也是开源的。如果对某个命令有疑问或者对其实现感兴趣，可以直接查看其源代码更为方便。具体位置在白鹭引擎安装路径下的<code>/egret/tools/lib/tools</code>，比如<code>build.js</code>和<code>publish.js</code>分别对应<code>egret build</code>和<code>egret publish</code>命令。或者前往GitHub查看<a href=\"https://github.com/egret-labs/egret-core/tree/master/tools/lib/tools\" target=\"_blank\" rel=\"noopener\">https://github.com/egret-labs/egret-core/tree/master/tools/lib/tools</a></p>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egret create HelloWorld</span><br></pre></td></tr></table></figure>\n<h2 id=\"编译项目\"><a href=\"#编译项目\" class=\"headerlink\" title=\"编译项目\"></a>编译项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egret build HelloWorld</span><br></pre></td></tr></table></figure>\n<p>将TypeScript的源代码编译为原生JavaScript代码，默认编译为HTML5项目。<strong>如果需要编译为native项目</strong>，则加上<code>--runtime native</code>参数。</p>\n<h2 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egret startserver HelloWorld</span><br></pre></td></tr></table></figure>\n<p>白鹭引擎内部创建了一个基于Express的WebServer，当运行此命令后会自动在默认刘传奇中打开项目首页。</p>\n<h2 id=\"发布项目\"><a href=\"#发布项目\" class=\"headerlink\" title=\"发布项目\"></a>发布项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egret publish HelloWorld</span><br></pre></td></tr></table></figure>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>HelloWorld之后继续深入，请阅读<a href=\"http://docs.egret-labs.org/post/quitestart/helloworld/helloworld2.html\" target=\"_blank\" rel=\"noopener\">http://docs.egret-labs.org/post/quitestart/helloworld/helloworld2.html</a>。</p>\n<p>白鹭引擎相关开源项目：<a href=\"https://github.com/egret-labs\" target=\"_blank\" rel=\"noopener\">https://github.com/egret-labs</a></p>\n<h2 id=\"关于TypeScript\"><a href=\"#关于TypeScript\" class=\"headerlink\" title=\"关于TypeScript\"></a>关于TypeScript</h2><p>如果读者需要使用白鹭引擎开发游戏，那么系统地学习TypeScript是必经之路。虽然TypeScript的入门门槛不算高，但是完全掌握也需不少时间，不过对于开发一款游戏来说，掌握这门语言带来的收益应该远远大于学习的成本。</p>\n"},{"title":"程序员的强迫症","date":"2014-07-28T16:00:00.000Z","_content":"\n编程追求效率，却也讲究习惯。习惯改变之难，还真不能说`那就不是个事儿`，在技术圈子尤甚。\n\n当然，JavaScript这个圈子也不例外，比如这些：\n\n* [JavaScript语句后面应该加分号吗？](http://www.zhihu.com/question/20298345)\n* [eval is evil?](http://www.nczonline.net/blog/2013/06/25/eval-isnt-evil-just-misunderstood/)\n* [== or ===?](http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/)\n* ...\n\n上面的话题，个个是G点，分分钟引发高潮。就犹如`Vim和Emacs`、`Windows和Linux`等话题，一旦开篇随之而来的就是引经据典、长篇大论、你死我活、百态尽出。\n\n作为有格调的程序员，我们应追求效率。而非沉浸于无谓的争论，无端的争论往往因为恪守习惯，不善变通。\n\n就上面的话题进行争论，或许还有些\"技术主义情怀\"。但是下面的这些纯感性的**习惯**呢？不妨先看看：\n\n* 缩进用tab还是用空格，你喜欢哪一种?\n* tab等于两个还是四个空格，你喜欢哪一种？\n* 对象的键值是紧凑连接，还是在冒号后加一个空格，你喜欢哪一种？\n* 变量声明，单行还是多行，你又喜欢哪一种？\n* 单行代码块的花括号，加还是不加？\n* ...\n\n这种**习惯**多如牛毛，以至“知音”着实难寻，因为实在是众口难调、各有所爱。也难怪**Web Storm**等编辑器在Code Style上花尽心思。\n\n一味地拘泥于习惯，在团队协作时就会患上**强迫症**。比如在别人的代码后面加个分号、补个空格，多加个空白行等等诸如此类。如果赶上心情好、情绪佳，或许会再花上一两小时，与他人舌战一番，定要分个胜负。\n\n此种行为既“无伤大雅”，也非“罪恶滔天”，情不自禁而已。不然“看着心里难受”，这种难受之于程序员，比1px的像素差之于产品经理可来的猛烈多了。于是乎加分号、补空格、按换行、删注释、调整顺序，忙得不亦乐乎。待大功告成，仿佛看见了光，解救了天解救了地也解救了自己，心情倍儿爽。\n\n如果你还在做这种“解救众生”的活，不妨试试JSHint来换个活法儿吧。\n\n## 什么是JSHint\n\n[JSHint](http://www.jshint.com/about/)是一个用于检查JavaScript代码错误和潜在问题的工具。通过简单的配置，它可以强制约束团队保持一致的编码风格。\n\n## JSHint配置文件的格式\n\n在项目根目录新加一个名称为**.jshintrc**的文件，加入相关配置即可，典型的配置如下：\n\n```javascript\n{\n\t\"node\": true,\n\t\"eqeqeq\": true,\n\t\"forin\": false,\n\t\"plusplus\": false,\n\t\"undef\": true,\n\t\"unused\": true,\n\t\"strict\": false\n}\n```\njson文件中的每一项都对应着一条规则。如果代码违反了规则，编辑器会给出错误提示。这方面Web Storm非常不错。JSHint详细配置文档，请看[这里](http://www.jshint.com/docs/options/)\n\n每个文件夹可以有单独的.jshintrc，作用范围就是其下JavaScript代码。还可以使用**.jshintignore**来排除将规则应用到当前目录指定的文件和文件夹。\n\n## 如何在Web Storm中使用JSHint\n\n> * `CMD + ,` 打开偏好设置，输入JSHint搜索习惯配置项\n> * 选中Inspections>JavaScript>Code quality tools>JSHint\n> * 点击JavaScript>Code quality tools>JSHint，勾选enable和use config file(default)即可\n\n## 配置详解\n\n### 强制选项(enforcing options)\n\n设置为true时，应用规则，对代码约束更严格。\n\n配置项 | 释义 | 好处\n------ | ------ | ------\n bitwise | 禁止按位操作 | 避免&和&&手误\ncamelcase | 变量名只允许驼峰camelCase和UPPER_CASE风格 |\ncurly | 单行代码块必须使用分号 | 防止潜在bug\neqeqeq | 禁止使用==,!= | 避免类型转换\nes3 | 兼容IE 6/7/8/9 |\nforin | 内部必须使用hasOwnProperty | 防止遍历原型链上的其它属性\nfreeze | 禁止覆写原生对象 |\nimmend | (function(){}()) |\nindent | 2/4 |\nlatedef | 禁止未定义而使用 | 防止潜在bug\nnewcap | 类名首字母大写 |\nnoarg | 禁止使用arguments.caller和arguments.callee | 难以优化，且已经被废除\nnoempty | 禁止出现空代码块 |\nnonew | 禁止调用构造函数而不赋值 |\nplusplus | 禁止使用++, -- | 不同语言含义不一致\nquotmark | true/single/double |\nundef | 禁止使用未定义的遍历 |\nunused | 禁止出现未使用的变量 | 设置为vars不检查函数参数\nstrict | 所有的**函数**都会使用es5的严格模式 |\nmaxparams | 最多的形参 | 5\nmaxdepth | 嵌套深度 |\nmaxstatements | 最多声明 |\nmaxcomplexity | cyclomatic complexity |\nmaxlen | 设置一行最大的长度 |   \n\n### 宽松选项(relaxing options)\n\n设置为true时，应用规则，对代码约束更宽松。\n\n配置项 | 解释 | 说明\n------ | ------ | ------\nasi | 忽略句尾分号警告 | 扩展阅读：[1](http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding) , [2](http://inimino.org/~inimino/blog/javascript_semicolons)\nboss | 会允许在if，for，while里面编写赋值语句 | 不检查判断条件中得赋值\ndebug | 忽略debug语句 |\neqnull | 允许 == null |\nesnext | 允许ES6语法 | [ES6草案](http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts)\nevil | 忽略evil警告|\nexpr | 在赋值或者函数调用的地方允许出现表达式 | 大部分情况是手误\nfuncscope | 允许在控制流程if等中定义变量 |  默认为false\nglobalstrict | 忽略全局使用strict的警告 |\niterator | 忽略使用__iterator__属性警告 | 并非所有浏览器支持\nlastsemic | 仅允许单行代码块不使用分号 |\nlaxbreak | 忽略不安全的换行告警 |\nlaxcomma | 忽略逗号风格告警 |\nloopfunc | 忽略在循环中定义函数告警 | 建议设置为false\nmaxerr | 设置JSHint最多警告数目 | 默认50\nmoz | 表明这是Mozilla扩展 | [New in JavaScript 1.7](https://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.7)\nmultistr | 忽略多行字符串告警 |\nnotypeof | 忽略不正确的typeof比较 | 默认为false，不用管\nproto | 忽略使用__proto__ 属性 |\nscripturl | 忽略使用\"javascript:...\"告警 |\nshadow | 忽略重复声明变量产生的告警 |\nsub | 忽略使用[]而不是.访问属性的告警 |\nsupernew | 忽略使用诡异的构造函数告警 | [示例](http://www.jshint.com/docs/options/#supernew)\nvalidthis | 忽略严格模式在非构造函数中使用this | 函数内部使用\nnoyield | 允许没有使用yield的generator function |\n\n### 环境配置(Environments)\n\n配置项 | 说明\n------ | ------\nbrowser | 可以使用HTML5的新特性如FileReader等\ncouch | CouchDB\ndevel | 可以使用穷人版的debug工具，比如console、alert\ndojo | Dojo Toolkit\njquery | jquery\nnode | Node.js\nnonstandard | 允许流行而不标准的全局变量，比如escape和unescape\nphantom | [PhantomJS](http://phantomjs.org/)\n protypejs | protypejs\nrhino | [Rhino](http://www.mozilla.org/rhino/)\nworker | 表明你的脚本运行在[Web Worker](https://developer.mozilla.org/en/Using_web_workers)中\nwsh | [Windows_Script_Host](http://en.wikipedia.org/wiki/Windows_Script_Host)\nyui | [YUI](http://yuilibrary.com/)\n\n## 币须网的JSHint\n\n[币须网]( http://www.coinxu.com)作为国内第一家应用**比特币多重签名**技术的电子商务平台，后台全部使用Node.js搭建，在团队协作上也需要JSHint这样的工具来进行检查和约束。我们正在使用如下的配置：\n\n```javascript\n{\n\t\"bitwise\": true,\n\t\"camelcase\": false,\n\t\"curly\": true,\n\t\"eqeqeq\": true,\n\t\"es3\": false,\n\t\"forin\": true,\n\t\"freeze\": false,\n\t\"immed\": false,\n\t\"indent\": 2,\n\t\"latedef\": true,\n\t\"newcap\": true,\n\t\"noarg\": true,\n\t\"noempty\": true,\n\t\"nonbsp\": true,\n\t\"nonew\": true,\n\t\"plusplus\": true,\n\t\"quotmark\": true,\n\t\"undef\": true,\n\t\"unused\": true,\n\t\"strict\": false,\n\t\"maxparams\": 5,\n\t\"maxdepth\": 8,\n\t\"maxstatements\": 50,\n\t\"maxcomplexity\":false,\n\n\t\"asi\": true,\n\t\"boss\": false,\n\t\"debug\": false,\n\t\"eqnull\": true,\n\t\"esnext\": true,\n\t\"evil\": true,\n\t\"expr\": false,\n\t\"funcscope\": false,\n\t\"globalstrict\": true,\n\t\"iterator\": true,\n\t\"lastsemic\": true,\n\t\"laxbreak\": false,\n\t\"laxcomma\": false,\n\t\"loopfunc\": false,\n\t\"maxerr\": 50,\n\t\"multistr\": false,\n\t\"notypeof\": false,\n\t\"proto\":true,\n\t\"shadow\": false,\n\t\"supernew\": false,\n\t\"validthis\": false,\n\t\"noyield\": false,\n\n\t\"node\": true\n}\n```\n\n## 结语\n\n**强迫症**每个人或多或少都有一点，沉溺于习惯求稳而不求变也是人之本性。但如果要突破自我，不求变通怕是成不了气候。再则善于运用标准化的工具也算得上一大进步，程序员尤其如此，如果偶然之间随手解救了团队和自己也算得上造福一方吧。\n","source":"_posts/程序员的强迫症.md","raw":"---\ntitle: 程序员的强迫症\ndate: 2014-07-29\ntags: JavaScript\n---\n\n编程追求效率，却也讲究习惯。习惯改变之难，还真不能说`那就不是个事儿`，在技术圈子尤甚。\n\n当然，JavaScript这个圈子也不例外，比如这些：\n\n* [JavaScript语句后面应该加分号吗？](http://www.zhihu.com/question/20298345)\n* [eval is evil?](http://www.nczonline.net/blog/2013/06/25/eval-isnt-evil-just-misunderstood/)\n* [== or ===?](http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/)\n* ...\n\n上面的话题，个个是G点，分分钟引发高潮。就犹如`Vim和Emacs`、`Windows和Linux`等话题，一旦开篇随之而来的就是引经据典、长篇大论、你死我活、百态尽出。\n\n作为有格调的程序员，我们应追求效率。而非沉浸于无谓的争论，无端的争论往往因为恪守习惯，不善变通。\n\n就上面的话题进行争论，或许还有些\"技术主义情怀\"。但是下面的这些纯感性的**习惯**呢？不妨先看看：\n\n* 缩进用tab还是用空格，你喜欢哪一种?\n* tab等于两个还是四个空格，你喜欢哪一种？\n* 对象的键值是紧凑连接，还是在冒号后加一个空格，你喜欢哪一种？\n* 变量声明，单行还是多行，你又喜欢哪一种？\n* 单行代码块的花括号，加还是不加？\n* ...\n\n这种**习惯**多如牛毛，以至“知音”着实难寻，因为实在是众口难调、各有所爱。也难怪**Web Storm**等编辑器在Code Style上花尽心思。\n\n一味地拘泥于习惯，在团队协作时就会患上**强迫症**。比如在别人的代码后面加个分号、补个空格，多加个空白行等等诸如此类。如果赶上心情好、情绪佳，或许会再花上一两小时，与他人舌战一番，定要分个胜负。\n\n此种行为既“无伤大雅”，也非“罪恶滔天”，情不自禁而已。不然“看着心里难受”，这种难受之于程序员，比1px的像素差之于产品经理可来的猛烈多了。于是乎加分号、补空格、按换行、删注释、调整顺序，忙得不亦乐乎。待大功告成，仿佛看见了光，解救了天解救了地也解救了自己，心情倍儿爽。\n\n如果你还在做这种“解救众生”的活，不妨试试JSHint来换个活法儿吧。\n\n## 什么是JSHint\n\n[JSHint](http://www.jshint.com/about/)是一个用于检查JavaScript代码错误和潜在问题的工具。通过简单的配置，它可以强制约束团队保持一致的编码风格。\n\n## JSHint配置文件的格式\n\n在项目根目录新加一个名称为**.jshintrc**的文件，加入相关配置即可，典型的配置如下：\n\n```javascript\n{\n\t\"node\": true,\n\t\"eqeqeq\": true,\n\t\"forin\": false,\n\t\"plusplus\": false,\n\t\"undef\": true,\n\t\"unused\": true,\n\t\"strict\": false\n}\n```\njson文件中的每一项都对应着一条规则。如果代码违反了规则，编辑器会给出错误提示。这方面Web Storm非常不错。JSHint详细配置文档，请看[这里](http://www.jshint.com/docs/options/)\n\n每个文件夹可以有单独的.jshintrc，作用范围就是其下JavaScript代码。还可以使用**.jshintignore**来排除将规则应用到当前目录指定的文件和文件夹。\n\n## 如何在Web Storm中使用JSHint\n\n> * `CMD + ,` 打开偏好设置，输入JSHint搜索习惯配置项\n> * 选中Inspections>JavaScript>Code quality tools>JSHint\n> * 点击JavaScript>Code quality tools>JSHint，勾选enable和use config file(default)即可\n\n## 配置详解\n\n### 强制选项(enforcing options)\n\n设置为true时，应用规则，对代码约束更严格。\n\n配置项 | 释义 | 好处\n------ | ------ | ------\n bitwise | 禁止按位操作 | 避免&和&&手误\ncamelcase | 变量名只允许驼峰camelCase和UPPER_CASE风格 |\ncurly | 单行代码块必须使用分号 | 防止潜在bug\neqeqeq | 禁止使用==,!= | 避免类型转换\nes3 | 兼容IE 6/7/8/9 |\nforin | 内部必须使用hasOwnProperty | 防止遍历原型链上的其它属性\nfreeze | 禁止覆写原生对象 |\nimmend | (function(){}()) |\nindent | 2/4 |\nlatedef | 禁止未定义而使用 | 防止潜在bug\nnewcap | 类名首字母大写 |\nnoarg | 禁止使用arguments.caller和arguments.callee | 难以优化，且已经被废除\nnoempty | 禁止出现空代码块 |\nnonew | 禁止调用构造函数而不赋值 |\nplusplus | 禁止使用++, -- | 不同语言含义不一致\nquotmark | true/single/double |\nundef | 禁止使用未定义的遍历 |\nunused | 禁止出现未使用的变量 | 设置为vars不检查函数参数\nstrict | 所有的**函数**都会使用es5的严格模式 |\nmaxparams | 最多的形参 | 5\nmaxdepth | 嵌套深度 |\nmaxstatements | 最多声明 |\nmaxcomplexity | cyclomatic complexity |\nmaxlen | 设置一行最大的长度 |   \n\n### 宽松选项(relaxing options)\n\n设置为true时，应用规则，对代码约束更宽松。\n\n配置项 | 解释 | 说明\n------ | ------ | ------\nasi | 忽略句尾分号警告 | 扩展阅读：[1](http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding) , [2](http://inimino.org/~inimino/blog/javascript_semicolons)\nboss | 会允许在if，for，while里面编写赋值语句 | 不检查判断条件中得赋值\ndebug | 忽略debug语句 |\neqnull | 允许 == null |\nesnext | 允许ES6语法 | [ES6草案](http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts)\nevil | 忽略evil警告|\nexpr | 在赋值或者函数调用的地方允许出现表达式 | 大部分情况是手误\nfuncscope | 允许在控制流程if等中定义变量 |  默认为false\nglobalstrict | 忽略全局使用strict的警告 |\niterator | 忽略使用__iterator__属性警告 | 并非所有浏览器支持\nlastsemic | 仅允许单行代码块不使用分号 |\nlaxbreak | 忽略不安全的换行告警 |\nlaxcomma | 忽略逗号风格告警 |\nloopfunc | 忽略在循环中定义函数告警 | 建议设置为false\nmaxerr | 设置JSHint最多警告数目 | 默认50\nmoz | 表明这是Mozilla扩展 | [New in JavaScript 1.7](https://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.7)\nmultistr | 忽略多行字符串告警 |\nnotypeof | 忽略不正确的typeof比较 | 默认为false，不用管\nproto | 忽略使用__proto__ 属性 |\nscripturl | 忽略使用\"javascript:...\"告警 |\nshadow | 忽略重复声明变量产生的告警 |\nsub | 忽略使用[]而不是.访问属性的告警 |\nsupernew | 忽略使用诡异的构造函数告警 | [示例](http://www.jshint.com/docs/options/#supernew)\nvalidthis | 忽略严格模式在非构造函数中使用this | 函数内部使用\nnoyield | 允许没有使用yield的generator function |\n\n### 环境配置(Environments)\n\n配置项 | 说明\n------ | ------\nbrowser | 可以使用HTML5的新特性如FileReader等\ncouch | CouchDB\ndevel | 可以使用穷人版的debug工具，比如console、alert\ndojo | Dojo Toolkit\njquery | jquery\nnode | Node.js\nnonstandard | 允许流行而不标准的全局变量，比如escape和unescape\nphantom | [PhantomJS](http://phantomjs.org/)\n protypejs | protypejs\nrhino | [Rhino](http://www.mozilla.org/rhino/)\nworker | 表明你的脚本运行在[Web Worker](https://developer.mozilla.org/en/Using_web_workers)中\nwsh | [Windows_Script_Host](http://en.wikipedia.org/wiki/Windows_Script_Host)\nyui | [YUI](http://yuilibrary.com/)\n\n## 币须网的JSHint\n\n[币须网]( http://www.coinxu.com)作为国内第一家应用**比特币多重签名**技术的电子商务平台，后台全部使用Node.js搭建，在团队协作上也需要JSHint这样的工具来进行检查和约束。我们正在使用如下的配置：\n\n```javascript\n{\n\t\"bitwise\": true,\n\t\"camelcase\": false,\n\t\"curly\": true,\n\t\"eqeqeq\": true,\n\t\"es3\": false,\n\t\"forin\": true,\n\t\"freeze\": false,\n\t\"immed\": false,\n\t\"indent\": 2,\n\t\"latedef\": true,\n\t\"newcap\": true,\n\t\"noarg\": true,\n\t\"noempty\": true,\n\t\"nonbsp\": true,\n\t\"nonew\": true,\n\t\"plusplus\": true,\n\t\"quotmark\": true,\n\t\"undef\": true,\n\t\"unused\": true,\n\t\"strict\": false,\n\t\"maxparams\": 5,\n\t\"maxdepth\": 8,\n\t\"maxstatements\": 50,\n\t\"maxcomplexity\":false,\n\n\t\"asi\": true,\n\t\"boss\": false,\n\t\"debug\": false,\n\t\"eqnull\": true,\n\t\"esnext\": true,\n\t\"evil\": true,\n\t\"expr\": false,\n\t\"funcscope\": false,\n\t\"globalstrict\": true,\n\t\"iterator\": true,\n\t\"lastsemic\": true,\n\t\"laxbreak\": false,\n\t\"laxcomma\": false,\n\t\"loopfunc\": false,\n\t\"maxerr\": 50,\n\t\"multistr\": false,\n\t\"notypeof\": false,\n\t\"proto\":true,\n\t\"shadow\": false,\n\t\"supernew\": false,\n\t\"validthis\": false,\n\t\"noyield\": false,\n\n\t\"node\": true\n}\n```\n\n## 结语\n\n**强迫症**每个人或多或少都有一点，沉溺于习惯求稳而不求变也是人之本性。但如果要突破自我，不求变通怕是成不了气候。再则善于运用标准化的工具也算得上一大进步，程序员尤其如此，如果偶然之间随手解救了团队和自己也算得上造福一方吧。\n","slug":"程序员的强迫症","published":1,"updated":"2017-12-22T07:23:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbhnkz0n00000n95sax1b6oh","content":"<p>编程追求效率，却也讲究习惯。习惯改变之难，还真不能说<code>那就不是个事儿</code>，在技术圈子尤甚。</p>\n<p>当然，JavaScript这个圈子也不例外，比如这些：</p>\n<ul>\n<li><a href=\"http://www.zhihu.com/question/20298345\" target=\"_blank\" rel=\"noopener\">JavaScript语句后面应该加分号吗？</a></li>\n<li><a href=\"http://www.nczonline.net/blog/2013/06/25/eval-isnt-evil-just-misunderstood/\" target=\"_blank\" rel=\"noopener\">eval is evil?</a></li>\n<li><a href=\"http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/\" target=\"_blank\" rel=\"noopener\">== or ===?</a></li>\n<li>…</li>\n</ul>\n<p>上面的话题，个个是G点，分分钟引发高潮。就犹如<code>Vim和Emacs</code>、<code>Windows和Linux</code>等话题，一旦开篇随之而来的就是引经据典、长篇大论、你死我活、百态尽出。</p>\n<p>作为有格调的程序员，我们应追求效率。而非沉浸于无谓的争论，无端的争论往往因为恪守习惯，不善变通。</p>\n<p>就上面的话题进行争论，或许还有些”技术主义情怀”。但是下面的这些纯感性的<strong>习惯</strong>呢？不妨先看看：</p>\n<ul>\n<li>缩进用tab还是用空格，你喜欢哪一种?</li>\n<li>tab等于两个还是四个空格，你喜欢哪一种？</li>\n<li>对象的键值是紧凑连接，还是在冒号后加一个空格，你喜欢哪一种？</li>\n<li>变量声明，单行还是多行，你又喜欢哪一种？</li>\n<li>单行代码块的花括号，加还是不加？</li>\n<li>…</li>\n</ul>\n<p>这种<strong>习惯</strong>多如牛毛，以至“知音”着实难寻，因为实在是众口难调、各有所爱。也难怪<strong>Web Storm</strong>等编辑器在Code Style上花尽心思。</p>\n<p>一味地拘泥于习惯，在团队协作时就会患上<strong>强迫症</strong>。比如在别人的代码后面加个分号、补个空格，多加个空白行等等诸如此类。如果赶上心情好、情绪佳，或许会再花上一两小时，与他人舌战一番，定要分个胜负。</p>\n<p>此种行为既“无伤大雅”，也非“罪恶滔天”，情不自禁而已。不然“看着心里难受”，这种难受之于程序员，比1px的像素差之于产品经理可来的猛烈多了。于是乎加分号、补空格、按换行、删注释、调整顺序，忙得不亦乐乎。待大功告成，仿佛看见了光，解救了天解救了地也解救了自己，心情倍儿爽。</p>\n<p>如果你还在做这种“解救众生”的活，不妨试试JSHint来换个活法儿吧。</p>\n<h2 id=\"什么是JSHint\"><a href=\"#什么是JSHint\" class=\"headerlink\" title=\"什么是JSHint\"></a>什么是JSHint</h2><p><a href=\"http://www.jshint.com/about/\" target=\"_blank\" rel=\"noopener\">JSHint</a>是一个用于检查JavaScript代码错误和潜在问题的工具。通过简单的配置，它可以强制约束团队保持一致的编码风格。</p>\n<h2 id=\"JSHint配置文件的格式\"><a href=\"#JSHint配置文件的格式\" class=\"headerlink\" title=\"JSHint配置文件的格式\"></a>JSHint配置文件的格式</h2><p>在项目根目录新加一个名称为<strong>.jshintrc</strong>的文件，加入相关配置即可，典型的配置如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"node\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"eqeqeq\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"forin\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"plusplus\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"undef\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"unused\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"strict\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>json文件中的每一项都对应着一条规则。如果代码违反了规则，编辑器会给出错误提示。这方面Web Storm非常不错。JSHint详细配置文档，请看<a href=\"http://www.jshint.com/docs/options/\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>每个文件夹可以有单独的.jshintrc，作用范围就是其下JavaScript代码。还可以使用<strong>.jshintignore</strong>来排除将规则应用到当前目录指定的文件和文件夹。</p>\n<h2 id=\"如何在Web-Storm中使用JSHint\"><a href=\"#如何在Web-Storm中使用JSHint\" class=\"headerlink\" title=\"如何在Web Storm中使用JSHint\"></a>如何在Web Storm中使用JSHint</h2><blockquote>\n<ul>\n<li><code>CMD + ,</code> 打开偏好设置，输入JSHint搜索习惯配置项</li>\n<li>选中Inspections&gt;JavaScript&gt;Code quality tools&gt;JSHint</li>\n<li>点击JavaScript&gt;Code quality tools&gt;JSHint，勾选enable和use config file(default)即可</li>\n</ul>\n</blockquote>\n<h2 id=\"配置详解\"><a href=\"#配置详解\" class=\"headerlink\" title=\"配置详解\"></a>配置详解</h2><h3 id=\"强制选项-enforcing-options\"><a href=\"#强制选项-enforcing-options\" class=\"headerlink\" title=\"强制选项(enforcing options)\"></a>强制选项(enforcing options)</h3><p>设置为true时，应用规则，对代码约束更严格。</p>\n<table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>释义</th>\n<th>好处</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> bitwise</td>\n<td>禁止按位操作</td>\n<td>避免&amp;和&amp;&amp;手误</td>\n</tr>\n<tr>\n<td>camelcase</td>\n<td>变量名只允许驼峰camelCase和UPPER_CASE风格</td>\n<td></td>\n</tr>\n<tr>\n<td>curly</td>\n<td>单行代码块必须使用分号</td>\n<td>防止潜在bug</td>\n</tr>\n<tr>\n<td>eqeqeq</td>\n<td>禁止使用==,!=</td>\n<td>避免类型转换</td>\n</tr>\n<tr>\n<td>es3</td>\n<td>兼容IE 6/7/8/9</td>\n<td></td>\n</tr>\n<tr>\n<td>forin</td>\n<td>内部必须使用hasOwnProperty</td>\n<td>防止遍历原型链上的其它属性</td>\n</tr>\n<tr>\n<td>freeze</td>\n<td>禁止覆写原生对象</td>\n<td></td>\n</tr>\n<tr>\n<td>immend</td>\n<td>(function(){}())</td>\n<td></td>\n</tr>\n<tr>\n<td>indent</td>\n<td>2/4</td>\n<td></td>\n</tr>\n<tr>\n<td>latedef</td>\n<td>禁止未定义而使用</td>\n<td>防止潜在bug</td>\n</tr>\n<tr>\n<td>newcap</td>\n<td>类名首字母大写</td>\n<td></td>\n</tr>\n<tr>\n<td>noarg</td>\n<td>禁止使用arguments.caller和arguments.callee</td>\n<td>难以优化，且已经被废除</td>\n</tr>\n<tr>\n<td>noempty</td>\n<td>禁止出现空代码块</td>\n<td></td>\n</tr>\n<tr>\n<td>nonew</td>\n<td>禁止调用构造函数而不赋值</td>\n<td></td>\n</tr>\n<tr>\n<td>plusplus</td>\n<td>禁止使用++, –</td>\n<td>不同语言含义不一致</td>\n</tr>\n<tr>\n<td>quotmark</td>\n<td>true/single/double</td>\n<td></td>\n</tr>\n<tr>\n<td>undef</td>\n<td>禁止使用未定义的遍历</td>\n<td></td>\n</tr>\n<tr>\n<td>unused</td>\n<td>禁止出现未使用的变量</td>\n<td>设置为vars不检查函数参数</td>\n</tr>\n<tr>\n<td>strict</td>\n<td>所有的<strong>函数</strong>都会使用es5的严格模式</td>\n<td></td>\n</tr>\n<tr>\n<td>maxparams</td>\n<td>最多的形参</td>\n<td>5</td>\n</tr>\n<tr>\n<td>maxdepth</td>\n<td>嵌套深度</td>\n<td></td>\n</tr>\n<tr>\n<td>maxstatements</td>\n<td>最多声明</td>\n<td></td>\n</tr>\n<tr>\n<td>maxcomplexity</td>\n<td>cyclomatic complexity</td>\n<td></td>\n</tr>\n<tr>\n<td>maxlen</td>\n<td>设置一行最大的长度</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"宽松选项-relaxing-options\"><a href=\"#宽松选项-relaxing-options\" class=\"headerlink\" title=\"宽松选项(relaxing options)\"></a>宽松选项(relaxing options)</h3><p>设置为true时，应用规则，对代码约束更宽松。</p>\n<table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>解释</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>asi</td>\n<td>忽略句尾分号警告</td>\n<td>扩展阅读：<a href=\"http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding\" target=\"_blank\" rel=\"noopener\">1</a> , <a href=\"http://inimino.org/~inimino/blog/javascript_semicolons\" target=\"_blank\" rel=\"noopener\">2</a></td>\n</tr>\n<tr>\n<td>boss</td>\n<td>会允许在if，for，while里面编写赋值语句</td>\n<td>不检查判断条件中得赋值</td>\n</tr>\n<tr>\n<td>debug</td>\n<td>忽略debug语句</td>\n<td></td>\n</tr>\n<tr>\n<td>eqnull</td>\n<td>允许 == null</td>\n<td></td>\n</tr>\n<tr>\n<td>esnext</td>\n<td>允许ES6语法</td>\n<td><a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts\" target=\"_blank\" rel=\"noopener\">ES6草案</a></td>\n</tr>\n<tr>\n<td>evil</td>\n<td>忽略evil警告</td>\n<td></td>\n</tr>\n<tr>\n<td>expr</td>\n<td>在赋值或者函数调用的地方允许出现表达式</td>\n<td>大部分情况是手误</td>\n</tr>\n<tr>\n<td>funcscope</td>\n<td>允许在控制流程if等中定义变量</td>\n<td>默认为false</td>\n</tr>\n<tr>\n<td>globalstrict</td>\n<td>忽略全局使用strict的警告</td>\n<td></td>\n</tr>\n<tr>\n<td>iterator</td>\n<td>忽略使用<strong>iterator</strong>属性警告</td>\n<td>并非所有浏览器支持</td>\n</tr>\n<tr>\n<td>lastsemic</td>\n<td>仅允许单行代码块不使用分号</td>\n<td></td>\n</tr>\n<tr>\n<td>laxbreak</td>\n<td>忽略不安全的换行告警</td>\n<td></td>\n</tr>\n<tr>\n<td>laxcomma</td>\n<td>忽略逗号风格告警</td>\n<td></td>\n</tr>\n<tr>\n<td>loopfunc</td>\n<td>忽略在循环中定义函数告警</td>\n<td>建议设置为false</td>\n</tr>\n<tr>\n<td>maxerr</td>\n<td>设置JSHint最多警告数目</td>\n<td>默认50</td>\n</tr>\n<tr>\n<td>moz</td>\n<td>表明这是Mozilla扩展</td>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.7\" target=\"_blank\" rel=\"noopener\">New in JavaScript 1.7</a></td>\n</tr>\n<tr>\n<td>multistr</td>\n<td>忽略多行字符串告警</td>\n<td></td>\n</tr>\n<tr>\n<td>notypeof</td>\n<td>忽略不正确的typeof比较</td>\n<td>默认为false，不用管</td>\n</tr>\n<tr>\n<td>proto</td>\n<td>忽略使用<strong>proto</strong> 属性</td>\n<td></td>\n</tr>\n<tr>\n<td>scripturl</td>\n<td>忽略使用”javascript:…”告警</td>\n<td></td>\n</tr>\n<tr>\n<td>shadow</td>\n<td>忽略重复声明变量产生的告警</td>\n<td></td>\n</tr>\n<tr>\n<td>sub</td>\n<td>忽略使用[]而不是.访问属性的告警</td>\n<td></td>\n</tr>\n<tr>\n<td>supernew</td>\n<td>忽略使用诡异的构造函数告警</td>\n<td><a href=\"http://www.jshint.com/docs/options/#supernew\" target=\"_blank\" rel=\"noopener\">示例</a></td>\n</tr>\n<tr>\n<td>validthis</td>\n<td>忽略严格模式在非构造函数中使用this</td>\n<td>函数内部使用</td>\n</tr>\n<tr>\n<td>noyield</td>\n<td>允许没有使用yield的generator function</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"环境配置-Environments\"><a href=\"#环境配置-Environments\" class=\"headerlink\" title=\"环境配置(Environments)\"></a>环境配置(Environments)</h3><table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>browser</td>\n<td>可以使用HTML5的新特性如FileReader等</td>\n</tr>\n<tr>\n<td>couch</td>\n<td>CouchDB</td>\n</tr>\n<tr>\n<td>devel</td>\n<td>可以使用穷人版的debug工具，比如console、alert</td>\n</tr>\n<tr>\n<td>dojo</td>\n<td>Dojo Toolkit</td>\n</tr>\n<tr>\n<td>jquery</td>\n<td>jquery</td>\n</tr>\n<tr>\n<td>node</td>\n<td>Node.js</td>\n</tr>\n<tr>\n<td>nonstandard</td>\n<td>允许流行而不标准的全局变量，比如escape和unescape</td>\n</tr>\n<tr>\n<td>phantom</td>\n<td><a href=\"http://phantomjs.org/\" target=\"_blank\" rel=\"noopener\">PhantomJS</a></td>\n</tr>\n<tr>\n<td> protypejs</td>\n<td>protypejs</td>\n</tr>\n<tr>\n<td>rhino</td>\n<td><a href=\"http://www.mozilla.org/rhino/\" target=\"_blank\" rel=\"noopener\">Rhino</a></td>\n</tr>\n<tr>\n<td>worker</td>\n<td>表明你的脚本运行在<a href=\"https://developer.mozilla.org/en/Using_web_workers\" target=\"_blank\" rel=\"noopener\">Web Worker</a>中</td>\n</tr>\n<tr>\n<td>wsh</td>\n<td><a href=\"http://en.wikipedia.org/wiki/Windows_Script_Host\" target=\"_blank\" rel=\"noopener\">Windows_Script_Host</a></td>\n</tr>\n<tr>\n<td>yui</td>\n<td><a href=\"http://yuilibrary.com/\" target=\"_blank\" rel=\"noopener\">YUI</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"币须网的JSHint\"><a href=\"#币须网的JSHint\" class=\"headerlink\" title=\"币须网的JSHint\"></a>币须网的JSHint</h2><p><a href=\"http://www.coinxu.com\" target=\"_blank\" rel=\"noopener\">币须网</a>作为国内第一家应用<strong>比特币多重签名</strong>技术的电子商务平台，后台全部使用Node.js搭建，在团队协作上也需要JSHint这样的工具来进行检查和约束。我们正在使用如下的配置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"bitwise\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"camelcase\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"curly\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"eqeqeq\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"es3\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"forin\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"freeze\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"immed\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"indent\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"latedef\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"newcap\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"noarg\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"noempty\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"nonbsp\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"nonew\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"plusplus\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"quotmark\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"undef\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"unused\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"strict\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"maxparams\"</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"maxdepth\"</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"maxstatements\"</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"maxcomplexity\"</span>:<span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"asi\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"boss\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"debug\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"eqnull\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"esnext\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"evil\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"expr\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"funcscope\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"globalstrict\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"iterator\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"lastsemic\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"laxbreak\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"laxcomma\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"loopfunc\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"maxerr\"</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"multistr\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"notypeof\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"proto\"</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"shadow\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"supernew\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"validthis\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"noyield\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"node\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p><strong>强迫症</strong>每个人或多或少都有一点，沉溺于习惯求稳而不求变也是人之本性。但如果要突破自我，不求变通怕是成不了气候。再则善于运用标准化的工具也算得上一大进步，程序员尤其如此，如果偶然之间随手解救了团队和自己也算得上造福一方吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>编程追求效率，却也讲究习惯。习惯改变之难，还真不能说<code>那就不是个事儿</code>，在技术圈子尤甚。</p>\n<p>当然，JavaScript这个圈子也不例外，比如这些：</p>\n<ul>\n<li><a href=\"http://www.zhihu.com/question/20298345\" target=\"_blank\" rel=\"noopener\">JavaScript语句后面应该加分号吗？</a></li>\n<li><a href=\"http://www.nczonline.net/blog/2013/06/25/eval-isnt-evil-just-misunderstood/\" target=\"_blank\" rel=\"noopener\">eval is evil?</a></li>\n<li><a href=\"http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/\" target=\"_blank\" rel=\"noopener\">== or ===?</a></li>\n<li>…</li>\n</ul>\n<p>上面的话题，个个是G点，分分钟引发高潮。就犹如<code>Vim和Emacs</code>、<code>Windows和Linux</code>等话题，一旦开篇随之而来的就是引经据典、长篇大论、你死我活、百态尽出。</p>\n<p>作为有格调的程序员，我们应追求效率。而非沉浸于无谓的争论，无端的争论往往因为恪守习惯，不善变通。</p>\n<p>就上面的话题进行争论，或许还有些”技术主义情怀”。但是下面的这些纯感性的<strong>习惯</strong>呢？不妨先看看：</p>\n<ul>\n<li>缩进用tab还是用空格，你喜欢哪一种?</li>\n<li>tab等于两个还是四个空格，你喜欢哪一种？</li>\n<li>对象的键值是紧凑连接，还是在冒号后加一个空格，你喜欢哪一种？</li>\n<li>变量声明，单行还是多行，你又喜欢哪一种？</li>\n<li>单行代码块的花括号，加还是不加？</li>\n<li>…</li>\n</ul>\n<p>这种<strong>习惯</strong>多如牛毛，以至“知音”着实难寻，因为实在是众口难调、各有所爱。也难怪<strong>Web Storm</strong>等编辑器在Code Style上花尽心思。</p>\n<p>一味地拘泥于习惯，在团队协作时就会患上<strong>强迫症</strong>。比如在别人的代码后面加个分号、补个空格，多加个空白行等等诸如此类。如果赶上心情好、情绪佳，或许会再花上一两小时，与他人舌战一番，定要分个胜负。</p>\n<p>此种行为既“无伤大雅”，也非“罪恶滔天”，情不自禁而已。不然“看着心里难受”，这种难受之于程序员，比1px的像素差之于产品经理可来的猛烈多了。于是乎加分号、补空格、按换行、删注释、调整顺序，忙得不亦乐乎。待大功告成，仿佛看见了光，解救了天解救了地也解救了自己，心情倍儿爽。</p>\n<p>如果你还在做这种“解救众生”的活，不妨试试JSHint来换个活法儿吧。</p>\n<h2 id=\"什么是JSHint\"><a href=\"#什么是JSHint\" class=\"headerlink\" title=\"什么是JSHint\"></a>什么是JSHint</h2><p><a href=\"http://www.jshint.com/about/\" target=\"_blank\" rel=\"noopener\">JSHint</a>是一个用于检查JavaScript代码错误和潜在问题的工具。通过简单的配置，它可以强制约束团队保持一致的编码风格。</p>\n<h2 id=\"JSHint配置文件的格式\"><a href=\"#JSHint配置文件的格式\" class=\"headerlink\" title=\"JSHint配置文件的格式\"></a>JSHint配置文件的格式</h2><p>在项目根目录新加一个名称为<strong>.jshintrc</strong>的文件，加入相关配置即可，典型的配置如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"node\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"eqeqeq\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"forin\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"plusplus\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"undef\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"unused\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"strict\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>json文件中的每一项都对应着一条规则。如果代码违反了规则，编辑器会给出错误提示。这方面Web Storm非常不错。JSHint详细配置文档，请看<a href=\"http://www.jshint.com/docs/options/\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>每个文件夹可以有单独的.jshintrc，作用范围就是其下JavaScript代码。还可以使用<strong>.jshintignore</strong>来排除将规则应用到当前目录指定的文件和文件夹。</p>\n<h2 id=\"如何在Web-Storm中使用JSHint\"><a href=\"#如何在Web-Storm中使用JSHint\" class=\"headerlink\" title=\"如何在Web Storm中使用JSHint\"></a>如何在Web Storm中使用JSHint</h2><blockquote>\n<ul>\n<li><code>CMD + ,</code> 打开偏好设置，输入JSHint搜索习惯配置项</li>\n<li>选中Inspections&gt;JavaScript&gt;Code quality tools&gt;JSHint</li>\n<li>点击JavaScript&gt;Code quality tools&gt;JSHint，勾选enable和use config file(default)即可</li>\n</ul>\n</blockquote>\n<h2 id=\"配置详解\"><a href=\"#配置详解\" class=\"headerlink\" title=\"配置详解\"></a>配置详解</h2><h3 id=\"强制选项-enforcing-options\"><a href=\"#强制选项-enforcing-options\" class=\"headerlink\" title=\"强制选项(enforcing options)\"></a>强制选项(enforcing options)</h3><p>设置为true时，应用规则，对代码约束更严格。</p>\n<table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>释义</th>\n<th>好处</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> bitwise</td>\n<td>禁止按位操作</td>\n<td>避免&amp;和&amp;&amp;手误</td>\n</tr>\n<tr>\n<td>camelcase</td>\n<td>变量名只允许驼峰camelCase和UPPER_CASE风格</td>\n<td></td>\n</tr>\n<tr>\n<td>curly</td>\n<td>单行代码块必须使用分号</td>\n<td>防止潜在bug</td>\n</tr>\n<tr>\n<td>eqeqeq</td>\n<td>禁止使用==,!=</td>\n<td>避免类型转换</td>\n</tr>\n<tr>\n<td>es3</td>\n<td>兼容IE 6/7/8/9</td>\n<td></td>\n</tr>\n<tr>\n<td>forin</td>\n<td>内部必须使用hasOwnProperty</td>\n<td>防止遍历原型链上的其它属性</td>\n</tr>\n<tr>\n<td>freeze</td>\n<td>禁止覆写原生对象</td>\n<td></td>\n</tr>\n<tr>\n<td>immend</td>\n<td>(function(){}())</td>\n<td></td>\n</tr>\n<tr>\n<td>indent</td>\n<td>2/4</td>\n<td></td>\n</tr>\n<tr>\n<td>latedef</td>\n<td>禁止未定义而使用</td>\n<td>防止潜在bug</td>\n</tr>\n<tr>\n<td>newcap</td>\n<td>类名首字母大写</td>\n<td></td>\n</tr>\n<tr>\n<td>noarg</td>\n<td>禁止使用arguments.caller和arguments.callee</td>\n<td>难以优化，且已经被废除</td>\n</tr>\n<tr>\n<td>noempty</td>\n<td>禁止出现空代码块</td>\n<td></td>\n</tr>\n<tr>\n<td>nonew</td>\n<td>禁止调用构造函数而不赋值</td>\n<td></td>\n</tr>\n<tr>\n<td>plusplus</td>\n<td>禁止使用++, –</td>\n<td>不同语言含义不一致</td>\n</tr>\n<tr>\n<td>quotmark</td>\n<td>true/single/double</td>\n<td></td>\n</tr>\n<tr>\n<td>undef</td>\n<td>禁止使用未定义的遍历</td>\n<td></td>\n</tr>\n<tr>\n<td>unused</td>\n<td>禁止出现未使用的变量</td>\n<td>设置为vars不检查函数参数</td>\n</tr>\n<tr>\n<td>strict</td>\n<td>所有的<strong>函数</strong>都会使用es5的严格模式</td>\n<td></td>\n</tr>\n<tr>\n<td>maxparams</td>\n<td>最多的形参</td>\n<td>5</td>\n</tr>\n<tr>\n<td>maxdepth</td>\n<td>嵌套深度</td>\n<td></td>\n</tr>\n<tr>\n<td>maxstatements</td>\n<td>最多声明</td>\n<td></td>\n</tr>\n<tr>\n<td>maxcomplexity</td>\n<td>cyclomatic complexity</td>\n<td></td>\n</tr>\n<tr>\n<td>maxlen</td>\n<td>设置一行最大的长度</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"宽松选项-relaxing-options\"><a href=\"#宽松选项-relaxing-options\" class=\"headerlink\" title=\"宽松选项(relaxing options)\"></a>宽松选项(relaxing options)</h3><p>设置为true时，应用规则，对代码约束更宽松。</p>\n<table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>解释</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>asi</td>\n<td>忽略句尾分号警告</td>\n<td>扩展阅读：<a href=\"http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding\" target=\"_blank\" rel=\"noopener\">1</a> , <a href=\"http://inimino.org/~inimino/blog/javascript_semicolons\" target=\"_blank\" rel=\"noopener\">2</a></td>\n</tr>\n<tr>\n<td>boss</td>\n<td>会允许在if，for，while里面编写赋值语句</td>\n<td>不检查判断条件中得赋值</td>\n</tr>\n<tr>\n<td>debug</td>\n<td>忽略debug语句</td>\n<td></td>\n</tr>\n<tr>\n<td>eqnull</td>\n<td>允许 == null</td>\n<td></td>\n</tr>\n<tr>\n<td>esnext</td>\n<td>允许ES6语法</td>\n<td><a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts\" target=\"_blank\" rel=\"noopener\">ES6草案</a></td>\n</tr>\n<tr>\n<td>evil</td>\n<td>忽略evil警告</td>\n<td></td>\n</tr>\n<tr>\n<td>expr</td>\n<td>在赋值或者函数调用的地方允许出现表达式</td>\n<td>大部分情况是手误</td>\n</tr>\n<tr>\n<td>funcscope</td>\n<td>允许在控制流程if等中定义变量</td>\n<td>默认为false</td>\n</tr>\n<tr>\n<td>globalstrict</td>\n<td>忽略全局使用strict的警告</td>\n<td></td>\n</tr>\n<tr>\n<td>iterator</td>\n<td>忽略使用<strong>iterator</strong>属性警告</td>\n<td>并非所有浏览器支持</td>\n</tr>\n<tr>\n<td>lastsemic</td>\n<td>仅允许单行代码块不使用分号</td>\n<td></td>\n</tr>\n<tr>\n<td>laxbreak</td>\n<td>忽略不安全的换行告警</td>\n<td></td>\n</tr>\n<tr>\n<td>laxcomma</td>\n<td>忽略逗号风格告警</td>\n<td></td>\n</tr>\n<tr>\n<td>loopfunc</td>\n<td>忽略在循环中定义函数告警</td>\n<td>建议设置为false</td>\n</tr>\n<tr>\n<td>maxerr</td>\n<td>设置JSHint最多警告数目</td>\n<td>默认50</td>\n</tr>\n<tr>\n<td>moz</td>\n<td>表明这是Mozilla扩展</td>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.7\" target=\"_blank\" rel=\"noopener\">New in JavaScript 1.7</a></td>\n</tr>\n<tr>\n<td>multistr</td>\n<td>忽略多行字符串告警</td>\n<td></td>\n</tr>\n<tr>\n<td>notypeof</td>\n<td>忽略不正确的typeof比较</td>\n<td>默认为false，不用管</td>\n</tr>\n<tr>\n<td>proto</td>\n<td>忽略使用<strong>proto</strong> 属性</td>\n<td></td>\n</tr>\n<tr>\n<td>scripturl</td>\n<td>忽略使用”javascript:…”告警</td>\n<td></td>\n</tr>\n<tr>\n<td>shadow</td>\n<td>忽略重复声明变量产生的告警</td>\n<td></td>\n</tr>\n<tr>\n<td>sub</td>\n<td>忽略使用[]而不是.访问属性的告警</td>\n<td></td>\n</tr>\n<tr>\n<td>supernew</td>\n<td>忽略使用诡异的构造函数告警</td>\n<td><a href=\"http://www.jshint.com/docs/options/#supernew\" target=\"_blank\" rel=\"noopener\">示例</a></td>\n</tr>\n<tr>\n<td>validthis</td>\n<td>忽略严格模式在非构造函数中使用this</td>\n<td>函数内部使用</td>\n</tr>\n<tr>\n<td>noyield</td>\n<td>允许没有使用yield的generator function</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"环境配置-Environments\"><a href=\"#环境配置-Environments\" class=\"headerlink\" title=\"环境配置(Environments)\"></a>环境配置(Environments)</h3><table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>browser</td>\n<td>可以使用HTML5的新特性如FileReader等</td>\n</tr>\n<tr>\n<td>couch</td>\n<td>CouchDB</td>\n</tr>\n<tr>\n<td>devel</td>\n<td>可以使用穷人版的debug工具，比如console、alert</td>\n</tr>\n<tr>\n<td>dojo</td>\n<td>Dojo Toolkit</td>\n</tr>\n<tr>\n<td>jquery</td>\n<td>jquery</td>\n</tr>\n<tr>\n<td>node</td>\n<td>Node.js</td>\n</tr>\n<tr>\n<td>nonstandard</td>\n<td>允许流行而不标准的全局变量，比如escape和unescape</td>\n</tr>\n<tr>\n<td>phantom</td>\n<td><a href=\"http://phantomjs.org/\" target=\"_blank\" rel=\"noopener\">PhantomJS</a></td>\n</tr>\n<tr>\n<td> protypejs</td>\n<td>protypejs</td>\n</tr>\n<tr>\n<td>rhino</td>\n<td><a href=\"http://www.mozilla.org/rhino/\" target=\"_blank\" rel=\"noopener\">Rhino</a></td>\n</tr>\n<tr>\n<td>worker</td>\n<td>表明你的脚本运行在<a href=\"https://developer.mozilla.org/en/Using_web_workers\" target=\"_blank\" rel=\"noopener\">Web Worker</a>中</td>\n</tr>\n<tr>\n<td>wsh</td>\n<td><a href=\"http://en.wikipedia.org/wiki/Windows_Script_Host\" target=\"_blank\" rel=\"noopener\">Windows_Script_Host</a></td>\n</tr>\n<tr>\n<td>yui</td>\n<td><a href=\"http://yuilibrary.com/\" target=\"_blank\" rel=\"noopener\">YUI</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"币须网的JSHint\"><a href=\"#币须网的JSHint\" class=\"headerlink\" title=\"币须网的JSHint\"></a>币须网的JSHint</h2><p><a href=\"http://www.coinxu.com\" target=\"_blank\" rel=\"noopener\">币须网</a>作为国内第一家应用<strong>比特币多重签名</strong>技术的电子商务平台，后台全部使用Node.js搭建，在团队协作上也需要JSHint这样的工具来进行检查和约束。我们正在使用如下的配置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"bitwise\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"camelcase\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"curly\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"eqeqeq\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"es3\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"forin\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"freeze\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"immed\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"indent\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"latedef\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"newcap\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"noarg\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"noempty\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"nonbsp\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"nonew\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"plusplus\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"quotmark\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"undef\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"unused\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"strict\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"maxparams\"</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"maxdepth\"</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"maxstatements\"</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"maxcomplexity\"</span>:<span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"asi\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"boss\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"debug\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"eqnull\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"esnext\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"evil\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"expr\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"funcscope\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"globalstrict\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"iterator\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"lastsemic\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"laxbreak\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"laxcomma\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"loopfunc\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"maxerr\"</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"multistr\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"notypeof\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"proto\"</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"shadow\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"supernew\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"validthis\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"noyield\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"node\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p><strong>强迫症</strong>每个人或多或少都有一点，沉溺于习惯求稳而不求变也是人之本性。但如果要突破自我，不求变通怕是成不了气候。再则善于运用标准化的工具也算得上一大进步，程序员尤其如此，如果偶然之间随手解救了团队和自己也算得上造福一方吧。</p>\n"},{"title":"初识JavaScript Promises之一","date":"2014-06-27T16:00:00.000Z","_content":"\nJavaScript有很多槽点，嵌套回调怕是千夫所指。\n\n很久之前，我一直使用async来处理JavaScript异步编程中的嵌套回调问题。当然我也大概的了解过一些其它旨在解决这些问题的类库，诸如EventProxy、Jscex、StepJS、thenjs。\n\n当我第一次看到Promises规范的时候，我根本无法理解它所带来的好处。譬如每个初次学习Promises的人都见过如下的示例代码：\n```javascript\n//callbacks\nfunction callback(err, value){\n\tif(err){\n\t\t// do something\n\t\treturn;\n\t}\n\t//do other things with value\n}\n//Promises\npromise.then(function(value){\n\t//do something with value\n}, function(err){\n\t//do other things with error\n})\n```\n很难相信上面的代码会让人对Promises刮目相看。不过正如[bluebird](https://github.com/petkaantonov/bluebird)作者Petka所说，上面的代码是\n[“最不诚实的比较”](https://twitter.com/PetkaAntonov/status/475274392461910016)。所以我恳请你把类似的代码从你的记忆中擦出吧。\n\n不妨让我们再回到async的讨论上。async的问题在于它不能优雅地应对需求的变化，一旦业务逻辑有较大的变化，代码结构会进行大幅度的调整，而Promises却能够轻松的应对这种变化。待时机适宜我会进行详细的比较，首先让我们开始快速地了解Promises。\n\n------\n\n## Promises是什么\nPromises象征着一个异步操作的最终结果。Promises交互主要通过它的then方法，then方法接受一个回调函数，这个回调函数接受执行成功的返回值或执行失败的错误原因，错误原因一般是Error对象。**需要注意的是，then方法执行的返回值是一个Promise对象，而then方法接受的回调函数的返回值则可以是任意的JavaScript对象，包括Promises。基于这种机制，Promise对象的链式调用就起作用了。**\n## Promises的状态\nPromise对象有三种状态：pending（初始状态）、fulfilled（成功执行）、rejected（执行出错）。pending状态的Promise对象可以转换到其它两种状态。\n\n------\n 上面的文本不够形象，不妨上些代码来加深对Promises的认识。\n\n注：由于主流的JavaScript环境（包括NodeJS）对Promises/A+标准的实现差强人意，我的示例均使用了第三方类库[bluebird](https://github.com/petkaantonov/bluebird)。\n\n```javascript\nvar fs = require('fs')\nvar Promise = require('bluebird')\n//改造fs.readFile为Promise版本\nvar readFileAsync = function(path){\n\t//返回一个Promise对象，初始状态pending\n\treturn new Promise(function(fulfill, reject){\n\t\tfs.readFile(path,  'utf8', function(err, content){\n\t\t\t//由pending状态进入rejected状态\n\t\t\tif(err)return reject(err)\n\t\t\t//由pending状态进入fulfilled状态\n\t\t\treturn fulfill(content)\n\t\t})\n\t})\n}\n\n//开始使用，调用其then方法，回调接受执行成功的返回值\nreadFileAsync('./promise-1.js').then(function(content){\n\tconsole.log(content)\n})\n```\n看了上面的代码以后，是不是觉得Promises其实并不复杂呢。\n\nOK，我们继续延续上面的代码，来简单比较一下传统回调和Promises的使用上的差别：\n```javascript\n/*\n* 简单比较一下传统方式和Promises方式\n* 需求：读取两个文件并打印内容\n* */\n\n //callbacks\nfs.readFile('./promise-1.js', 'utf8', function(err, content1){\n\t//嵌套一次\n\tconsole.log('#', content1)\n\tfs.readFile('./promise-1.js', 'utf8', function(err, content2){\n \t\t//第二次嵌套\n\t\tconsole.log('##', content2)\n\t})\n})\n\n//Promises\nreadFileAsync('./promise-1.js').then(function(content1){\n\tconsole.log('#', content1)\n\t//这里返回一个Promise对象\n\treturn readFileAsync('./promiscuitye-1.js')\n}).then(function(content2){\n\tconsole.log('##', content2)\n})\n```\n上面的代码都没有错误处理，这是一个后果很严重的坏习惯。不过今天我们的重点不在这里，而是分析上下两段代码的主要区别。\n\n第一段代码是传统的嵌套回调，在第二次打印的时候已经使用了两次缩进，而Promises链式调用then方法成功地避免了一次缩进（嵌套），维持了代码结构的相对平坦。上面的代码略显简陋，如果再加上错误处理，Promises毫无疑问将会大放光彩，有兴趣请关注后续章节。\n\n本章写到这里就结束了，相信大家已经对Promises的有了一个初步认识。规范文档往往很难理解，我没有过多的描述规范，因为我相信代码最能够解释一切。不过对规范文档有兴趣的可以自行阅读参考链接。\n\n最后我想强调的一点就是：**Promises这种维持代码结构平坦的魔力在业务逻辑复杂多变的情况下是非常有用的**。\n\n## 参考链接\n> * [Promises/A+ 标准](https://github.com/promises-aplus/promises-spec)\n> * [Bluebird](https://github.com/petkaantonov/bluebird)\n\n------\n\n未完待续(2014-06-28 00:59)\n","source":"_posts/初识JavaScript Promises之一.md","raw":"---\ntitle: 初识JavaScript Promises之一\ndate: 2014-06-28\ntags: JavaScript\n---\n\nJavaScript有很多槽点，嵌套回调怕是千夫所指。\n\n很久之前，我一直使用async来处理JavaScript异步编程中的嵌套回调问题。当然我也大概的了解过一些其它旨在解决这些问题的类库，诸如EventProxy、Jscex、StepJS、thenjs。\n\n当我第一次看到Promises规范的时候，我根本无法理解它所带来的好处。譬如每个初次学习Promises的人都见过如下的示例代码：\n```javascript\n//callbacks\nfunction callback(err, value){\n\tif(err){\n\t\t// do something\n\t\treturn;\n\t}\n\t//do other things with value\n}\n//Promises\npromise.then(function(value){\n\t//do something with value\n}, function(err){\n\t//do other things with error\n})\n```\n很难相信上面的代码会让人对Promises刮目相看。不过正如[bluebird](https://github.com/petkaantonov/bluebird)作者Petka所说，上面的代码是\n[“最不诚实的比较”](https://twitter.com/PetkaAntonov/status/475274392461910016)。所以我恳请你把类似的代码从你的记忆中擦出吧。\n\n不妨让我们再回到async的讨论上。async的问题在于它不能优雅地应对需求的变化，一旦业务逻辑有较大的变化，代码结构会进行大幅度的调整，而Promises却能够轻松的应对这种变化。待时机适宜我会进行详细的比较，首先让我们开始快速地了解Promises。\n\n------\n\n## Promises是什么\nPromises象征着一个异步操作的最终结果。Promises交互主要通过它的then方法，then方法接受一个回调函数，这个回调函数接受执行成功的返回值或执行失败的错误原因，错误原因一般是Error对象。**需要注意的是，then方法执行的返回值是一个Promise对象，而then方法接受的回调函数的返回值则可以是任意的JavaScript对象，包括Promises。基于这种机制，Promise对象的链式调用就起作用了。**\n## Promises的状态\nPromise对象有三种状态：pending（初始状态）、fulfilled（成功执行）、rejected（执行出错）。pending状态的Promise对象可以转换到其它两种状态。\n\n------\n 上面的文本不够形象，不妨上些代码来加深对Promises的认识。\n\n注：由于主流的JavaScript环境（包括NodeJS）对Promises/A+标准的实现差强人意，我的示例均使用了第三方类库[bluebird](https://github.com/petkaantonov/bluebird)。\n\n```javascript\nvar fs = require('fs')\nvar Promise = require('bluebird')\n//改造fs.readFile为Promise版本\nvar readFileAsync = function(path){\n\t//返回一个Promise对象，初始状态pending\n\treturn new Promise(function(fulfill, reject){\n\t\tfs.readFile(path,  'utf8', function(err, content){\n\t\t\t//由pending状态进入rejected状态\n\t\t\tif(err)return reject(err)\n\t\t\t//由pending状态进入fulfilled状态\n\t\t\treturn fulfill(content)\n\t\t})\n\t})\n}\n\n//开始使用，调用其then方法，回调接受执行成功的返回值\nreadFileAsync('./promise-1.js').then(function(content){\n\tconsole.log(content)\n})\n```\n看了上面的代码以后，是不是觉得Promises其实并不复杂呢。\n\nOK，我们继续延续上面的代码，来简单比较一下传统回调和Promises的使用上的差别：\n```javascript\n/*\n* 简单比较一下传统方式和Promises方式\n* 需求：读取两个文件并打印内容\n* */\n\n //callbacks\nfs.readFile('./promise-1.js', 'utf8', function(err, content1){\n\t//嵌套一次\n\tconsole.log('#', content1)\n\tfs.readFile('./promise-1.js', 'utf8', function(err, content2){\n \t\t//第二次嵌套\n\t\tconsole.log('##', content2)\n\t})\n})\n\n//Promises\nreadFileAsync('./promise-1.js').then(function(content1){\n\tconsole.log('#', content1)\n\t//这里返回一个Promise对象\n\treturn readFileAsync('./promiscuitye-1.js')\n}).then(function(content2){\n\tconsole.log('##', content2)\n})\n```\n上面的代码都没有错误处理，这是一个后果很严重的坏习惯。不过今天我们的重点不在这里，而是分析上下两段代码的主要区别。\n\n第一段代码是传统的嵌套回调，在第二次打印的时候已经使用了两次缩进，而Promises链式调用then方法成功地避免了一次缩进（嵌套），维持了代码结构的相对平坦。上面的代码略显简陋，如果再加上错误处理，Promises毫无疑问将会大放光彩，有兴趣请关注后续章节。\n\n本章写到这里就结束了，相信大家已经对Promises的有了一个初步认识。规范文档往往很难理解，我没有过多的描述规范，因为我相信代码最能够解释一切。不过对规范文档有兴趣的可以自行阅读参考链接。\n\n最后我想强调的一点就是：**Promises这种维持代码结构平坦的魔力在业务逻辑复杂多变的情况下是非常有用的**。\n\n## 参考链接\n> * [Promises/A+ 标准](https://github.com/promises-aplus/promises-spec)\n> * [Bluebird](https://github.com/petkaantonov/bluebird)\n\n------\n\n未完待续(2014-06-28 00:59)\n","slug":"初识JavaScript Promises之一","published":1,"updated":"2017-12-22T07:18:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbhnla1g00002e95pjz9g91d","content":"<p>JavaScript有很多槽点，嵌套回调怕是千夫所指。</p>\n<p>很久之前，我一直使用async来处理JavaScript异步编程中的嵌套回调问题。当然我也大概的了解过一些其它旨在解决这些问题的类库，诸如EventProxy、Jscex、StepJS、thenjs。</p>\n<p>当我第一次看到Promises规范的时候，我根本无法理解它所带来的好处。譬如每个初次学习Promises的人都见过如下的示例代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//callbacks</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">err, value</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// do something</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//do other things with value</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Promises</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//do something with value</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//do other things with error</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>很难相信上面的代码会让人对Promises刮目相看。不过正如<a href=\"https://github.com/petkaantonov/bluebird\" target=\"_blank\" rel=\"noopener\">bluebird</a>作者Petka所说，上面的代码是<br><a href=\"https://twitter.com/PetkaAntonov/status/475274392461910016\" target=\"_blank\" rel=\"noopener\">“最不诚实的比较”</a>。所以我恳请你把类似的代码从你的记忆中擦出吧。</p>\n<p>不妨让我们再回到async的讨论上。async的问题在于它不能优雅地应对需求的变化，一旦业务逻辑有较大的变化，代码结构会进行大幅度的调整，而Promises却能够轻松的应对这种变化。待时机适宜我会进行详细的比较，首先让我们开始快速地了解Promises。</p>\n<hr>\n<h2 id=\"Promises是什么\"><a href=\"#Promises是什么\" class=\"headerlink\" title=\"Promises是什么\"></a>Promises是什么</h2><p>Promises象征着一个异步操作的最终结果。Promises交互主要通过它的then方法，then方法接受一个回调函数，这个回调函数接受执行成功的返回值或执行失败的错误原因，错误原因一般是Error对象。<strong>需要注意的是，then方法执行的返回值是一个Promise对象，而then方法接受的回调函数的返回值则可以是任意的JavaScript对象，包括Promises。基于这种机制，Promise对象的链式调用就起作用了。</strong></p>\n<h2 id=\"Promises的状态\"><a href=\"#Promises的状态\" class=\"headerlink\" title=\"Promises的状态\"></a>Promises的状态</h2><p>Promise对象有三种状态：pending（初始状态）、fulfilled（成功执行）、rejected（执行出错）。pending状态的Promise对象可以转换到其它两种状态。</p>\n<hr>\n<p> 上面的文本不够形象，不妨上些代码来加深对Promises的认识。</p>\n<p>注：由于主流的JavaScript环境（包括NodeJS）对Promises/A+标准的实现差强人意，我的示例均使用了第三方类库<a href=\"https://github.com/petkaantonov/bluebird\" target=\"_blank\" rel=\"noopener\">bluebird</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'bluebird'</span>)</span><br><span class=\"line\"><span class=\"comment\">//改造fs.readFile为Promise版本</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> readFileAsync = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">path</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//返回一个Promise对象，初始状态pending</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fulfill, reject</span>)</span>&#123;</span><br><span class=\"line\">\t\tfs.readFile(path,  <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, content</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//由pending状态进入rejected状态</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(err)<span class=\"keyword\">return</span> reject(err)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//由pending状态进入fulfilled状态</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> fulfill(content)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开始使用，调用其then方法，回调接受执行成功的返回值</span></span><br><span class=\"line\">readFileAsync(<span class=\"string\">'./promise-1.js'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">content</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(content)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>看了上面的代码以后，是不是觉得Promises其实并不复杂呢。</p>\n<p>OK，我们继续延续上面的代码，来简单比较一下传统回调和Promises的使用上的差别：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 简单比较一下传统方式和Promises方式</span></span><br><span class=\"line\"><span class=\"comment\">* 需求：读取两个文件并打印内容</span></span><br><span class=\"line\"><span class=\"comment\">* */</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//callbacks</span></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./promise-1.js'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, content1</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//嵌套一次</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'#'</span>, content1)</span><br><span class=\"line\">\tfs.readFile(<span class=\"string\">'./promise-1.js'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, content2</span>)</span>&#123;</span><br><span class=\"line\"> \t\t<span class=\"comment\">//第二次嵌套</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'##'</span>, content2)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Promises</span></span><br><span class=\"line\">readFileAsync(<span class=\"string\">'./promise-1.js'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">content1</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'#'</span>, content1)</span><br><span class=\"line\">\t<span class=\"comment\">//这里返回一个Promise对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> readFileAsync(<span class=\"string\">'./promiscuitye-1.js'</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">content2</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'##'</span>, content2)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码都没有错误处理，这是一个后果很严重的坏习惯。不过今天我们的重点不在这里，而是分析上下两段代码的主要区别。</p>\n<p>第一段代码是传统的嵌套回调，在第二次打印的时候已经使用了两次缩进，而Promises链式调用then方法成功地避免了一次缩进（嵌套），维持了代码结构的相对平坦。上面的代码略显简陋，如果再加上错误处理，Promises毫无疑问将会大放光彩，有兴趣请关注后续章节。</p>\n<p>本章写到这里就结束了，相信大家已经对Promises的有了一个初步认识。规范文档往往很难理解，我没有过多的描述规范，因为我相信代码最能够解释一切。不过对规范文档有兴趣的可以自行阅读参考链接。</p>\n<p>最后我想强调的一点就是：<strong>Promises这种维持代码结构平坦的魔力在业务逻辑复杂多变的情况下是非常有用的</strong>。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<ul>\n<li><a href=\"https://github.com/promises-aplus/promises-spec\" target=\"_blank\" rel=\"noopener\">Promises/A+ 标准</a></li>\n<li><a href=\"https://github.com/petkaantonov/bluebird\" target=\"_blank\" rel=\"noopener\">Bluebird</a></li>\n</ul>\n</blockquote>\n<hr>\n<p>未完待续(2014-06-28 00:59)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>JavaScript有很多槽点，嵌套回调怕是千夫所指。</p>\n<p>很久之前，我一直使用async来处理JavaScript异步编程中的嵌套回调问题。当然我也大概的了解过一些其它旨在解决这些问题的类库，诸如EventProxy、Jscex、StepJS、thenjs。</p>\n<p>当我第一次看到Promises规范的时候，我根本无法理解它所带来的好处。譬如每个初次学习Promises的人都见过如下的示例代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//callbacks</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">err, value</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// do something</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//do other things with value</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Promises</span></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//do something with value</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//do other things with error</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>很难相信上面的代码会让人对Promises刮目相看。不过正如<a href=\"https://github.com/petkaantonov/bluebird\" target=\"_blank\" rel=\"noopener\">bluebird</a>作者Petka所说，上面的代码是<br><a href=\"https://twitter.com/PetkaAntonov/status/475274392461910016\" target=\"_blank\" rel=\"noopener\">“最不诚实的比较”</a>。所以我恳请你把类似的代码从你的记忆中擦出吧。</p>\n<p>不妨让我们再回到async的讨论上。async的问题在于它不能优雅地应对需求的变化，一旦业务逻辑有较大的变化，代码结构会进行大幅度的调整，而Promises却能够轻松的应对这种变化。待时机适宜我会进行详细的比较，首先让我们开始快速地了解Promises。</p>\n<hr>\n<h2 id=\"Promises是什么\"><a href=\"#Promises是什么\" class=\"headerlink\" title=\"Promises是什么\"></a>Promises是什么</h2><p>Promises象征着一个异步操作的最终结果。Promises交互主要通过它的then方法，then方法接受一个回调函数，这个回调函数接受执行成功的返回值或执行失败的错误原因，错误原因一般是Error对象。<strong>需要注意的是，then方法执行的返回值是一个Promise对象，而then方法接受的回调函数的返回值则可以是任意的JavaScript对象，包括Promises。基于这种机制，Promise对象的链式调用就起作用了。</strong></p>\n<h2 id=\"Promises的状态\"><a href=\"#Promises的状态\" class=\"headerlink\" title=\"Promises的状态\"></a>Promises的状态</h2><p>Promise对象有三种状态：pending（初始状态）、fulfilled（成功执行）、rejected（执行出错）。pending状态的Promise对象可以转换到其它两种状态。</p>\n<hr>\n<p> 上面的文本不够形象，不妨上些代码来加深对Promises的认识。</p>\n<p>注：由于主流的JavaScript环境（包括NodeJS）对Promises/A+标准的实现差强人意，我的示例均使用了第三方类库<a href=\"https://github.com/petkaantonov/bluebird\" target=\"_blank\" rel=\"noopener\">bluebird</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'bluebird'</span>)</span><br><span class=\"line\"><span class=\"comment\">//改造fs.readFile为Promise版本</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> readFileAsync = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">path</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//返回一个Promise对象，初始状态pending</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fulfill, reject</span>)</span>&#123;</span><br><span class=\"line\">\t\tfs.readFile(path,  <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, content</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//由pending状态进入rejected状态</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(err)<span class=\"keyword\">return</span> reject(err)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//由pending状态进入fulfilled状态</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> fulfill(content)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开始使用，调用其then方法，回调接受执行成功的返回值</span></span><br><span class=\"line\">readFileAsync(<span class=\"string\">'./promise-1.js'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">content</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(content)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>看了上面的代码以后，是不是觉得Promises其实并不复杂呢。</p>\n<p>OK，我们继续延续上面的代码，来简单比较一下传统回调和Promises的使用上的差别：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 简单比较一下传统方式和Promises方式</span></span><br><span class=\"line\"><span class=\"comment\">* 需求：读取两个文件并打印内容</span></span><br><span class=\"line\"><span class=\"comment\">* */</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//callbacks</span></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./promise-1.js'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, content1</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//嵌套一次</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'#'</span>, content1)</span><br><span class=\"line\">\tfs.readFile(<span class=\"string\">'./promise-1.js'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, content2</span>)</span>&#123;</span><br><span class=\"line\"> \t\t<span class=\"comment\">//第二次嵌套</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'##'</span>, content2)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Promises</span></span><br><span class=\"line\">readFileAsync(<span class=\"string\">'./promise-1.js'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">content1</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'#'</span>, content1)</span><br><span class=\"line\">\t<span class=\"comment\">//这里返回一个Promise对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> readFileAsync(<span class=\"string\">'./promiscuitye-1.js'</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">content2</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'##'</span>, content2)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码都没有错误处理，这是一个后果很严重的坏习惯。不过今天我们的重点不在这里，而是分析上下两段代码的主要区别。</p>\n<p>第一段代码是传统的嵌套回调，在第二次打印的时候已经使用了两次缩进，而Promises链式调用then方法成功地避免了一次缩进（嵌套），维持了代码结构的相对平坦。上面的代码略显简陋，如果再加上错误处理，Promises毫无疑问将会大放光彩，有兴趣请关注后续章节。</p>\n<p>本章写到这里就结束了，相信大家已经对Promises的有了一个初步认识。规范文档往往很难理解，我没有过多的描述规范，因为我相信代码最能够解释一切。不过对规范文档有兴趣的可以自行阅读参考链接。</p>\n<p>最后我想强调的一点就是：<strong>Promises这种维持代码结构平坦的魔力在业务逻辑复杂多变的情况下是非常有用的</strong>。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<ul>\n<li><a href=\"https://github.com/promises-aplus/promises-spec\" target=\"_blank\" rel=\"noopener\">Promises/A+ 标准</a></li>\n<li><a href=\"https://github.com/petkaantonov/bluebird\" target=\"_blank\" rel=\"noopener\">Bluebird</a></li>\n</ul>\n</blockquote>\n<hr>\n<p>未完待续(2014-06-28 00:59)</p>\n"},{"title":"初识JavaScript Promises之二","date":"2014-07-14T16:00:00.000Z","_content":"\n上一篇我们初步学习了JavaScript Promises，本篇将介绍Promise如何优雅地进行错误处理以及提升操作**node.js风格**[^1]的异步方法的逼格，没错就是使用**promisify**[^2]。\n\n## 异步编程中的错误处理\n\n 人性的、理想的也正如很多编程语言中已经实现的错误处理方式应该是这样：\n\n```javascript\ntry {\n    var val = JSON.parse(fs.readFileSync(\"file.json\"));\n}catch(SyntaxError e) {//json语法错误\n    console.error(\"不符合json格式\");\n}catch(Error e) {//其它类型错误\n    console.error(\"无法读取文件\")\n}\n\n```\n\n很遗憾，JavaScript并不支持上述方式，于是“聪明的猴子”很可能写出下面的代码：\n\n```javascript\ntry {\n    //code\n}catch(e) {\n    if( e instanceof SyntaxError) {\n        //handle\n    }else {\n      \t//handle  \n    }\n}\n\n```\n\n相信没人会喜欢第二段代码，不过传统的JavaScript也只能帮你到这里了。\n\n上面的代码是同步模式，异步模式中的错误处理又是如何呢？\n\n```javascript\nfs.readFile('file.json', 'utf8', function(err, data){\n\tif(err){\n\t\tconsole.error(\"无法读取文件\")\n\t}else{\n\t\ttry{\n\t\t\tvar json = JSON.parese(data)\n\t\t}catch(e){\n\t\t\tconsole.error(\"不符合json格式\");\n\t\t}\n\t}\n})\n\n```\n\n友情提醒：在node.js中你应该尽量避免使用同步方法。\n\n仔细比较第一段和第三段的代码的差异会发现，如此简单的代码竟然用了三次缩进！如果再加入其它异步操作，邂逅`callback hell`是必然的了。\n\n------\n## 使用Promise进行错误处理\n\n假设fs.readFileAsync是fs.readFile的Promise版本，这意味着什么呢，不妨回忆一下：\n\n> * fs.readFileAsync方法的返回结果是一个Promise对象\n> * fs.readFileAsync方法的返回结果拥有一个then方法\n> * fs.readFileAsync方法接受参数与fs.readFile一致，除了最后一个回调函数\n\n返回Promise对象意味着，执行fs.readFileAsync并不会立即执行异步操作，而是通过调用其then方法来执行，then方法接受的回调函数用于处理正确返回结果。所以使用fs.readFileAsync的使用方式如下：\n\n```javascript\n//Promise版本\nfs.readFileAsync('file.json', 'utf8').then(function(data){\n\tconsole.log(data)\n})\n\n```\n\nOK，让我们继续错误处理这个话题。由于[Promises/A+](http://promisesaplus.com/)标准对Promise对象只规定了唯一的then方法，没有专门针对catch或者error的方法，我们将继续使用[bluebird](https://github.com/petkaantonov/bluebird)。\n\n```javascript\n// 带错误处理的Promise版本\nfs.readFileAsync('file.json', 'utf8').then(function(data){\n\tconsole.log(data)\n}).catch(SyntaxError, function(e){\n\t//code here\n}).catch(function(e){\n\t//code here\n})\n\n```\n上面的代码没有嵌套回调，和本文开始的第一段代码的编写模式也基本一致。\n\n## 神奇的Promisify\n\n注：\n\n下面我们看如何对fs.readFileAsync方法进行promisify，依然是使用bluebird。\n\n```javascript\nvar Promise = require('bluebird')\nfs.readFileAsync = Promise.promisify(fs.readFie, fs)\n\n```\n\n怎么样，就是如此简单！对于bluebird它还有一个更强大的方法，那就是promisify的高级版本 `promisifyAll`，比如：\n\n```javascript\nvar Promise = require('bluebird')\nPromise.promisifyAll(fs)\n\n```\n\n执行完上面的代码之后，fs对象下所有的异步方法都会对应的生成一个Promise版本方法，比如fs.readFile对应fs.readFileAsync，fs.mkdir对应fs.mkdirAsync，以此类推。\n\n另外要注意的就是，Promise版本的函数除了最后一个参数（回调函数），其它参数与原函数均一一对应，调用的时候别忘了传递原有的参数。\n\n对fs的`promisification`还不能令我满足，我需要更神奇的魔法：\n\n```javascript\n// redis\nvar Promise = require(\"bluebird\");\nPromise.promisifyAll(require(\"redis\"));\n\n// mongoose\nvar Promise = require(\"bluebird\");\nPromise.promisifyAll(require(\"mongoose\"));\n\n// mongodb\nvar Promise = require(\"bluebird\");\nPromise.promisifyAll(require(\"mongodb\"));\n\n// mysql\nvar Promise = require(\"bluebird\");\nPromise.promisifyAll(require(\"mysql/lib/Connection\").prototype);\nPromise.promisifyAll(require(\"mysql/lib/Pool\").prototype);\n\n// request\nvar Promise = require(\"bluebird\");\nPromise.promisifyAll(require(\"request\"));\n\n// mkdir\nvar Promise = require(\"bluebird\");\nPromise.promisifyAll(require(\"mkdirp\"));\n\n// winston\nvar Promise = require(\"bluebird\");\nPromise.promisifyAll(require(\"winston\"));\n\n// Nodemailer\nvar Promise = require(\"bluebird\");\nPromise.promisifyAll(require(\"nodemailer\"));\n\n// pg\nvar Promise = require(\"bluebird\");\nPromise.promisifyAll(require(\"pg\"));\n\n// ...\n\n```\n\n少年，这下你颤抖了吗？\n\n注：如果你正在使用mongoose，除了bluebird你可能还需要[**mongoomise**](https://github.com/simongfxu/mongoomise)，它的优点在于：\n\n> * 能够接受任意的Promise Library (Q/when.js/RSVP/bluebird/es6-promise等等)\n> * 支持对多个数据库实例进行promisify\n> * 能够对Model自定义静态私有方法进行promisify，而bluebird.promisifyAll不支持\n> * mongoomise + bluebird与仅使用bluebird性能相差无几，可能更好。\n\n我们[**币须网**](http://www.coinxu.com)已经在生产环境中使用mongoomise + bluebird，目前为止一切安好。\n\n注：\n\n* node.js风格函数指的是这样的一种异步函数，它接受的最后一个参数是异步操作完成之后的回调函数，这个回调函数的第一个参数接受执行错误的Error对象，第二个参数接受成功返回值）。\n\n* `promisify`大概的意思就是根据一个**node.js风格**的异步方法生成另一个等价的Promise风格的方法（这个方法返回值是一个Promise，其它形参与原方法相同除了没有最后一个回调函数），这个名词我最早是看到bluebird使用。\n\n(未完待续 2014-07-15 23:40)\n","source":"_posts/初识JavaScript Promises之二.md","raw":"---\ntitle: 初识JavaScript Promises之二\ndate: 2014-07-15\ntags: JavaScript\n---\n\n上一篇我们初步学习了JavaScript Promises，本篇将介绍Promise如何优雅地进行错误处理以及提升操作**node.js风格**[^1]的异步方法的逼格，没错就是使用**promisify**[^2]。\n\n## 异步编程中的错误处理\n\n 人性的、理想的也正如很多编程语言中已经实现的错误处理方式应该是这样：\n\n```javascript\ntry {\n    var val = JSON.parse(fs.readFileSync(\"file.json\"));\n}catch(SyntaxError e) {//json语法错误\n    console.error(\"不符合json格式\");\n}catch(Error e) {//其它类型错误\n    console.error(\"无法读取文件\")\n}\n\n```\n\n很遗憾，JavaScript并不支持上述方式，于是“聪明的猴子”很可能写出下面的代码：\n\n```javascript\ntry {\n    //code\n}catch(e) {\n    if( e instanceof SyntaxError) {\n        //handle\n    }else {\n      \t//handle  \n    }\n}\n\n```\n\n相信没人会喜欢第二段代码，不过传统的JavaScript也只能帮你到这里了。\n\n上面的代码是同步模式，异步模式中的错误处理又是如何呢？\n\n```javascript\nfs.readFile('file.json', 'utf8', function(err, data){\n\tif(err){\n\t\tconsole.error(\"无法读取文件\")\n\t}else{\n\t\ttry{\n\t\t\tvar json = JSON.parese(data)\n\t\t}catch(e){\n\t\t\tconsole.error(\"不符合json格式\");\n\t\t}\n\t}\n})\n\n```\n\n友情提醒：在node.js中你应该尽量避免使用同步方法。\n\n仔细比较第一段和第三段的代码的差异会发现，如此简单的代码竟然用了三次缩进！如果再加入其它异步操作，邂逅`callback hell`是必然的了。\n\n------\n## 使用Promise进行错误处理\n\n假设fs.readFileAsync是fs.readFile的Promise版本，这意味着什么呢，不妨回忆一下：\n\n> * fs.readFileAsync方法的返回结果是一个Promise对象\n> * fs.readFileAsync方法的返回结果拥有一个then方法\n> * fs.readFileAsync方法接受参数与fs.readFile一致，除了最后一个回调函数\n\n返回Promise对象意味着，执行fs.readFileAsync并不会立即执行异步操作，而是通过调用其then方法来执行，then方法接受的回调函数用于处理正确返回结果。所以使用fs.readFileAsync的使用方式如下：\n\n```javascript\n//Promise版本\nfs.readFileAsync('file.json', 'utf8').then(function(data){\n\tconsole.log(data)\n})\n\n```\n\nOK，让我们继续错误处理这个话题。由于[Promises/A+](http://promisesaplus.com/)标准对Promise对象只规定了唯一的then方法，没有专门针对catch或者error的方法，我们将继续使用[bluebird](https://github.com/petkaantonov/bluebird)。\n\n```javascript\n// 带错误处理的Promise版本\nfs.readFileAsync('file.json', 'utf8').then(function(data){\n\tconsole.log(data)\n}).catch(SyntaxError, function(e){\n\t//code here\n}).catch(function(e){\n\t//code here\n})\n\n```\n上面的代码没有嵌套回调，和本文开始的第一段代码的编写模式也基本一致。\n\n## 神奇的Promisify\n\n注：\n\n下面我们看如何对fs.readFileAsync方法进行promisify，依然是使用bluebird。\n\n```javascript\nvar Promise = require('bluebird')\nfs.readFileAsync = Promise.promisify(fs.readFie, fs)\n\n```\n\n怎么样，就是如此简单！对于bluebird它还有一个更强大的方法，那就是promisify的高级版本 `promisifyAll`，比如：\n\n```javascript\nvar Promise = require('bluebird')\nPromise.promisifyAll(fs)\n\n```\n\n执行完上面的代码之后，fs对象下所有的异步方法都会对应的生成一个Promise版本方法，比如fs.readFile对应fs.readFileAsync，fs.mkdir对应fs.mkdirAsync，以此类推。\n\n另外要注意的就是，Promise版本的函数除了最后一个参数（回调函数），其它参数与原函数均一一对应，调用的时候别忘了传递原有的参数。\n\n对fs的`promisification`还不能令我满足，我需要更神奇的魔法：\n\n```javascript\n// redis\nvar Promise = require(\"bluebird\");\nPromise.promisifyAll(require(\"redis\"));\n\n// mongoose\nvar Promise = require(\"bluebird\");\nPromise.promisifyAll(require(\"mongoose\"));\n\n// mongodb\nvar Promise = require(\"bluebird\");\nPromise.promisifyAll(require(\"mongodb\"));\n\n// mysql\nvar Promise = require(\"bluebird\");\nPromise.promisifyAll(require(\"mysql/lib/Connection\").prototype);\nPromise.promisifyAll(require(\"mysql/lib/Pool\").prototype);\n\n// request\nvar Promise = require(\"bluebird\");\nPromise.promisifyAll(require(\"request\"));\n\n// mkdir\nvar Promise = require(\"bluebird\");\nPromise.promisifyAll(require(\"mkdirp\"));\n\n// winston\nvar Promise = require(\"bluebird\");\nPromise.promisifyAll(require(\"winston\"));\n\n// Nodemailer\nvar Promise = require(\"bluebird\");\nPromise.promisifyAll(require(\"nodemailer\"));\n\n// pg\nvar Promise = require(\"bluebird\");\nPromise.promisifyAll(require(\"pg\"));\n\n// ...\n\n```\n\n少年，这下你颤抖了吗？\n\n注：如果你正在使用mongoose，除了bluebird你可能还需要[**mongoomise**](https://github.com/simongfxu/mongoomise)，它的优点在于：\n\n> * 能够接受任意的Promise Library (Q/when.js/RSVP/bluebird/es6-promise等等)\n> * 支持对多个数据库实例进行promisify\n> * 能够对Model自定义静态私有方法进行promisify，而bluebird.promisifyAll不支持\n> * mongoomise + bluebird与仅使用bluebird性能相差无几，可能更好。\n\n我们[**币须网**](http://www.coinxu.com)已经在生产环境中使用mongoomise + bluebird，目前为止一切安好。\n\n注：\n\n* node.js风格函数指的是这样的一种异步函数，它接受的最后一个参数是异步操作完成之后的回调函数，这个回调函数的第一个参数接受执行错误的Error对象，第二个参数接受成功返回值）。\n\n* `promisify`大概的意思就是根据一个**node.js风格**的异步方法生成另一个等价的Promise风格的方法（这个方法返回值是一个Promise，其它形参与原方法相同除了没有最后一个回调函数），这个名词我最早是看到bluebird使用。\n\n(未完待续 2014-07-15 23:40)\n","slug":"初识JavaScript Promises之二","published":1,"updated":"2017-12-22T07:19:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbhnla1p00012e95r5kosbm3","content":"<p>上一篇我们初步学习了JavaScript Promises，本篇将介绍Promise如何优雅地进行错误处理以及提升操作<strong>node.js风格</strong>[^1]的异步方法的逼格，没错就是使用<strong>promisify</strong>[^2]。</p>\n<h2 id=\"异步编程中的错误处理\"><a href=\"#异步编程中的错误处理\" class=\"headerlink\" title=\"异步编程中的错误处理\"></a>异步编程中的错误处理</h2><p> 人性的、理想的也正如很多编程语言中已经实现的错误处理方式应该是这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> val = <span class=\"built_in\">JSON</span>.parse(fs.readFileSync(<span class=\"string\">\"file.json\"</span>));</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(<span class=\"built_in\">SyntaxError</span> e) &#123;<span class=\"comment\">//json语法错误</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">\"不符合json格式\"</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(<span class=\"built_in\">Error</span> e) &#123;<span class=\"comment\">//其它类型错误</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">\"无法读取文件\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很遗憾，JavaScript并不支持上述方式，于是“聪明的猴子”很可能写出下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//code</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( e <span class=\"keyword\">instanceof</span> <span class=\"built_in\">SyntaxError</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//handle</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      \t<span class=\"comment\">//handle  </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相信没人会喜欢第二段代码，不过传统的JavaScript也只能帮你到这里了。</p>\n<p>上面的代码是同步模式，异步模式中的错误处理又是如何呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.readFile(<span class=\"string\">'file.json'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.error(<span class=\"string\">\"无法读取文件\"</span>)</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> json = <span class=\"built_in\">JSON</span>.parese(data)</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.error(<span class=\"string\">\"不符合json格式\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>友情提醒：在node.js中你应该尽量避免使用同步方法。</p>\n<p>仔细比较第一段和第三段的代码的差异会发现，如此简单的代码竟然用了三次缩进！如果再加入其它异步操作，邂逅<code>callback hell</code>是必然的了。</p>\n<hr>\n<h2 id=\"使用Promise进行错误处理\"><a href=\"#使用Promise进行错误处理\" class=\"headerlink\" title=\"使用Promise进行错误处理\"></a>使用Promise进行错误处理</h2><p>假设fs.readFileAsync是fs.readFile的Promise版本，这意味着什么呢，不妨回忆一下：</p>\n<blockquote>\n<ul>\n<li>fs.readFileAsync方法的返回结果是一个Promise对象</li>\n<li>fs.readFileAsync方法的返回结果拥有一个then方法</li>\n<li>fs.readFileAsync方法接受参数与fs.readFile一致，除了最后一个回调函数</li>\n</ul>\n</blockquote>\n<p>返回Promise对象意味着，执行fs.readFileAsync并不会立即执行异步操作，而是通过调用其then方法来执行，then方法接受的回调函数用于处理正确返回结果。所以使用fs.readFileAsync的使用方式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Promise版本</span></span><br><span class=\"line\">fs.readFileAsync(<span class=\"string\">'file.json'</span>, <span class=\"string\">'utf8'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>OK，让我们继续错误处理这个话题。由于<a href=\"http://promisesaplus.com/\" target=\"_blank\" rel=\"noopener\">Promises/A+</a>标准对Promise对象只规定了唯一的then方法，没有专门针对catch或者error的方法，我们将继续使用<a href=\"https://github.com/petkaantonov/bluebird\" target=\"_blank\" rel=\"noopener\">bluebird</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 带错误处理的Promise版本</span></span><br><span class=\"line\">fs.readFileAsync(<span class=\"string\">'file.json'</span>, <span class=\"string\">'utf8'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;).catch(<span class=\"built_in\">SyntaxError</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//code here</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//code here</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>上面的代码没有嵌套回调，和本文开始的第一段代码的编写模式也基本一致。</p>\n<h2 id=\"神奇的Promisify\"><a href=\"#神奇的Promisify\" class=\"headerlink\" title=\"神奇的Promisify\"></a>神奇的Promisify</h2><p>注：</p>\n<p>下面我们看如何对fs.readFileAsync方法进行promisify，依然是使用bluebird。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'bluebird'</span>)</span><br><span class=\"line\">fs.readFileAsync = <span class=\"built_in\">Promise</span>.promisify(fs.readFie, fs)</span><br></pre></td></tr></table></figure>\n<p>怎么样，就是如此简单！对于bluebird它还有一个更强大的方法，那就是promisify的高级版本 <code>promisifyAll</code>，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'bluebird'</span>)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.promisifyAll(fs)</span><br></pre></td></tr></table></figure>\n<p>执行完上面的代码之后，fs对象下所有的异步方法都会对应的生成一个Promise版本方法，比如fs.readFile对应fs.readFileAsync，fs.mkdir对应fs.mkdirAsync，以此类推。</p>\n<p>另外要注意的就是，Promise版本的函数除了最后一个参数（回调函数），其它参数与原函数均一一对应，调用的时候别忘了传递原有的参数。</p>\n<p>对fs的<code>promisification</code>还不能令我满足，我需要更神奇的魔法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// redis</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">\"bluebird\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.promisifyAll(<span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mongoose</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">\"bluebird\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.promisifyAll(<span class=\"built_in\">require</span>(<span class=\"string\">\"mongoose\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mongodb</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">\"bluebird\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.promisifyAll(<span class=\"built_in\">require</span>(<span class=\"string\">\"mongodb\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mysql</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">\"bluebird\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.promisifyAll(<span class=\"built_in\">require</span>(<span class=\"string\">\"mysql/lib/Connection\"</span>).prototype);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.promisifyAll(<span class=\"built_in\">require</span>(<span class=\"string\">\"mysql/lib/Pool\"</span>).prototype);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// request</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">\"bluebird\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.promisifyAll(<span class=\"built_in\">require</span>(<span class=\"string\">\"request\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mkdir</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">\"bluebird\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.promisifyAll(<span class=\"built_in\">require</span>(<span class=\"string\">\"mkdirp\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// winston</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">\"bluebird\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.promisifyAll(<span class=\"built_in\">require</span>(<span class=\"string\">\"winston\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Nodemailer</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">\"bluebird\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.promisifyAll(<span class=\"built_in\">require</span>(<span class=\"string\">\"nodemailer\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// pg</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">\"bluebird\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.promisifyAll(<span class=\"built_in\">require</span>(<span class=\"string\">\"pg\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>少年，这下你颤抖了吗？</p>\n<p>注：如果你正在使用mongoose，除了bluebird你可能还需要<a href=\"https://github.com/simongfxu/mongoomise\" target=\"_blank\" rel=\"noopener\"><strong>mongoomise</strong></a>，它的优点在于：</p>\n<blockquote>\n<ul>\n<li>能够接受任意的Promise Library (Q/when.js/RSVP/bluebird/es6-promise等等)</li>\n<li>支持对多个数据库实例进行promisify</li>\n<li>能够对Model自定义静态私有方法进行promisify，而bluebird.promisifyAll不支持</li>\n<li>mongoomise + bluebird与仅使用bluebird性能相差无几，可能更好。</li>\n</ul>\n</blockquote>\n<p>我们<a href=\"http://www.coinxu.com\" target=\"_blank\" rel=\"noopener\"><strong>币须网</strong></a>已经在生产环境中使用mongoomise + bluebird，目前为止一切安好。</p>\n<p>注：</p>\n<ul>\n<li><p>node.js风格函数指的是这样的一种异步函数，它接受的最后一个参数是异步操作完成之后的回调函数，这个回调函数的第一个参数接受执行错误的Error对象，第二个参数接受成功返回值）。</p>\n</li>\n<li><p><code>promisify</code>大概的意思就是根据一个<strong>node.js风格</strong>的异步方法生成另一个等价的Promise风格的方法（这个方法返回值是一个Promise，其它形参与原方法相同除了没有最后一个回调函数），这个名词我最早是看到bluebird使用。</p>\n</li>\n</ul>\n<p>(未完待续 2014-07-15 23:40)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上一篇我们初步学习了JavaScript Promises，本篇将介绍Promise如何优雅地进行错误处理以及提升操作<strong>node.js风格</strong>[^1]的异步方法的逼格，没错就是使用<strong>promisify</strong>[^2]。</p>\n<h2 id=\"异步编程中的错误处理\"><a href=\"#异步编程中的错误处理\" class=\"headerlink\" title=\"异步编程中的错误处理\"></a>异步编程中的错误处理</h2><p> 人性的、理想的也正如很多编程语言中已经实现的错误处理方式应该是这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> val = <span class=\"built_in\">JSON</span>.parse(fs.readFileSync(<span class=\"string\">\"file.json\"</span>));</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(<span class=\"built_in\">SyntaxError</span> e) &#123;<span class=\"comment\">//json语法错误</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">\"不符合json格式\"</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(<span class=\"built_in\">Error</span> e) &#123;<span class=\"comment\">//其它类型错误</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">\"无法读取文件\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很遗憾，JavaScript并不支持上述方式，于是“聪明的猴子”很可能写出下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//code</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( e <span class=\"keyword\">instanceof</span> <span class=\"built_in\">SyntaxError</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//handle</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      \t<span class=\"comment\">//handle  </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相信没人会喜欢第二段代码，不过传统的JavaScript也只能帮你到这里了。</p>\n<p>上面的代码是同步模式，异步模式中的错误处理又是如何呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.readFile(<span class=\"string\">'file.json'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.error(<span class=\"string\">\"无法读取文件\"</span>)</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> json = <span class=\"built_in\">JSON</span>.parese(data)</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.error(<span class=\"string\">\"不符合json格式\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>友情提醒：在node.js中你应该尽量避免使用同步方法。</p>\n<p>仔细比较第一段和第三段的代码的差异会发现，如此简单的代码竟然用了三次缩进！如果再加入其它异步操作，邂逅<code>callback hell</code>是必然的了。</p>\n<hr>\n<h2 id=\"使用Promise进行错误处理\"><a href=\"#使用Promise进行错误处理\" class=\"headerlink\" title=\"使用Promise进行错误处理\"></a>使用Promise进行错误处理</h2><p>假设fs.readFileAsync是fs.readFile的Promise版本，这意味着什么呢，不妨回忆一下：</p>\n<blockquote>\n<ul>\n<li>fs.readFileAsync方法的返回结果是一个Promise对象</li>\n<li>fs.readFileAsync方法的返回结果拥有一个then方法</li>\n<li>fs.readFileAsync方法接受参数与fs.readFile一致，除了最后一个回调函数</li>\n</ul>\n</blockquote>\n<p>返回Promise对象意味着，执行fs.readFileAsync并不会立即执行异步操作，而是通过调用其then方法来执行，then方法接受的回调函数用于处理正确返回结果。所以使用fs.readFileAsync的使用方式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Promise版本</span></span><br><span class=\"line\">fs.readFileAsync(<span class=\"string\">'file.json'</span>, <span class=\"string\">'utf8'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>OK，让我们继续错误处理这个话题。由于<a href=\"http://promisesaplus.com/\" target=\"_blank\" rel=\"noopener\">Promises/A+</a>标准对Promise对象只规定了唯一的then方法，没有专门针对catch或者error的方法，我们将继续使用<a href=\"https://github.com/petkaantonov/bluebird\" target=\"_blank\" rel=\"noopener\">bluebird</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 带错误处理的Promise版本</span></span><br><span class=\"line\">fs.readFileAsync(<span class=\"string\">'file.json'</span>, <span class=\"string\">'utf8'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;).catch(<span class=\"built_in\">SyntaxError</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//code here</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//code here</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>上面的代码没有嵌套回调，和本文开始的第一段代码的编写模式也基本一致。</p>\n<h2 id=\"神奇的Promisify\"><a href=\"#神奇的Promisify\" class=\"headerlink\" title=\"神奇的Promisify\"></a>神奇的Promisify</h2><p>注：</p>\n<p>下面我们看如何对fs.readFileAsync方法进行promisify，依然是使用bluebird。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'bluebird'</span>)</span><br><span class=\"line\">fs.readFileAsync = <span class=\"built_in\">Promise</span>.promisify(fs.readFie, fs)</span><br></pre></td></tr></table></figure>\n<p>怎么样，就是如此简单！对于bluebird它还有一个更强大的方法，那就是promisify的高级版本 <code>promisifyAll</code>，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'bluebird'</span>)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.promisifyAll(fs)</span><br></pre></td></tr></table></figure>\n<p>执行完上面的代码之后，fs对象下所有的异步方法都会对应的生成一个Promise版本方法，比如fs.readFile对应fs.readFileAsync，fs.mkdir对应fs.mkdirAsync，以此类推。</p>\n<p>另外要注意的就是，Promise版本的函数除了最后一个参数（回调函数），其它参数与原函数均一一对应，调用的时候别忘了传递原有的参数。</p>\n<p>对fs的<code>promisification</code>还不能令我满足，我需要更神奇的魔法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// redis</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">\"bluebird\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.promisifyAll(<span class=\"built_in\">require</span>(<span class=\"string\">\"redis\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mongoose</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">\"bluebird\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.promisifyAll(<span class=\"built_in\">require</span>(<span class=\"string\">\"mongoose\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mongodb</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">\"bluebird\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.promisifyAll(<span class=\"built_in\">require</span>(<span class=\"string\">\"mongodb\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mysql</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">\"bluebird\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.promisifyAll(<span class=\"built_in\">require</span>(<span class=\"string\">\"mysql/lib/Connection\"</span>).prototype);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.promisifyAll(<span class=\"built_in\">require</span>(<span class=\"string\">\"mysql/lib/Pool\"</span>).prototype);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// request</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">\"bluebird\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.promisifyAll(<span class=\"built_in\">require</span>(<span class=\"string\">\"request\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mkdir</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">\"bluebird\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.promisifyAll(<span class=\"built_in\">require</span>(<span class=\"string\">\"mkdirp\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// winston</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">\"bluebird\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.promisifyAll(<span class=\"built_in\">require</span>(<span class=\"string\">\"winston\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Nodemailer</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">\"bluebird\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.promisifyAll(<span class=\"built_in\">require</span>(<span class=\"string\">\"nodemailer\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// pg</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">\"bluebird\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.promisifyAll(<span class=\"built_in\">require</span>(<span class=\"string\">\"pg\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>少年，这下你颤抖了吗？</p>\n<p>注：如果你正在使用mongoose，除了bluebird你可能还需要<a href=\"https://github.com/simongfxu/mongoomise\" target=\"_blank\" rel=\"noopener\"><strong>mongoomise</strong></a>，它的优点在于：</p>\n<blockquote>\n<ul>\n<li>能够接受任意的Promise Library (Q/when.js/RSVP/bluebird/es6-promise等等)</li>\n<li>支持对多个数据库实例进行promisify</li>\n<li>能够对Model自定义静态私有方法进行promisify，而bluebird.promisifyAll不支持</li>\n<li>mongoomise + bluebird与仅使用bluebird性能相差无几，可能更好。</li>\n</ul>\n</blockquote>\n<p>我们<a href=\"http://www.coinxu.com\" target=\"_blank\" rel=\"noopener\"><strong>币须网</strong></a>已经在生产环境中使用mongoomise + bluebird，目前为止一切安好。</p>\n<p>注：</p>\n<ul>\n<li><p>node.js风格函数指的是这样的一种异步函数，它接受的最后一个参数是异步操作完成之后的回调函数，这个回调函数的第一个参数接受执行错误的Error对象，第二个参数接受成功返回值）。</p>\n</li>\n<li><p><code>promisify</code>大概的意思就是根据一个<strong>node.js风格</strong>的异步方法生成另一个等价的Promise风格的方法（这个方法返回值是一个Promise，其它形参与原方法相同除了没有最后一个回调函数），这个名词我最早是看到bluebird使用。</p>\n</li>\n</ul>\n<p>(未完待续 2014-07-15 23:40)</p>\n"},{"title":"关于容灾，前端能够做什么","date":"2012-03-27T16:00:00.000Z","_content":"\n## 应用场景\n\n存在轮询的AJAX或者JSONP跨域请求的Web应用。\n\n比如我们有两台服务器，分别是a.com和a-bk.com，默认的轮询请求使用a.com；\n\n当a.com由于某种原因无法访问，需要按照一种事先约定的机制，将后续请求指向到备用服务器。\n\n同时当主服务器正常时，立即切换到主服务器。\n\n## 现实项目\n\n在我们的应用中，JSONP轮询的频率是每十秒一次。由于移动机房经常性的故障，导致客户长时间不能正常访问。\n\n于是客户经常向我们报障，试想如果此时，前端能够将用户的后续访问切换到我们的电信服务器，那该多好啊！\n\n虽然响应会慢一些，但是至少整个系统处于可用状态。\n\n## 容灾机制\n\n经过和同事们的一番讨论最后确定我们的容灾机制：\n\n连续两次请求没有及时应答则认定当前服务器不可用，切换到备用服务器；\n\n同时发起一个定时器，每55秒检测主服务器是否可用（访问主服务器上的一张43b的图片），一旦可用，立刻切换到主服务器。\n\n## 实现逻辑\n\n确定好容灾机制以后，剩下的就是编码了。\n\n不过编码之前其实还有一个隐藏的重大问题，那就是我们如何确定这个请求是否超时？\n\n因为我们的跨域JSONP请求都是使用script tag，而且需要兼容IE 6,自然没有什么类似的ontimeout事件去检测。\n\n那我们就只有自己动手来处理了。\n\n对于单个请求超时的判断，我们可以在主函数启动时设置一个状态量为false，回调函数中修改这个值为true。\n\n由于需要尽量避免修改原函数逻辑，这里用到了 `AOP` 技术，详细参见[这里](http://xugaofan.github.com/javascript/2012/03/18/AOP-in-JavaScript/)\n\n### 方案一\n\n每一次发起JSONP请求后，开启一个setTimeout 8秒后去检测状态量是否被修改（变量由回调函数修改），依此判断响应成功与否。\n\n### 方案二\n\n建立一个对象，给每一次请求标记ID，将其使用的服务器地址和响应结果记录下来；\n\n在第N次请求发起之前，判断第N-2次和N-1次请求是否使用相同的服务器，如果是，当这两次请求都没有及时响应时切换到备用服务器。\n\n### 比较结果\n\n方案一对每次请求都在下一次轮询之前就决定它是成功还是失败。我在生产中设置的值是6.5秒，但发现许多客户经常在主服务器和备用服务器上来回切换。\n\n方案二的好处在于，首先没有发起额外的setTimeout来监测请求成功是否响应，其次对于每一次请求方案二的超时时间实际是一个动态的值。\n\n对比下就知道方案一对每个请求的超时容忍度都是相同的6.5秒，最大也只能是10秒，而方案二第N-2次的超时容忍时间是20秒，第N-1次是10秒。\n\n所以严格意义上来讲，方案二更宽容也更加合理。\n\n## 编码实现\n\n```javascript\n/**\n* @description 网络模块\n* @property {Number} DETECT_CYCLE 切换到备用服务器后，监测主域名的周期，单位为秒，周期长度最好不要设置为10的倍数，便于调试观察\n*/\n_.net = { DETECT_CYCLE:55 };\n/**\n* @description 为跨域请求函数注入容灾备份机制，需要将原函数的请求服务器地址改成_.net['funcname_current_server'];\n* 实现原理：使用对象存储每一次请求使用的服务器地址和请求结果，然后在每一次请求之前，判断前两次使用相同服务器的请求是否都不成功。\n* 如果都不成功表明连续两次请求失败则切换到备用服务器\n* @param {Object} entry 入口函数{context:执行环境,name:函数名称}\n* @param {Object} exit 回调函数{context:执行环境,name:函数名称}\n* @param {Object} settings 服务端配置{server:主域地址,backupServer:备选服务器地址，数组，长度为0则不启用容灾机制,serverImg:监测主域名可用的图片}\n* @param {Function} forward 动态判断是否在入口函数继续执行注入的容灾机制\n* @usage 参见/user/js/map.js\n* @dependacy {Function} _.inject\n*/\n_.net.backup = function(entry,exit,settings,forward){\n    var server = settings.server,currentServer = entry.name + '_current_server';\n    _.net[currentServer] = server;\n    //没有备用地址则不启动容灾备份机制\n    if(!settings.backupServer || !_.isArray(settings.backupServer) || !settings.backupServer.length) return;\n    var interval = entry.name + '_interval',//切换到备用以后发起定时器key_name\n        total = entry.name + '_total',//总的请求次数key_name\n        status = entry.name + '_status',//维护各次请求的地址和请求结果key_name\n        serverAvailable = entry.name + '_server_available';//表明当前主服务器是否可用的key_name\n    //主服务器可用时立即切换，并重置对应的变量\n    var resetServer = function(){\n        _.net[serverAvailable] = true;\n        _.net[currentServer] = server;\n        clearInterval(_.net[interval]);\n    };\n    //筛选服务器算法，如果当前使用主服务器则切换到备用，如果已经是备用，有多个备用时则切换到下一个备用，只有一个备用是切换到主服务器\n    var selectServer = function(){\n        if(_.net[currentServer] == server){\n            return settings.backupServer[0];\n        }else{\n            var len = settings.backupServer.length;\n            if(len ==1)\n                return server;\n            var index = _.indexOf(settings.backupServer,_.net[currentServer]);\n            return settings.backupServer[index+1] || settings.backupServer[0];\n        }\n    };\n    _.net[serverAvailable] = true;\n    _.net[interval] = null;\n    _.net[total] = 0;\n    _.net[status] = {};//格式：{1:['http://a.net/',true], 2:['http://a.net/']}\n    entry.start = function(){\n        if(typeof forward == 'function'){\n            if(!forward())return;\n        }\n        _.net[total] += 1;\n        var count = _.net[total];\n        //存储当此请求使用的服务器地址和响应结果\n        _.net[status][count-1] = [];\n        if(count > 2){\n            var prev = _.net[status][count-2], prevPrev = _.net[status][count-3];\n            //上两次请求使用同一个服务器且都失败了，则切换服务器\n            if(prev[0] == prevPrev[0] && !prev[1] && !prevPrev[1]){\n                var usingServer = _.net[currentServer] == server, old = _.net[currentServer];\n                if(usingServer){\n                    _.net[interval] = setInterval(function(){\n                        var img = new Image();\n                        img.onload = resetServer;\n                        img.src = settings.serverImg + (settings.serverImg.indexOf('?')>-1?'&':'?') + 't=' + new Date().getTime();\n                    }, _.net.DETECT_CYCLE*1000);\n                }\n                //如果只有一个备用服务器且备用不可用则立即切换到tbo\n                if(!usingServer && settings.backupServer.length==1){\n                    resetServer();\n                }else{\n                    _.net[currentServer] = selectServer(_.net[currentServer]);\n                    _.net[serverAvailable] = _.net[currentServer] == server;\n                }\n                if(settings.errorHandler){\n                    settings.errorHandler(old,_.net[currentServer]);\n                }\n            }else{\n                //如果备用服务器一直正常，那么需要一直检测主域名是否可用，如果可用立即切换到主域名\n                if(_.net[currentServer] != server){\n                    if(_.net[serverAvailable]){\n                        resetServer();\n                    }\n                }\n            }\n            //删除冗余信息，保证数组长度为2\n            delete _.net[status][count-3];\n        }\n        //记录当此请求使用的服务器地址\n        _.net[status][count-1][0] = _.net[currentServer];\n    };\n    exit.start = function(){\n        //标记本次请求成功，不成功的请求数组长度为1\n        _.net[status][_.net[total]-1][1] = true;\n    };\n    _.inject(entry);\n    _.inject(exit);\n};\n```\n","source":"_posts/关于容灾，前端能够做什么.md","raw":"---\ntitle: 关于容灾，前端能够做什么\ndate: 2012-03-28\ntags: JavaScript\n---\n\n## 应用场景\n\n存在轮询的AJAX或者JSONP跨域请求的Web应用。\n\n比如我们有两台服务器，分别是a.com和a-bk.com，默认的轮询请求使用a.com；\n\n当a.com由于某种原因无法访问，需要按照一种事先约定的机制，将后续请求指向到备用服务器。\n\n同时当主服务器正常时，立即切换到主服务器。\n\n## 现实项目\n\n在我们的应用中，JSONP轮询的频率是每十秒一次。由于移动机房经常性的故障，导致客户长时间不能正常访问。\n\n于是客户经常向我们报障，试想如果此时，前端能够将用户的后续访问切换到我们的电信服务器，那该多好啊！\n\n虽然响应会慢一些，但是至少整个系统处于可用状态。\n\n## 容灾机制\n\n经过和同事们的一番讨论最后确定我们的容灾机制：\n\n连续两次请求没有及时应答则认定当前服务器不可用，切换到备用服务器；\n\n同时发起一个定时器，每55秒检测主服务器是否可用（访问主服务器上的一张43b的图片），一旦可用，立刻切换到主服务器。\n\n## 实现逻辑\n\n确定好容灾机制以后，剩下的就是编码了。\n\n不过编码之前其实还有一个隐藏的重大问题，那就是我们如何确定这个请求是否超时？\n\n因为我们的跨域JSONP请求都是使用script tag，而且需要兼容IE 6,自然没有什么类似的ontimeout事件去检测。\n\n那我们就只有自己动手来处理了。\n\n对于单个请求超时的判断，我们可以在主函数启动时设置一个状态量为false，回调函数中修改这个值为true。\n\n由于需要尽量避免修改原函数逻辑，这里用到了 `AOP` 技术，详细参见[这里](http://xugaofan.github.com/javascript/2012/03/18/AOP-in-JavaScript/)\n\n### 方案一\n\n每一次发起JSONP请求后，开启一个setTimeout 8秒后去检测状态量是否被修改（变量由回调函数修改），依此判断响应成功与否。\n\n### 方案二\n\n建立一个对象，给每一次请求标记ID，将其使用的服务器地址和响应结果记录下来；\n\n在第N次请求发起之前，判断第N-2次和N-1次请求是否使用相同的服务器，如果是，当这两次请求都没有及时响应时切换到备用服务器。\n\n### 比较结果\n\n方案一对每次请求都在下一次轮询之前就决定它是成功还是失败。我在生产中设置的值是6.5秒，但发现许多客户经常在主服务器和备用服务器上来回切换。\n\n方案二的好处在于，首先没有发起额外的setTimeout来监测请求成功是否响应，其次对于每一次请求方案二的超时时间实际是一个动态的值。\n\n对比下就知道方案一对每个请求的超时容忍度都是相同的6.5秒，最大也只能是10秒，而方案二第N-2次的超时容忍时间是20秒，第N-1次是10秒。\n\n所以严格意义上来讲，方案二更宽容也更加合理。\n\n## 编码实现\n\n```javascript\n/**\n* @description 网络模块\n* @property {Number} DETECT_CYCLE 切换到备用服务器后，监测主域名的周期，单位为秒，周期长度最好不要设置为10的倍数，便于调试观察\n*/\n_.net = { DETECT_CYCLE:55 };\n/**\n* @description 为跨域请求函数注入容灾备份机制，需要将原函数的请求服务器地址改成_.net['funcname_current_server'];\n* 实现原理：使用对象存储每一次请求使用的服务器地址和请求结果，然后在每一次请求之前，判断前两次使用相同服务器的请求是否都不成功。\n* 如果都不成功表明连续两次请求失败则切换到备用服务器\n* @param {Object} entry 入口函数{context:执行环境,name:函数名称}\n* @param {Object} exit 回调函数{context:执行环境,name:函数名称}\n* @param {Object} settings 服务端配置{server:主域地址,backupServer:备选服务器地址，数组，长度为0则不启用容灾机制,serverImg:监测主域名可用的图片}\n* @param {Function} forward 动态判断是否在入口函数继续执行注入的容灾机制\n* @usage 参见/user/js/map.js\n* @dependacy {Function} _.inject\n*/\n_.net.backup = function(entry,exit,settings,forward){\n    var server = settings.server,currentServer = entry.name + '_current_server';\n    _.net[currentServer] = server;\n    //没有备用地址则不启动容灾备份机制\n    if(!settings.backupServer || !_.isArray(settings.backupServer) || !settings.backupServer.length) return;\n    var interval = entry.name + '_interval',//切换到备用以后发起定时器key_name\n        total = entry.name + '_total',//总的请求次数key_name\n        status = entry.name + '_status',//维护各次请求的地址和请求结果key_name\n        serverAvailable = entry.name + '_server_available';//表明当前主服务器是否可用的key_name\n    //主服务器可用时立即切换，并重置对应的变量\n    var resetServer = function(){\n        _.net[serverAvailable] = true;\n        _.net[currentServer] = server;\n        clearInterval(_.net[interval]);\n    };\n    //筛选服务器算法，如果当前使用主服务器则切换到备用，如果已经是备用，有多个备用时则切换到下一个备用，只有一个备用是切换到主服务器\n    var selectServer = function(){\n        if(_.net[currentServer] == server){\n            return settings.backupServer[0];\n        }else{\n            var len = settings.backupServer.length;\n            if(len ==1)\n                return server;\n            var index = _.indexOf(settings.backupServer,_.net[currentServer]);\n            return settings.backupServer[index+1] || settings.backupServer[0];\n        }\n    };\n    _.net[serverAvailable] = true;\n    _.net[interval] = null;\n    _.net[total] = 0;\n    _.net[status] = {};//格式：{1:['http://a.net/',true], 2:['http://a.net/']}\n    entry.start = function(){\n        if(typeof forward == 'function'){\n            if(!forward())return;\n        }\n        _.net[total] += 1;\n        var count = _.net[total];\n        //存储当此请求使用的服务器地址和响应结果\n        _.net[status][count-1] = [];\n        if(count > 2){\n            var prev = _.net[status][count-2], prevPrev = _.net[status][count-3];\n            //上两次请求使用同一个服务器且都失败了，则切换服务器\n            if(prev[0] == prevPrev[0] && !prev[1] && !prevPrev[1]){\n                var usingServer = _.net[currentServer] == server, old = _.net[currentServer];\n                if(usingServer){\n                    _.net[interval] = setInterval(function(){\n                        var img = new Image();\n                        img.onload = resetServer;\n                        img.src = settings.serverImg + (settings.serverImg.indexOf('?')>-1?'&':'?') + 't=' + new Date().getTime();\n                    }, _.net.DETECT_CYCLE*1000);\n                }\n                //如果只有一个备用服务器且备用不可用则立即切换到tbo\n                if(!usingServer && settings.backupServer.length==1){\n                    resetServer();\n                }else{\n                    _.net[currentServer] = selectServer(_.net[currentServer]);\n                    _.net[serverAvailable] = _.net[currentServer] == server;\n                }\n                if(settings.errorHandler){\n                    settings.errorHandler(old,_.net[currentServer]);\n                }\n            }else{\n                //如果备用服务器一直正常，那么需要一直检测主域名是否可用，如果可用立即切换到主域名\n                if(_.net[currentServer] != server){\n                    if(_.net[serverAvailable]){\n                        resetServer();\n                    }\n                }\n            }\n            //删除冗余信息，保证数组长度为2\n            delete _.net[status][count-3];\n        }\n        //记录当此请求使用的服务器地址\n        _.net[status][count-1][0] = _.net[currentServer];\n    };\n    exit.start = function(){\n        //标记本次请求成功，不成功的请求数组长度为1\n        _.net[status][_.net[total]-1][1] = true;\n    };\n    _.inject(entry);\n    _.inject(exit);\n};\n```\n","slug":"关于容灾，前端能够做什么","published":1,"updated":"2017-12-22T07:16:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbhnljau00005s95hik1mrtl","content":"<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>存在轮询的AJAX或者JSONP跨域请求的Web应用。</p>\n<p>比如我们有两台服务器，分别是a.com和a-bk.com，默认的轮询请求使用a.com；</p>\n<p>当a.com由于某种原因无法访问，需要按照一种事先约定的机制，将后续请求指向到备用服务器。</p>\n<p>同时当主服务器正常时，立即切换到主服务器。</p>\n<h2 id=\"现实项目\"><a href=\"#现实项目\" class=\"headerlink\" title=\"现实项目\"></a>现实项目</h2><p>在我们的应用中，JSONP轮询的频率是每十秒一次。由于移动机房经常性的故障，导致客户长时间不能正常访问。</p>\n<p>于是客户经常向我们报障，试想如果此时，前端能够将用户的后续访问切换到我们的电信服务器，那该多好啊！</p>\n<p>虽然响应会慢一些，但是至少整个系统处于可用状态。</p>\n<h2 id=\"容灾机制\"><a href=\"#容灾机制\" class=\"headerlink\" title=\"容灾机制\"></a>容灾机制</h2><p>经过和同事们的一番讨论最后确定我们的容灾机制：</p>\n<p>连续两次请求没有及时应答则认定当前服务器不可用，切换到备用服务器；</p>\n<p>同时发起一个定时器，每55秒检测主服务器是否可用（访问主服务器上的一张43b的图片），一旦可用，立刻切换到主服务器。</p>\n<h2 id=\"实现逻辑\"><a href=\"#实现逻辑\" class=\"headerlink\" title=\"实现逻辑\"></a>实现逻辑</h2><p>确定好容灾机制以后，剩下的就是编码了。</p>\n<p>不过编码之前其实还有一个隐藏的重大问题，那就是我们如何确定这个请求是否超时？</p>\n<p>因为我们的跨域JSONP请求都是使用script tag，而且需要兼容IE 6,自然没有什么类似的ontimeout事件去检测。</p>\n<p>那我们就只有自己动手来处理了。</p>\n<p>对于单个请求超时的判断，我们可以在主函数启动时设置一个状态量为false，回调函数中修改这个值为true。</p>\n<p>由于需要尽量避免修改原函数逻辑，这里用到了 <code>AOP</code> 技术，详细参见<a href=\"http://xugaofan.github.com/javascript/2012/03/18/AOP-in-JavaScript/\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h3><p>每一次发起JSONP请求后，开启一个setTimeout 8秒后去检测状态量是否被修改（变量由回调函数修改），依此判断响应成功与否。</p>\n<h3 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h3><p>建立一个对象，给每一次请求标记ID，将其使用的服务器地址和响应结果记录下来；</p>\n<p>在第N次请求发起之前，判断第N-2次和N-1次请求是否使用相同的服务器，如果是，当这两次请求都没有及时响应时切换到备用服务器。</p>\n<h3 id=\"比较结果\"><a href=\"#比较结果\" class=\"headerlink\" title=\"比较结果\"></a>比较结果</h3><p>方案一对每次请求都在下一次轮询之前就决定它是成功还是失败。我在生产中设置的值是6.5秒，但发现许多客户经常在主服务器和备用服务器上来回切换。</p>\n<p>方案二的好处在于，首先没有发起额外的setTimeout来监测请求成功是否响应，其次对于每一次请求方案二的超时时间实际是一个动态的值。</p>\n<p>对比下就知道方案一对每个请求的超时容忍度都是相同的6.5秒，最大也只能是10秒，而方案二第N-2次的超时容忍时间是20秒，第N-1次是10秒。</p>\n<p>所以严格意义上来讲，方案二更宽容也更加合理。</p>\n<h2 id=\"编码实现\"><a href=\"#编码实现\" class=\"headerlink\" title=\"编码实现\"></a>编码实现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* @description 网络模块</span></span><br><span class=\"line\"><span class=\"comment\">* @property &#123;Number&#125; DETECT_CYCLE 切换到备用服务器后，监测主域名的周期，单位为秒，周期长度最好不要设置为10的倍数，便于调试观察</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">_.net = &#123; <span class=\"attr\">DETECT_CYCLE</span>:<span class=\"number\">55</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* @description 为跨域请求函数注入容灾备份机制，需要将原函数的请求服务器地址改成_.net['funcname_current_server'];</span></span><br><span class=\"line\"><span class=\"comment\">* 实现原理：使用对象存储每一次请求使用的服务器地址和请求结果，然后在每一次请求之前，判断前两次使用相同服务器的请求是否都不成功。</span></span><br><span class=\"line\"><span class=\"comment\">* 如果都不成功表明连续两次请求失败则切换到备用服务器</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;Object&#125; entry 入口函数&#123;context:执行环境,name:函数名称&#125;</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;Object&#125; exit 回调函数&#123;context:执行环境,name:函数名称&#125;</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;Object&#125; settings 服务端配置&#123;server:主域地址,backupServer:备选服务器地址，数组，长度为0则不启用容灾机制,serverImg:监测主域名可用的图片&#125;</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;Function&#125; forward 动态判断是否在入口函数继续执行注入的容灾机制</span></span><br><span class=\"line\"><span class=\"comment\">* @usage 参见/user/js/map.js</span></span><br><span class=\"line\"><span class=\"comment\">* @dependacy &#123;Function&#125; _.inject</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">_.net.backup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">entry,exit,settings,forward</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> server = settings.server,currentServer = entry.name + <span class=\"string\">'_current_server'</span>;</span><br><span class=\"line\">    _.net[currentServer] = server;</span><br><span class=\"line\">    <span class=\"comment\">//没有备用地址则不启动容灾备份机制</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!settings.backupServer || !_.isArray(settings.backupServer) || !settings.backupServer.length) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> interval = entry.name + <span class=\"string\">'_interval'</span>,<span class=\"comment\">//切换到备用以后发起定时器key_name</span></span><br><span class=\"line\">        total = entry.name + <span class=\"string\">'_total'</span>,<span class=\"comment\">//总的请求次数key_name</span></span><br><span class=\"line\">        status = entry.name + <span class=\"string\">'_status'</span>,<span class=\"comment\">//维护各次请求的地址和请求结果key_name</span></span><br><span class=\"line\">        serverAvailable = entry.name + <span class=\"string\">'_server_available'</span>;<span class=\"comment\">//表明当前主服务器是否可用的key_name</span></span><br><span class=\"line\">    <span class=\"comment\">//主服务器可用时立即切换，并重置对应的变量</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> resetServer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        _.net[serverAvailable] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        _.net[currentServer] = server;</span><br><span class=\"line\">        clearInterval(_.net[interval]);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//筛选服务器算法，如果当前使用主服务器则切换到备用，如果已经是备用，有多个备用时则切换到下一个备用，只有一个备用是切换到主服务器</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> selectServer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_.net[currentServer] == server)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> settings.backupServer[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> len = settings.backupServer.length;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(len ==<span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> server;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> index = _.indexOf(settings.backupServer,_.net[currentServer]);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> settings.backupServer[index+<span class=\"number\">1</span>] || settings.backupServer[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    _.net[serverAvailable] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    _.net[interval] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    _.net[total] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    _.net[status] = &#123;&#125;;<span class=\"comment\">//格式：&#123;1:['http://a.net/',true], 2:['http://a.net/']&#125;</span></span><br><span class=\"line\">    entry.start = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> forward == <span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!forward())<span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        _.net[total] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count = _.net[total];</span><br><span class=\"line\">        <span class=\"comment\">//存储当此请求使用的服务器地址和响应结果</span></span><br><span class=\"line\">        _.net[status][count<span class=\"number\">-1</span>] = [];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count &gt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> prev = _.net[status][count<span class=\"number\">-2</span>], prevPrev = _.net[status][count<span class=\"number\">-3</span>];</span><br><span class=\"line\">            <span class=\"comment\">//上两次请求使用同一个服务器且都失败了，则切换服务器</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(prev[<span class=\"number\">0</span>] == prevPrev[<span class=\"number\">0</span>] &amp;&amp; !prev[<span class=\"number\">1</span>] &amp;&amp; !prevPrev[<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> usingServer = _.net[currentServer] == server, old = _.net[currentServer];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(usingServer)&#123;</span><br><span class=\"line\">                    _.net[interval] = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">                        img.onload = resetServer;</span><br><span class=\"line\">                        img.src = settings.serverImg + (settings.serverImg.indexOf(<span class=\"string\">'?'</span>)&gt;<span class=\"number\">-1</span>?<span class=\"string\">'&amp;'</span>:<span class=\"string\">'?'</span>) + <span class=\"string\">'t='</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\">                    &#125;, _.net.DETECT_CYCLE*<span class=\"number\">1000</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//如果只有一个备用服务器且备用不可用则立即切换到tbo</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!usingServer &amp;&amp; settings.backupServer.length==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    resetServer();</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    _.net[currentServer] = selectServer(_.net[currentServer]);</span><br><span class=\"line\">                    _.net[serverAvailable] = _.net[currentServer] == server;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(settings.errorHandler)&#123;</span><br><span class=\"line\">                    settings.errorHandler(old,_.net[currentServer]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果备用服务器一直正常，那么需要一直检测主域名是否可用，如果可用立即切换到主域名</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(_.net[currentServer] != server)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(_.net[serverAvailable])&#123;</span><br><span class=\"line\">                        resetServer();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//删除冗余信息，保证数组长度为2</span></span><br><span class=\"line\">            <span class=\"keyword\">delete</span> _.net[status][count<span class=\"number\">-3</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//记录当此请求使用的服务器地址</span></span><br><span class=\"line\">        _.net[status][count<span class=\"number\">-1</span>][<span class=\"number\">0</span>] = _.net[currentServer];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    exit.start = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//标记本次请求成功，不成功的请求数组长度为1</span></span><br><span class=\"line\">        _.net[status][_.net[total]<span class=\"number\">-1</span>][<span class=\"number\">1</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    _.inject(entry);</span><br><span class=\"line\">    _.inject(exit);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>存在轮询的AJAX或者JSONP跨域请求的Web应用。</p>\n<p>比如我们有两台服务器，分别是a.com和a-bk.com，默认的轮询请求使用a.com；</p>\n<p>当a.com由于某种原因无法访问，需要按照一种事先约定的机制，将后续请求指向到备用服务器。</p>\n<p>同时当主服务器正常时，立即切换到主服务器。</p>\n<h2 id=\"现实项目\"><a href=\"#现实项目\" class=\"headerlink\" title=\"现实项目\"></a>现实项目</h2><p>在我们的应用中，JSONP轮询的频率是每十秒一次。由于移动机房经常性的故障，导致客户长时间不能正常访问。</p>\n<p>于是客户经常向我们报障，试想如果此时，前端能够将用户的后续访问切换到我们的电信服务器，那该多好啊！</p>\n<p>虽然响应会慢一些，但是至少整个系统处于可用状态。</p>\n<h2 id=\"容灾机制\"><a href=\"#容灾机制\" class=\"headerlink\" title=\"容灾机制\"></a>容灾机制</h2><p>经过和同事们的一番讨论最后确定我们的容灾机制：</p>\n<p>连续两次请求没有及时应答则认定当前服务器不可用，切换到备用服务器；</p>\n<p>同时发起一个定时器，每55秒检测主服务器是否可用（访问主服务器上的一张43b的图片），一旦可用，立刻切换到主服务器。</p>\n<h2 id=\"实现逻辑\"><a href=\"#实现逻辑\" class=\"headerlink\" title=\"实现逻辑\"></a>实现逻辑</h2><p>确定好容灾机制以后，剩下的就是编码了。</p>\n<p>不过编码之前其实还有一个隐藏的重大问题，那就是我们如何确定这个请求是否超时？</p>\n<p>因为我们的跨域JSONP请求都是使用script tag，而且需要兼容IE 6,自然没有什么类似的ontimeout事件去检测。</p>\n<p>那我们就只有自己动手来处理了。</p>\n<p>对于单个请求超时的判断，我们可以在主函数启动时设置一个状态量为false，回调函数中修改这个值为true。</p>\n<p>由于需要尽量避免修改原函数逻辑，这里用到了 <code>AOP</code> 技术，详细参见<a href=\"http://xugaofan.github.com/javascript/2012/03/18/AOP-in-JavaScript/\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h3><p>每一次发起JSONP请求后，开启一个setTimeout 8秒后去检测状态量是否被修改（变量由回调函数修改），依此判断响应成功与否。</p>\n<h3 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h3><p>建立一个对象，给每一次请求标记ID，将其使用的服务器地址和响应结果记录下来；</p>\n<p>在第N次请求发起之前，判断第N-2次和N-1次请求是否使用相同的服务器，如果是，当这两次请求都没有及时响应时切换到备用服务器。</p>\n<h3 id=\"比较结果\"><a href=\"#比较结果\" class=\"headerlink\" title=\"比较结果\"></a>比较结果</h3><p>方案一对每次请求都在下一次轮询之前就决定它是成功还是失败。我在生产中设置的值是6.5秒，但发现许多客户经常在主服务器和备用服务器上来回切换。</p>\n<p>方案二的好处在于，首先没有发起额外的setTimeout来监测请求成功是否响应，其次对于每一次请求方案二的超时时间实际是一个动态的值。</p>\n<p>对比下就知道方案一对每个请求的超时容忍度都是相同的6.5秒，最大也只能是10秒，而方案二第N-2次的超时容忍时间是20秒，第N-1次是10秒。</p>\n<p>所以严格意义上来讲，方案二更宽容也更加合理。</p>\n<h2 id=\"编码实现\"><a href=\"#编码实现\" class=\"headerlink\" title=\"编码实现\"></a>编码实现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* @description 网络模块</span></span><br><span class=\"line\"><span class=\"comment\">* @property &#123;Number&#125; DETECT_CYCLE 切换到备用服务器后，监测主域名的周期，单位为秒，周期长度最好不要设置为10的倍数，便于调试观察</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">_.net = &#123; <span class=\"attr\">DETECT_CYCLE</span>:<span class=\"number\">55</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* @description 为跨域请求函数注入容灾备份机制，需要将原函数的请求服务器地址改成_.net['funcname_current_server'];</span></span><br><span class=\"line\"><span class=\"comment\">* 实现原理：使用对象存储每一次请求使用的服务器地址和请求结果，然后在每一次请求之前，判断前两次使用相同服务器的请求是否都不成功。</span></span><br><span class=\"line\"><span class=\"comment\">* 如果都不成功表明连续两次请求失败则切换到备用服务器</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;Object&#125; entry 入口函数&#123;context:执行环境,name:函数名称&#125;</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;Object&#125; exit 回调函数&#123;context:执行环境,name:函数名称&#125;</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;Object&#125; settings 服务端配置&#123;server:主域地址,backupServer:备选服务器地址，数组，长度为0则不启用容灾机制,serverImg:监测主域名可用的图片&#125;</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;Function&#125; forward 动态判断是否在入口函数继续执行注入的容灾机制</span></span><br><span class=\"line\"><span class=\"comment\">* @usage 参见/user/js/map.js</span></span><br><span class=\"line\"><span class=\"comment\">* @dependacy &#123;Function&#125; _.inject</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">_.net.backup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">entry,exit,settings,forward</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> server = settings.server,currentServer = entry.name + <span class=\"string\">'_current_server'</span>;</span><br><span class=\"line\">    _.net[currentServer] = server;</span><br><span class=\"line\">    <span class=\"comment\">//没有备用地址则不启动容灾备份机制</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!settings.backupServer || !_.isArray(settings.backupServer) || !settings.backupServer.length) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> interval = entry.name + <span class=\"string\">'_interval'</span>,<span class=\"comment\">//切换到备用以后发起定时器key_name</span></span><br><span class=\"line\">        total = entry.name + <span class=\"string\">'_total'</span>,<span class=\"comment\">//总的请求次数key_name</span></span><br><span class=\"line\">        status = entry.name + <span class=\"string\">'_status'</span>,<span class=\"comment\">//维护各次请求的地址和请求结果key_name</span></span><br><span class=\"line\">        serverAvailable = entry.name + <span class=\"string\">'_server_available'</span>;<span class=\"comment\">//表明当前主服务器是否可用的key_name</span></span><br><span class=\"line\">    <span class=\"comment\">//主服务器可用时立即切换，并重置对应的变量</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> resetServer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        _.net[serverAvailable] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        _.net[currentServer] = server;</span><br><span class=\"line\">        clearInterval(_.net[interval]);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//筛选服务器算法，如果当前使用主服务器则切换到备用，如果已经是备用，有多个备用时则切换到下一个备用，只有一个备用是切换到主服务器</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> selectServer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_.net[currentServer] == server)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> settings.backupServer[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> len = settings.backupServer.length;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(len ==<span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> server;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> index = _.indexOf(settings.backupServer,_.net[currentServer]);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> settings.backupServer[index+<span class=\"number\">1</span>] || settings.backupServer[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    _.net[serverAvailable] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    _.net[interval] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    _.net[total] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    _.net[status] = &#123;&#125;;<span class=\"comment\">//格式：&#123;1:['http://a.net/',true], 2:['http://a.net/']&#125;</span></span><br><span class=\"line\">    entry.start = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> forward == <span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!forward())<span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        _.net[total] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> count = _.net[total];</span><br><span class=\"line\">        <span class=\"comment\">//存储当此请求使用的服务器地址和响应结果</span></span><br><span class=\"line\">        _.net[status][count<span class=\"number\">-1</span>] = [];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count &gt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> prev = _.net[status][count<span class=\"number\">-2</span>], prevPrev = _.net[status][count<span class=\"number\">-3</span>];</span><br><span class=\"line\">            <span class=\"comment\">//上两次请求使用同一个服务器且都失败了，则切换服务器</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(prev[<span class=\"number\">0</span>] == prevPrev[<span class=\"number\">0</span>] &amp;&amp; !prev[<span class=\"number\">1</span>] &amp;&amp; !prevPrev[<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> usingServer = _.net[currentServer] == server, old = _.net[currentServer];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(usingServer)&#123;</span><br><span class=\"line\">                    _.net[interval] = setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">                        img.onload = resetServer;</span><br><span class=\"line\">                        img.src = settings.serverImg + (settings.serverImg.indexOf(<span class=\"string\">'?'</span>)&gt;<span class=\"number\">-1</span>?<span class=\"string\">'&amp;'</span>:<span class=\"string\">'?'</span>) + <span class=\"string\">'t='</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\">                    &#125;, _.net.DETECT_CYCLE*<span class=\"number\">1000</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//如果只有一个备用服务器且备用不可用则立即切换到tbo</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!usingServer &amp;&amp; settings.backupServer.length==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    resetServer();</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    _.net[currentServer] = selectServer(_.net[currentServer]);</span><br><span class=\"line\">                    _.net[serverAvailable] = _.net[currentServer] == server;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(settings.errorHandler)&#123;</span><br><span class=\"line\">                    settings.errorHandler(old,_.net[currentServer]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果备用服务器一直正常，那么需要一直检测主域名是否可用，如果可用立即切换到主域名</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(_.net[currentServer] != server)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(_.net[serverAvailable])&#123;</span><br><span class=\"line\">                        resetServer();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//删除冗余信息，保证数组长度为2</span></span><br><span class=\"line\">            <span class=\"keyword\">delete</span> _.net[status][count<span class=\"number\">-3</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//记录当此请求使用的服务器地址</span></span><br><span class=\"line\">        _.net[status][count<span class=\"number\">-1</span>][<span class=\"number\">0</span>] = _.net[currentServer];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    exit.start = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//标记本次请求成功，不成功的请求数组长度为1</span></span><br><span class=\"line\">        _.net[status][_.net[total]<span class=\"number\">-1</span>][<span class=\"number\">1</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    _.inject(entry);</span><br><span class=\"line\">    _.inject(exit);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"一次跨域实践","date":"2012-07-26T16:00:00.000Z","_content":"\n\n项目需求:对一个照片列表页面的每张图片在前端进行下载耗时统计，并定期上报。\n\n## 基本思路\n\n使用`XMLHttpRequest`下载图片，实现下载耗时统计。上报功能则一次上报`localStorage`存储的多张图片的统计信息，这里不做讨论\n\n## 问题难点\n\n使用`XMLHttpRequest`需要跨域访问图片服务器\n\n## 其它说明\n\n* 项目只服务于移动终端，本文的一切测试原则上只涉及`Webkit`系列的浏览器\n\n* 为了方便快捷地看到效果，后台使用`Ruby`语言的轻量级框架`Sinatra`\n\n* 使用`127.0.0.1`访问`localhost`模拟跨域图片请求\n\n## 项目文件\n\n* 前端测试主页面 `test.html`\n\n* 后台请求处理文件 `myapp.rb`\n\n* 一张测试图片 `london.jpg`，大小47714B\n\n## 代码预览\n\n### test.html\n\n```html\n<!doctype html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"utf-8\" />\n</head>\n<body>\n    <h1>跨域获取图片的文件大小</h1>\n    <button id=\"send\">Send Ajax Request</button>\n    <script>\n        +function(){\n            var xhr = new XMLHttpRequest(),\n                host = location.href.indexOf('localhost')>-1?'127.0.0.1':'localhost',\n                url = 'http://' + host + ':4567/img'\n            xhr.onload  = function(e){\n                console.log(e)\n            }\n            xhr.onerror = function(a){\n                console.log(a)\n            }\n            var send = document.getElementById('send')\n            send.addEventListener('click',function(){\n                xhr.abort()\n                xhr.open('GET', url, true)\n                xhr.send(null)\n            },false)\n        }()\n    </script>\n```\n\n### myapp.rb\n\n```ruby\nrequire 'rubygems'\nrequire 'sinatra'\n\nget '/' do\n    send_file 'test.html'\nend\n\n#跨域请求\nget '/img' do\n    send_file 'london.jpg'\nend\n```\n\n## 开始工作\n\n启动web server以后就开始我们的测试工作了。打开`chrome`及其`控制台`，输入 http://localhost:4567/，点击页面中的按钮，不出意外你会在chrome控制台看到下面的错误提示。\n\n```html\nXMLHttpRequest cannot load http://127.0.0.1:4567/img. Origin http://localhost:4567 is not allowed by Access-Control-Allow-Origin.\n```\n\n因为我们对跨域访问没有进行任何设置，所以自然无法通过浏览器内在的`同源安全机制`。\n\n## 实现跨域访问\n\ngoogle如何实现跨域访问，很快找到了一种方法。在网站根目录放置`crossdomain.xml`的配置文件，就可以完美地实现跨域访问。难怪qq.com和taobao.com都不约而同的配置了这个文件，该文件的格式一般如下：\n\n```xml\n<cross-domain-policy>\n    <allow-access-from domain=\"*.site.com\"/>\n    <allow-access-from domain=\"*.site.net\"/>\n    <allow-access-from domain=\"*.sitecdn.com\"/>\n</cross-domain-policy>\n```\n\n经过一番测试，发现这样还是无法实现跨域访问。后来终于知道crossdomain.xml文件是flash跨域专用，而且据说已经被Adobe公司申请为专利。看来这条路是走不通了。\n\n于是继续google，终于在[这里](http://www.w3.org/TR/cors/)看到了一切关于我们想要的。，可惜`w3c`的文档总是那么地冗长而乏味，令人望而生畏。比如在介绍这个`Access-Control-Allow-Origin`的响应头如何设置时，看着这里的介绍是\" origin-list-or-null | \"*\"，我以为可以一次性设置多个origin，比如\na.com,b.com,c.com。一番折腾之后发现这样设置和没有设置是一样的效果，如果不设置为星号就只能设置一个站点。那我们就暂时设置为\"*\"吧，安全问题稍后再考虑！修改我们的后台代码，加入一个全局的`过滤器`设置响应头，下面是修改后的myapp.rb文件：\n\n```ruby\n# myapp.rb\nrequire 'rubygems'\nrequire 'sinatra'\n\nget '/' do\n    send_file 'test.html'\nend\n\n#跨域请求\nget '/img' do\n    send_file 'london.jpg'\nend\n\nafter do\n    headers\\\n    'Access-Control-Allow-Origin' => '*'\nend\n```\n\n现在我们重启web server和浏览器，继续输入http://localhost:4567/，点击页面中的按钮发起跨域请求，查看crhome控制台，没有发现错误，请求顺利完成。那就让我们看看`Network`中的跨域访问请求到底多了些什么：\n\n* Access-Control-Allow-Origin:*\n\n* Connection:Keep-Alive\n\n* Content-Length:47714\n\n* Content-Type:image/jpeg\n\n* Date:Fri, 27 Jul 2012 07:11:42 GMT\n\n* Last-Modified:Fri, 27 Jul 2012 02:52:45 GMT\n\n* Server:WEBrick/1.3.1 (Ruby/1.8.7/2011-12-28)\n\n* X-Frame-Options:sameorigin\n\n* X-Xss-Protection:1; mode=block\n\n果然我们设置的响应头`Access-Control-Allow-Origin`生效了，太神奇了！通过服务器和浏览器的协作，我们轻松地实现了跨域访问。现在看来W3C搞的这些跨域访问控制的标准还是比较靠谱的啊，如果说有什么缺点，那就是设置多个站点的时候麻烦了点（比如qq.com需要配置跨域访问控制的话），其它的缺点一时我还真说不出来。\n\n## 读取图片的文件大小\n\n目前为止，我们算是成功地实现了跨域请求，但是离我们的目标还差一点。我们还需要知道这个图片的文件大小，从之前服务器输出的响应头来看，应该就是`Content-Length`这个响应头了。那就修改下我们的页面代码，获取这个响应头吧：\n\n```html\n<!doctype html>\n<html lang=\"zh-CN\">\n    <head>\n        <meta charset=\"utf-8\" />\n    </head>\n    <body>\n        <h1>跨域获取图片的文件大小</h1>\n        <button id=\"send\">Send Ajax Request</button>\n        <script>\n            +function(){\n                var xhr = new XMLHttpRequest(),\n                    host = location.href.indexOf('localhost')>-1?'127.0.0.1':'localhost',\n                    url = 'http://' + host + ':4567/img'\n                xhr.onload  = function(e){\n                    console.log(this.getResponseHeader('Content-Length'))\n                    console.log(this.responseText.length)\n                }\n                xhr.onerror = function(a){\n                    console.log(a)\n                }\n                var send = document.getElementById('send')\n                send.addEventListener('click',function(){\n                    xhr.abort()\n                    xhr.open('GET', url, true)\n                    xhr.send(null)\n                },false)\n            }()\n        </script>\n```\n\n刷新页面，打开控制台，点击按钮，一个红色的错误呈现在我们眼前：\n\n`Refused to get unsafe header \"Content-Length\"`\n\n怎么样让浏览器服软允许脚本获取这个响应头呢？还是继续去w3c的文档找找吧。很幸运，这个`Access-Control-Expose-Headers`似乎和我们的需求很匹配啊，不妨在过滤器中加入输出这个响应头来试一试：\n\n```ruby\n# myapp.rb\nrequire 'rubygems'\nrequire 'sinatra'\n\nget '/' do\n    send_file 'test.html'\nend\n\n#跨域请求\nget '/img' do\n    send_file 'london.jpg'\nend\n\nafter do\n    headers\\\n    'Access-Control-Allow-Origin' => '*',\n    'Access-Control-Expose-Headers' => 'Content-Length'\nend\n```\n\n重启web server，刷新页面，打开chrome控制台，点击按钮。没有任何错误，顺利输出两个数值：47714，45926。看来已经能够顺利的获取到Content-Length响应头，而且数值也很准确，和文件大小一致。但是这个`responseText`为什么少了接近2KB呢？还请高人解答。\n\n一切都很顺利，不过虽然只针对webkit系浏览器，至少也得测试下safari吧。打开safari及其控制台，输入url，点击按钮，居然抛出了和之前未设置`Access-Control-Expose-Headers`时一样的错误：\n\n`Refused to get unsafe header \"Content-Length\"`\n\n是不是浏览器缓存的问题呢？重启浏览器再测试，问题依旧。看来这应该就是safari的bug了。既然safari不支持，那就意味着我们前端脚本无法使用`getResponseHeader`了，那问题该如何解决呢？让我们再看看w3c上关于`XMLHttpRequest Level 2`的实现还有属性和函数我们可能用得上，继续找啊...终于发现XMLHttpRequest Level 2有一个[onprogress](http://www.w3.org/TR/XMLHttpRequest2/#handler-xhr-onprogress)事件和[ProgressEvent](http://dvcs.w3.org/hg/progress/raw-file/tip/Overview.html#progressevent)对象，于是修改我们的页面代码如下：\n\n```html\n<!doctype html>\n<html lang=\"zh-CN\">\n<head>\n<meta charset=\"utf-8\" />\n</head>\n<body>\n<h1>跨域获取图片的文件大小</h1>\n<button id=\"send\">Send Ajax Request</button>\n<script>\n    +function(){\n        var xhr = new XMLHttpRequest(),\n            host = location.href.indexOf('localhost')>-1?'127.0.0.1':'localhost',\n            url = 'http://' + host + ':4567/img'\n        xhr.onprogress  = function(e){\n            if(e.lengthComputable){\n                if(e.loaded/e.total == 1){\n                    //invoke onload\n                    console.log(e.total)\n                }\n            }\n        }\n        xhr.onerror = function(a){\n            console.log(a)\n        }\n        var send = document.getElementById('send')\n        send.addEventListener('click',function(){\n            xhr.abort()\n            xhr.open('GET', url, true)\n            xhr.send(null)\n        },false)\n    }()\n</script>\n```\n\n细心的同学可能会问为什么不在`onload`中执行相关操作，其实经我测试发现onload之后`e.total`和`e.loaded`已经被设置为0，虽然`responseText`依然可读，但是这与真实的文件大小有一点的误差。\n\n## 最后的完善\n\n虽然我们的目标已经完成，但是我们的工作还没有结束。因为服务端存在一个严重的`安全隐患`。我们草率地将`Access-Control-Allow-Origin`设置为”＊“，不可避免地为一些黑客攻击创造了便利条件。\n\n其实，既然我们的跨域访问只开放给部分信任的站点，那么我们只需要在后台的过滤器中判断请求来源是否属于白名单之中，如果存在则输出Access-Control-Allow-Origin响应头，内容为该站点域名。至于这个白名单的设计，可以参考`Apache`（之前一直误以为Apache的做法是业界的标准）。\n\n另外跨域访问控制一般针对的是Ajax请求，所以我们还可以在过滤器中加入一个是否是Ajax请求的判断(服务端判断请求头中是否包含`X-Requested-With`:`XMLHttpRequest`)，避免为普通的请求也加入`Access-Control-Allow-Origin`这个响应头。\n\n最后由于各浏览器对`Access-Control-Expose-Headers`的实现并不完善，所以这个响应头就显得异常鸡肋。\n","source":"_posts/A-Cross-Domain-Practice.md","raw":"---\ntitle: 一次跨域实践\ndate: 2012-07-27\ntags: JavaScript\n---\n\n\n项目需求:对一个照片列表页面的每张图片在前端进行下载耗时统计，并定期上报。\n\n## 基本思路\n\n使用`XMLHttpRequest`下载图片，实现下载耗时统计。上报功能则一次上报`localStorage`存储的多张图片的统计信息，这里不做讨论\n\n## 问题难点\n\n使用`XMLHttpRequest`需要跨域访问图片服务器\n\n## 其它说明\n\n* 项目只服务于移动终端，本文的一切测试原则上只涉及`Webkit`系列的浏览器\n\n* 为了方便快捷地看到效果，后台使用`Ruby`语言的轻量级框架`Sinatra`\n\n* 使用`127.0.0.1`访问`localhost`模拟跨域图片请求\n\n## 项目文件\n\n* 前端测试主页面 `test.html`\n\n* 后台请求处理文件 `myapp.rb`\n\n* 一张测试图片 `london.jpg`，大小47714B\n\n## 代码预览\n\n### test.html\n\n```html\n<!doctype html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"utf-8\" />\n</head>\n<body>\n    <h1>跨域获取图片的文件大小</h1>\n    <button id=\"send\">Send Ajax Request</button>\n    <script>\n        +function(){\n            var xhr = new XMLHttpRequest(),\n                host = location.href.indexOf('localhost')>-1?'127.0.0.1':'localhost',\n                url = 'http://' + host + ':4567/img'\n            xhr.onload  = function(e){\n                console.log(e)\n            }\n            xhr.onerror = function(a){\n                console.log(a)\n            }\n            var send = document.getElementById('send')\n            send.addEventListener('click',function(){\n                xhr.abort()\n                xhr.open('GET', url, true)\n                xhr.send(null)\n            },false)\n        }()\n    </script>\n```\n\n### myapp.rb\n\n```ruby\nrequire 'rubygems'\nrequire 'sinatra'\n\nget '/' do\n    send_file 'test.html'\nend\n\n#跨域请求\nget '/img' do\n    send_file 'london.jpg'\nend\n```\n\n## 开始工作\n\n启动web server以后就开始我们的测试工作了。打开`chrome`及其`控制台`，输入 http://localhost:4567/，点击页面中的按钮，不出意外你会在chrome控制台看到下面的错误提示。\n\n```html\nXMLHttpRequest cannot load http://127.0.0.1:4567/img. Origin http://localhost:4567 is not allowed by Access-Control-Allow-Origin.\n```\n\n因为我们对跨域访问没有进行任何设置，所以自然无法通过浏览器内在的`同源安全机制`。\n\n## 实现跨域访问\n\ngoogle如何实现跨域访问，很快找到了一种方法。在网站根目录放置`crossdomain.xml`的配置文件，就可以完美地实现跨域访问。难怪qq.com和taobao.com都不约而同的配置了这个文件，该文件的格式一般如下：\n\n```xml\n<cross-domain-policy>\n    <allow-access-from domain=\"*.site.com\"/>\n    <allow-access-from domain=\"*.site.net\"/>\n    <allow-access-from domain=\"*.sitecdn.com\"/>\n</cross-domain-policy>\n```\n\n经过一番测试，发现这样还是无法实现跨域访问。后来终于知道crossdomain.xml文件是flash跨域专用，而且据说已经被Adobe公司申请为专利。看来这条路是走不通了。\n\n于是继续google，终于在[这里](http://www.w3.org/TR/cors/)看到了一切关于我们想要的。，可惜`w3c`的文档总是那么地冗长而乏味，令人望而生畏。比如在介绍这个`Access-Control-Allow-Origin`的响应头如何设置时，看着这里的介绍是\" origin-list-or-null | \"*\"，我以为可以一次性设置多个origin，比如\na.com,b.com,c.com。一番折腾之后发现这样设置和没有设置是一样的效果，如果不设置为星号就只能设置一个站点。那我们就暂时设置为\"*\"吧，安全问题稍后再考虑！修改我们的后台代码，加入一个全局的`过滤器`设置响应头，下面是修改后的myapp.rb文件：\n\n```ruby\n# myapp.rb\nrequire 'rubygems'\nrequire 'sinatra'\n\nget '/' do\n    send_file 'test.html'\nend\n\n#跨域请求\nget '/img' do\n    send_file 'london.jpg'\nend\n\nafter do\n    headers\\\n    'Access-Control-Allow-Origin' => '*'\nend\n```\n\n现在我们重启web server和浏览器，继续输入http://localhost:4567/，点击页面中的按钮发起跨域请求，查看crhome控制台，没有发现错误，请求顺利完成。那就让我们看看`Network`中的跨域访问请求到底多了些什么：\n\n* Access-Control-Allow-Origin:*\n\n* Connection:Keep-Alive\n\n* Content-Length:47714\n\n* Content-Type:image/jpeg\n\n* Date:Fri, 27 Jul 2012 07:11:42 GMT\n\n* Last-Modified:Fri, 27 Jul 2012 02:52:45 GMT\n\n* Server:WEBrick/1.3.1 (Ruby/1.8.7/2011-12-28)\n\n* X-Frame-Options:sameorigin\n\n* X-Xss-Protection:1; mode=block\n\n果然我们设置的响应头`Access-Control-Allow-Origin`生效了，太神奇了！通过服务器和浏览器的协作，我们轻松地实现了跨域访问。现在看来W3C搞的这些跨域访问控制的标准还是比较靠谱的啊，如果说有什么缺点，那就是设置多个站点的时候麻烦了点（比如qq.com需要配置跨域访问控制的话），其它的缺点一时我还真说不出来。\n\n## 读取图片的文件大小\n\n目前为止，我们算是成功地实现了跨域请求，但是离我们的目标还差一点。我们还需要知道这个图片的文件大小，从之前服务器输出的响应头来看，应该就是`Content-Length`这个响应头了。那就修改下我们的页面代码，获取这个响应头吧：\n\n```html\n<!doctype html>\n<html lang=\"zh-CN\">\n    <head>\n        <meta charset=\"utf-8\" />\n    </head>\n    <body>\n        <h1>跨域获取图片的文件大小</h1>\n        <button id=\"send\">Send Ajax Request</button>\n        <script>\n            +function(){\n                var xhr = new XMLHttpRequest(),\n                    host = location.href.indexOf('localhost')>-1?'127.0.0.1':'localhost',\n                    url = 'http://' + host + ':4567/img'\n                xhr.onload  = function(e){\n                    console.log(this.getResponseHeader('Content-Length'))\n                    console.log(this.responseText.length)\n                }\n                xhr.onerror = function(a){\n                    console.log(a)\n                }\n                var send = document.getElementById('send')\n                send.addEventListener('click',function(){\n                    xhr.abort()\n                    xhr.open('GET', url, true)\n                    xhr.send(null)\n                },false)\n            }()\n        </script>\n```\n\n刷新页面，打开控制台，点击按钮，一个红色的错误呈现在我们眼前：\n\n`Refused to get unsafe header \"Content-Length\"`\n\n怎么样让浏览器服软允许脚本获取这个响应头呢？还是继续去w3c的文档找找吧。很幸运，这个`Access-Control-Expose-Headers`似乎和我们的需求很匹配啊，不妨在过滤器中加入输出这个响应头来试一试：\n\n```ruby\n# myapp.rb\nrequire 'rubygems'\nrequire 'sinatra'\n\nget '/' do\n    send_file 'test.html'\nend\n\n#跨域请求\nget '/img' do\n    send_file 'london.jpg'\nend\n\nafter do\n    headers\\\n    'Access-Control-Allow-Origin' => '*',\n    'Access-Control-Expose-Headers' => 'Content-Length'\nend\n```\n\n重启web server，刷新页面，打开chrome控制台，点击按钮。没有任何错误，顺利输出两个数值：47714，45926。看来已经能够顺利的获取到Content-Length响应头，而且数值也很准确，和文件大小一致。但是这个`responseText`为什么少了接近2KB呢？还请高人解答。\n\n一切都很顺利，不过虽然只针对webkit系浏览器，至少也得测试下safari吧。打开safari及其控制台，输入url，点击按钮，居然抛出了和之前未设置`Access-Control-Expose-Headers`时一样的错误：\n\n`Refused to get unsafe header \"Content-Length\"`\n\n是不是浏览器缓存的问题呢？重启浏览器再测试，问题依旧。看来这应该就是safari的bug了。既然safari不支持，那就意味着我们前端脚本无法使用`getResponseHeader`了，那问题该如何解决呢？让我们再看看w3c上关于`XMLHttpRequest Level 2`的实现还有属性和函数我们可能用得上，继续找啊...终于发现XMLHttpRequest Level 2有一个[onprogress](http://www.w3.org/TR/XMLHttpRequest2/#handler-xhr-onprogress)事件和[ProgressEvent](http://dvcs.w3.org/hg/progress/raw-file/tip/Overview.html#progressevent)对象，于是修改我们的页面代码如下：\n\n```html\n<!doctype html>\n<html lang=\"zh-CN\">\n<head>\n<meta charset=\"utf-8\" />\n</head>\n<body>\n<h1>跨域获取图片的文件大小</h1>\n<button id=\"send\">Send Ajax Request</button>\n<script>\n    +function(){\n        var xhr = new XMLHttpRequest(),\n            host = location.href.indexOf('localhost')>-1?'127.0.0.1':'localhost',\n            url = 'http://' + host + ':4567/img'\n        xhr.onprogress  = function(e){\n            if(e.lengthComputable){\n                if(e.loaded/e.total == 1){\n                    //invoke onload\n                    console.log(e.total)\n                }\n            }\n        }\n        xhr.onerror = function(a){\n            console.log(a)\n        }\n        var send = document.getElementById('send')\n        send.addEventListener('click',function(){\n            xhr.abort()\n            xhr.open('GET', url, true)\n            xhr.send(null)\n        },false)\n    }()\n</script>\n```\n\n细心的同学可能会问为什么不在`onload`中执行相关操作，其实经我测试发现onload之后`e.total`和`e.loaded`已经被设置为0，虽然`responseText`依然可读，但是这与真实的文件大小有一点的误差。\n\n## 最后的完善\n\n虽然我们的目标已经完成，但是我们的工作还没有结束。因为服务端存在一个严重的`安全隐患`。我们草率地将`Access-Control-Allow-Origin`设置为”＊“，不可避免地为一些黑客攻击创造了便利条件。\n\n其实，既然我们的跨域访问只开放给部分信任的站点，那么我们只需要在后台的过滤器中判断请求来源是否属于白名单之中，如果存在则输出Access-Control-Allow-Origin响应头，内容为该站点域名。至于这个白名单的设计，可以参考`Apache`（之前一直误以为Apache的做法是业界的标准）。\n\n另外跨域访问控制一般针对的是Ajax请求，所以我们还可以在过滤器中加入一个是否是Ajax请求的判断(服务端判断请求头中是否包含`X-Requested-With`:`XMLHttpRequest`)，避免为普通的请求也加入`Access-Control-Allow-Origin`这个响应头。\n\n最后由于各浏览器对`Access-Control-Expose-Headers`的实现并不完善，所以这个响应头就显得异常鸡肋。\n","slug":"A-Cross-Domain-Practice","published":1,"updated":"2017-12-22T08:18:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbhnlumr00007i956qsy03t6","content":"<p>项目需求:对一个照片列表页面的每张图片在前端进行下载耗时统计，并定期上报。</p>\n<h2 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h2><p>使用<code>XMLHttpRequest</code>下载图片，实现下载耗时统计。上报功能则一次上报<code>localStorage</code>存储的多张图片的统计信息，这里不做讨论</p>\n<h2 id=\"问题难点\"><a href=\"#问题难点\" class=\"headerlink\" title=\"问题难点\"></a>问题难点</h2><p>使用<code>XMLHttpRequest</code>需要跨域访问图片服务器</p>\n<h2 id=\"其它说明\"><a href=\"#其它说明\" class=\"headerlink\" title=\"其它说明\"></a>其它说明</h2><ul>\n<li><p>项目只服务于移动终端，本文的一切测试原则上只涉及<code>Webkit</code>系列的浏览器</p>\n</li>\n<li><p>为了方便快捷地看到效果，后台使用<code>Ruby</code>语言的轻量级框架<code>Sinatra</code></p>\n</li>\n<li><p>使用<code>127.0.0.1</code>访问<code>localhost</code>模拟跨域图片请求</p>\n</li>\n</ul>\n<h2 id=\"项目文件\"><a href=\"#项目文件\" class=\"headerlink\" title=\"项目文件\"></a>项目文件</h2><ul>\n<li><p>前端测试主页面 <code>test.html</code></p>\n</li>\n<li><p>后台请求处理文件 <code>myapp.rb</code></p>\n</li>\n<li><p>一张测试图片 <code>london.jpg</code>，大小47714B</p>\n</li>\n</ul>\n<h2 id=\"代码预览\"><a href=\"#代码预览\" class=\"headerlink\" title=\"代码预览\"></a>代码预览</h2><h3 id=\"test-html\"><a href=\"#test-html\" class=\"headerlink\" title=\"test.html\"></a>test.html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-CN\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>跨域获取图片的文件大小<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"send\"</span>&gt;</span>Send Ajax Request<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        +function()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            var xhr = new XMLHttpRequest(),</span></span><br><span class=\"line\"><span class=\"undefined\">                host = location.href.indexOf('localhost')&gt;-1?'127.0.0.1':'localhost',</span></span><br><span class=\"line\"><span class=\"undefined\">                url = 'http://' + host + ':4567/img'</span></span><br><span class=\"line\"><span class=\"undefined\">            xhr.onload  = function(e)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                console.log(e)</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            xhr.onerror = function(a)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                console.log(a)</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            var send = document.getElementById('send')</span></span><br><span class=\"line\"><span class=\"undefined\">            send.addEventListener('click',function()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                xhr.abort()</span></span><br><span class=\"line\"><span class=\"undefined\">                xhr.open('GET', url, true)</span></span><br><span class=\"line\"><span class=\"undefined\">                xhr.send(null)</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;,false)</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;()</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"myapp-rb\"><a href=\"#myapp-rb\" class=\"headerlink\" title=\"myapp.rb\"></a>myapp.rb</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'rubygems'</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'sinatra'</span></span><br><span class=\"line\"></span><br><span class=\"line\">get <span class=\"string\">'/'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    send_file <span class=\"string\">'test.html'</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#跨域请求</span></span><br><span class=\"line\">get <span class=\"string\">'/img'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    send_file <span class=\"string\">'london.jpg'</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"开始工作\"><a href=\"#开始工作\" class=\"headerlink\" title=\"开始工作\"></a>开始工作</h2><p>启动web server以后就开始我们的测试工作了。打开<code>chrome</code>及其<code>控制台</code>，输入 <a href=\"http://localhost:4567/，点击页面中的按钮，不出意外你会在chrome控制台看到下面的错误提示。\" target=\"_blank\" rel=\"noopener\">http://localhost:4567/，点击页面中的按钮，不出意外你会在chrome控制台看到下面的错误提示。</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XMLHttpRequest cannot load http://127.0.0.1:4567/img. Origin http://localhost:4567 is not allowed by Access-Control-Allow-Origin.</span><br></pre></td></tr></table></figure>\n<p>因为我们对跨域访问没有进行任何设置，所以自然无法通过浏览器内在的<code>同源安全机制</code>。</p>\n<h2 id=\"实现跨域访问\"><a href=\"#实现跨域访问\" class=\"headerlink\" title=\"实现跨域访问\"></a>实现跨域访问</h2><p>google如何实现跨域访问，很快找到了一种方法。在网站根目录放置<code>crossdomain.xml</code>的配置文件，就可以完美地实现跨域访问。难怪qq.com和taobao.com都不约而同的配置了这个文件，该文件的格式一般如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">cross-domain-policy</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">allow-access-from</span> <span class=\"attr\">domain</span>=<span class=\"string\">\"*.site.com\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">allow-access-from</span> <span class=\"attr\">domain</span>=<span class=\"string\">\"*.site.net\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">allow-access-from</span> <span class=\"attr\">domain</span>=<span class=\"string\">\"*.sitecdn.com\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">cross-domain-policy</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>经过一番测试，发现这样还是无法实现跨域访问。后来终于知道crossdomain.xml文件是flash跨域专用，而且据说已经被Adobe公司申请为专利。看来这条路是走不通了。</p>\n<p>于是继续google，终于在<a href=\"http://www.w3.org/TR/cors/\" target=\"_blank\" rel=\"noopener\">这里</a>看到了一切关于我们想要的。，可惜<code>w3c</code>的文档总是那么地冗长而乏味，令人望而生畏。比如在介绍这个<code>Access-Control-Allow-Origin</code>的响应头如何设置时，看着这里的介绍是” origin-list-or-null | “<em>“，我以为可以一次性设置多个origin，比如<br>a.com,b.com,c.com。一番折腾之后发现这样设置和没有设置是一样的效果，如果不设置为星号就只能设置一个站点。那我们就暂时设置为”</em>“吧，安全问题稍后再考虑！修改我们的后台代码，加入一个全局的<code>过滤器</code>设置响应头，下面是修改后的myapp.rb文件：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># myapp.rb</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'rubygems'</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'sinatra'</span></span><br><span class=\"line\"></span><br><span class=\"line\">get <span class=\"string\">'/'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    send_file <span class=\"string\">'test.html'</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#跨域请求</span></span><br><span class=\"line\">get <span class=\"string\">'/img'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    send_file <span class=\"string\">'london.jpg'</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">after <span class=\"keyword\">do</span></span><br><span class=\"line\">    headers\\</span><br><span class=\"line\">    <span class=\"string\">'Access-Control-Allow-Origin'</span> =&gt; <span class=\"string\">'*'</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>现在我们重启web server和浏览器，继续输入<a href=\"http://localhost:4567/，点击页面中的按钮发起跨域请求，查看crhome控制台，没有发现错误，请求顺利完成。那就让我们看看`Network`中的跨域访问请求到底多了些什么：\" target=\"_blank\" rel=\"noopener\">http://localhost:4567/，点击页面中的按钮发起跨域请求，查看crhome控制台，没有发现错误，请求顺利完成。那就让我们看看`Network`中的跨域访问请求到底多了些什么：</a></p>\n<ul>\n<li><p>Access-Control-Allow-Origin:*</p>\n</li>\n<li><p>Connection:Keep-Alive</p>\n</li>\n<li><p>Content-Length:47714</p>\n</li>\n<li><p>Content-Type:image/jpeg</p>\n</li>\n<li><p>Date:Fri, 27 Jul 2012 07:11:42 GMT</p>\n</li>\n<li><p>Last-Modified:Fri, 27 Jul 2012 02:52:45 GMT</p>\n</li>\n<li><p>Server:WEBrick/1.3.1 (Ruby/1.8.7/2011-12-28)</p>\n</li>\n<li><p>X-Frame-Options:sameorigin</p>\n</li>\n<li><p>X-Xss-Protection:1; mode=block</p>\n</li>\n</ul>\n<p>果然我们设置的响应头<code>Access-Control-Allow-Origin</code>生效了，太神奇了！通过服务器和浏览器的协作，我们轻松地实现了跨域访问。现在看来W3C搞的这些跨域访问控制的标准还是比较靠谱的啊，如果说有什么缺点，那就是设置多个站点的时候麻烦了点（比如qq.com需要配置跨域访问控制的话），其它的缺点一时我还真说不出来。</p>\n<h2 id=\"读取图片的文件大小\"><a href=\"#读取图片的文件大小\" class=\"headerlink\" title=\"读取图片的文件大小\"></a>读取图片的文件大小</h2><p>目前为止，我们算是成功地实现了跨域请求，但是离我们的目标还差一点。我们还需要知道这个图片的文件大小，从之前服务器输出的响应头来看，应该就是<code>Content-Length</code>这个响应头了。那就修改下我们的页面代码，获取这个响应头吧：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-CN\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>跨域获取图片的文件大小<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"send\"</span>&gt;</span>Send Ajax Request<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">            +function()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                var xhr = new XMLHttpRequest(),</span></span><br><span class=\"line\"><span class=\"undefined\">                    host = location.href.indexOf('localhost')&gt;-1?'127.0.0.1':'localhost',</span></span><br><span class=\"line\"><span class=\"undefined\">                    url = 'http://' + host + ':4567/img'</span></span><br><span class=\"line\"><span class=\"undefined\">                xhr.onload  = function(e)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    console.log(this.getResponseHeader('Content-Length'))</span></span><br><span class=\"line\"><span class=\"undefined\">                    console.log(this.responseText.length)</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">                xhr.onerror = function(a)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    console.log(a)</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">                var send = document.getElementById('send')</span></span><br><span class=\"line\"><span class=\"undefined\">                send.addEventListener('click',function()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    xhr.abort()</span></span><br><span class=\"line\"><span class=\"undefined\">                    xhr.open('GET', url, true)</span></span><br><span class=\"line\"><span class=\"undefined\">                    xhr.send(null)</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;,false)</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;()</span></span><br><span class=\"line\"><span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>刷新页面，打开控制台，点击按钮，一个红色的错误呈现在我们眼前：</p>\n<p><code>Refused to get unsafe header &quot;Content-Length&quot;</code></p>\n<p>怎么样让浏览器服软允许脚本获取这个响应头呢？还是继续去w3c的文档找找吧。很幸运，这个<code>Access-Control-Expose-Headers</code>似乎和我们的需求很匹配啊，不妨在过滤器中加入输出这个响应头来试一试：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># myapp.rb</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'rubygems'</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'sinatra'</span></span><br><span class=\"line\"></span><br><span class=\"line\">get <span class=\"string\">'/'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    send_file <span class=\"string\">'test.html'</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#跨域请求</span></span><br><span class=\"line\">get <span class=\"string\">'/img'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    send_file <span class=\"string\">'london.jpg'</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">after <span class=\"keyword\">do</span></span><br><span class=\"line\">    headers\\</span><br><span class=\"line\">    <span class=\"string\">'Access-Control-Allow-Origin'</span> =&gt; <span class=\"string\">'*'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Access-Control-Expose-Headers'</span> =&gt; <span class=\"string\">'Content-Length'</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>重启web server，刷新页面，打开chrome控制台，点击按钮。没有任何错误，顺利输出两个数值：47714，45926。看来已经能够顺利的获取到Content-Length响应头，而且数值也很准确，和文件大小一致。但是这个<code>responseText</code>为什么少了接近2KB呢？还请高人解答。</p>\n<p>一切都很顺利，不过虽然只针对webkit系浏览器，至少也得测试下safari吧。打开safari及其控制台，输入url，点击按钮，居然抛出了和之前未设置<code>Access-Control-Expose-Headers</code>时一样的错误：</p>\n<p><code>Refused to get unsafe header &quot;Content-Length&quot;</code></p>\n<p>是不是浏览器缓存的问题呢？重启浏览器再测试，问题依旧。看来这应该就是safari的bug了。既然safari不支持，那就意味着我们前端脚本无法使用<code>getResponseHeader</code>了，那问题该如何解决呢？让我们再看看w3c上关于<code>XMLHttpRequest Level 2</code>的实现还有属性和函数我们可能用得上，继续找啊…终于发现XMLHttpRequest Level 2有一个<a href=\"http://www.w3.org/TR/XMLHttpRequest2/#handler-xhr-onprogress\" target=\"_blank\" rel=\"noopener\">onprogress</a>事件和<a href=\"http://dvcs.w3.org/hg/progress/raw-file/tip/Overview.html#progressevent\" target=\"_blank\" rel=\"noopener\">ProgressEvent</a>对象，于是修改我们的页面代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-CN\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>跨域获取图片的文件大小<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"send\"</span>&gt;</span>Send Ajax Request<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    +function()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        var xhr = new XMLHttpRequest(),</span></span><br><span class=\"line\"><span class=\"undefined\">            host = location.href.indexOf('localhost')&gt;-1?'127.0.0.1':'localhost',</span></span><br><span class=\"line\"><span class=\"undefined\">            url = 'http://' + host + ':4567/img'</span></span><br><span class=\"line\"><span class=\"undefined\">        xhr.onprogress  = function(e)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            if(e.lengthComputable)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                if(e.loaded/e.total == 1)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    //invoke onload</span></span><br><span class=\"line\"><span class=\"undefined\">                    console.log(e.total)</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        xhr.onerror = function(a)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            console.log(a)</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        var send = document.getElementById('send')</span></span><br><span class=\"line\"><span class=\"undefined\">        send.addEventListener('click',function()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            xhr.abort()</span></span><br><span class=\"line\"><span class=\"undefined\">            xhr.open('GET', url, true)</span></span><br><span class=\"line\"><span class=\"undefined\">            xhr.send(null)</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,false)</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;()</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>细心的同学可能会问为什么不在<code>onload</code>中执行相关操作，其实经我测试发现onload之后<code>e.total</code>和<code>e.loaded</code>已经被设置为0，虽然<code>responseText</code>依然可读，但是这与真实的文件大小有一点的误差。</p>\n<h2 id=\"最后的完善\"><a href=\"#最后的完善\" class=\"headerlink\" title=\"最后的完善\"></a>最后的完善</h2><p>虽然我们的目标已经完成，但是我们的工作还没有结束。因为服务端存在一个严重的<code>安全隐患</code>。我们草率地将<code>Access-Control-Allow-Origin</code>设置为”＊“，不可避免地为一些黑客攻击创造了便利条件。</p>\n<p>其实，既然我们的跨域访问只开放给部分信任的站点，那么我们只需要在后台的过滤器中判断请求来源是否属于白名单之中，如果存在则输出Access-Control-Allow-Origin响应头，内容为该站点域名。至于这个白名单的设计，可以参考<code>Apache</code>（之前一直误以为Apache的做法是业界的标准）。</p>\n<p>另外跨域访问控制一般针对的是Ajax请求，所以我们还可以在过滤器中加入一个是否是Ajax请求的判断(服务端判断请求头中是否包含<code>X-Requested-With</code>:<code>XMLHttpRequest</code>)，避免为普通的请求也加入<code>Access-Control-Allow-Origin</code>这个响应头。</p>\n<p>最后由于各浏览器对<code>Access-Control-Expose-Headers</code>的实现并不完善，所以这个响应头就显得异常鸡肋。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>项目需求:对一个照片列表页面的每张图片在前端进行下载耗时统计，并定期上报。</p>\n<h2 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h2><p>使用<code>XMLHttpRequest</code>下载图片，实现下载耗时统计。上报功能则一次上报<code>localStorage</code>存储的多张图片的统计信息，这里不做讨论</p>\n<h2 id=\"问题难点\"><a href=\"#问题难点\" class=\"headerlink\" title=\"问题难点\"></a>问题难点</h2><p>使用<code>XMLHttpRequest</code>需要跨域访问图片服务器</p>\n<h2 id=\"其它说明\"><a href=\"#其它说明\" class=\"headerlink\" title=\"其它说明\"></a>其它说明</h2><ul>\n<li><p>项目只服务于移动终端，本文的一切测试原则上只涉及<code>Webkit</code>系列的浏览器</p>\n</li>\n<li><p>为了方便快捷地看到效果，后台使用<code>Ruby</code>语言的轻量级框架<code>Sinatra</code></p>\n</li>\n<li><p>使用<code>127.0.0.1</code>访问<code>localhost</code>模拟跨域图片请求</p>\n</li>\n</ul>\n<h2 id=\"项目文件\"><a href=\"#项目文件\" class=\"headerlink\" title=\"项目文件\"></a>项目文件</h2><ul>\n<li><p>前端测试主页面 <code>test.html</code></p>\n</li>\n<li><p>后台请求处理文件 <code>myapp.rb</code></p>\n</li>\n<li><p>一张测试图片 <code>london.jpg</code>，大小47714B</p>\n</li>\n</ul>\n<h2 id=\"代码预览\"><a href=\"#代码预览\" class=\"headerlink\" title=\"代码预览\"></a>代码预览</h2><h3 id=\"test-html\"><a href=\"#test-html\" class=\"headerlink\" title=\"test.html\"></a>test.html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-CN\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>跨域获取图片的文件大小<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"send\"</span>&gt;</span>Send Ajax Request<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        +function()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            var xhr = new XMLHttpRequest(),</span></span><br><span class=\"line\"><span class=\"undefined\">                host = location.href.indexOf('localhost')&gt;-1?'127.0.0.1':'localhost',</span></span><br><span class=\"line\"><span class=\"undefined\">                url = 'http://' + host + ':4567/img'</span></span><br><span class=\"line\"><span class=\"undefined\">            xhr.onload  = function(e)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                console.log(e)</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            xhr.onerror = function(a)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                console.log(a)</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            var send = document.getElementById('send')</span></span><br><span class=\"line\"><span class=\"undefined\">            send.addEventListener('click',function()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                xhr.abort()</span></span><br><span class=\"line\"><span class=\"undefined\">                xhr.open('GET', url, true)</span></span><br><span class=\"line\"><span class=\"undefined\">                xhr.send(null)</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;,false)</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;()</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"myapp-rb\"><a href=\"#myapp-rb\" class=\"headerlink\" title=\"myapp.rb\"></a>myapp.rb</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'rubygems'</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'sinatra'</span></span><br><span class=\"line\"></span><br><span class=\"line\">get <span class=\"string\">'/'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    send_file <span class=\"string\">'test.html'</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#跨域请求</span></span><br><span class=\"line\">get <span class=\"string\">'/img'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    send_file <span class=\"string\">'london.jpg'</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"开始工作\"><a href=\"#开始工作\" class=\"headerlink\" title=\"开始工作\"></a>开始工作</h2><p>启动web server以后就开始我们的测试工作了。打开<code>chrome</code>及其<code>控制台</code>，输入 <a href=\"http://localhost:4567/，点击页面中的按钮，不出意外你会在chrome控制台看到下面的错误提示。\" target=\"_blank\" rel=\"noopener\">http://localhost:4567/，点击页面中的按钮，不出意外你会在chrome控制台看到下面的错误提示。</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XMLHttpRequest cannot load http://127.0.0.1:4567/img. Origin http://localhost:4567 is not allowed by Access-Control-Allow-Origin.</span><br></pre></td></tr></table></figure>\n<p>因为我们对跨域访问没有进行任何设置，所以自然无法通过浏览器内在的<code>同源安全机制</code>。</p>\n<h2 id=\"实现跨域访问\"><a href=\"#实现跨域访问\" class=\"headerlink\" title=\"实现跨域访问\"></a>实现跨域访问</h2><p>google如何实现跨域访问，很快找到了一种方法。在网站根目录放置<code>crossdomain.xml</code>的配置文件，就可以完美地实现跨域访问。难怪qq.com和taobao.com都不约而同的配置了这个文件，该文件的格式一般如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">cross-domain-policy</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">allow-access-from</span> <span class=\"attr\">domain</span>=<span class=\"string\">\"*.site.com\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">allow-access-from</span> <span class=\"attr\">domain</span>=<span class=\"string\">\"*.site.net\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">allow-access-from</span> <span class=\"attr\">domain</span>=<span class=\"string\">\"*.sitecdn.com\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">cross-domain-policy</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>经过一番测试，发现这样还是无法实现跨域访问。后来终于知道crossdomain.xml文件是flash跨域专用，而且据说已经被Adobe公司申请为专利。看来这条路是走不通了。</p>\n<p>于是继续google，终于在<a href=\"http://www.w3.org/TR/cors/\" target=\"_blank\" rel=\"noopener\">这里</a>看到了一切关于我们想要的。，可惜<code>w3c</code>的文档总是那么地冗长而乏味，令人望而生畏。比如在介绍这个<code>Access-Control-Allow-Origin</code>的响应头如何设置时，看着这里的介绍是” origin-list-or-null | “<em>“，我以为可以一次性设置多个origin，比如<br>a.com,b.com,c.com。一番折腾之后发现这样设置和没有设置是一样的效果，如果不设置为星号就只能设置一个站点。那我们就暂时设置为”</em>“吧，安全问题稍后再考虑！修改我们的后台代码，加入一个全局的<code>过滤器</code>设置响应头，下面是修改后的myapp.rb文件：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># myapp.rb</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'rubygems'</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'sinatra'</span></span><br><span class=\"line\"></span><br><span class=\"line\">get <span class=\"string\">'/'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    send_file <span class=\"string\">'test.html'</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#跨域请求</span></span><br><span class=\"line\">get <span class=\"string\">'/img'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    send_file <span class=\"string\">'london.jpg'</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">after <span class=\"keyword\">do</span></span><br><span class=\"line\">    headers\\</span><br><span class=\"line\">    <span class=\"string\">'Access-Control-Allow-Origin'</span> =&gt; <span class=\"string\">'*'</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>现在我们重启web server和浏览器，继续输入<a href=\"http://localhost:4567/，点击页面中的按钮发起跨域请求，查看crhome控制台，没有发现错误，请求顺利完成。那就让我们看看`Network`中的跨域访问请求到底多了些什么：\" target=\"_blank\" rel=\"noopener\">http://localhost:4567/，点击页面中的按钮发起跨域请求，查看crhome控制台，没有发现错误，请求顺利完成。那就让我们看看`Network`中的跨域访问请求到底多了些什么：</a></p>\n<ul>\n<li><p>Access-Control-Allow-Origin:*</p>\n</li>\n<li><p>Connection:Keep-Alive</p>\n</li>\n<li><p>Content-Length:47714</p>\n</li>\n<li><p>Content-Type:image/jpeg</p>\n</li>\n<li><p>Date:Fri, 27 Jul 2012 07:11:42 GMT</p>\n</li>\n<li><p>Last-Modified:Fri, 27 Jul 2012 02:52:45 GMT</p>\n</li>\n<li><p>Server:WEBrick/1.3.1 (Ruby/1.8.7/2011-12-28)</p>\n</li>\n<li><p>X-Frame-Options:sameorigin</p>\n</li>\n<li><p>X-Xss-Protection:1; mode=block</p>\n</li>\n</ul>\n<p>果然我们设置的响应头<code>Access-Control-Allow-Origin</code>生效了，太神奇了！通过服务器和浏览器的协作，我们轻松地实现了跨域访问。现在看来W3C搞的这些跨域访问控制的标准还是比较靠谱的啊，如果说有什么缺点，那就是设置多个站点的时候麻烦了点（比如qq.com需要配置跨域访问控制的话），其它的缺点一时我还真说不出来。</p>\n<h2 id=\"读取图片的文件大小\"><a href=\"#读取图片的文件大小\" class=\"headerlink\" title=\"读取图片的文件大小\"></a>读取图片的文件大小</h2><p>目前为止，我们算是成功地实现了跨域请求，但是离我们的目标还差一点。我们还需要知道这个图片的文件大小，从之前服务器输出的响应头来看，应该就是<code>Content-Length</code>这个响应头了。那就修改下我们的页面代码，获取这个响应头吧：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-CN\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>跨域获取图片的文件大小<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"send\"</span>&gt;</span>Send Ajax Request<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">            +function()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                var xhr = new XMLHttpRequest(),</span></span><br><span class=\"line\"><span class=\"undefined\">                    host = location.href.indexOf('localhost')&gt;-1?'127.0.0.1':'localhost',</span></span><br><span class=\"line\"><span class=\"undefined\">                    url = 'http://' + host + ':4567/img'</span></span><br><span class=\"line\"><span class=\"undefined\">                xhr.onload  = function(e)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    console.log(this.getResponseHeader('Content-Length'))</span></span><br><span class=\"line\"><span class=\"undefined\">                    console.log(this.responseText.length)</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">                xhr.onerror = function(a)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    console.log(a)</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">                var send = document.getElementById('send')</span></span><br><span class=\"line\"><span class=\"undefined\">                send.addEventListener('click',function()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    xhr.abort()</span></span><br><span class=\"line\"><span class=\"undefined\">                    xhr.open('GET', url, true)</span></span><br><span class=\"line\"><span class=\"undefined\">                    xhr.send(null)</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;,false)</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;()</span></span><br><span class=\"line\"><span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>刷新页面，打开控制台，点击按钮，一个红色的错误呈现在我们眼前：</p>\n<p><code>Refused to get unsafe header &quot;Content-Length&quot;</code></p>\n<p>怎么样让浏览器服软允许脚本获取这个响应头呢？还是继续去w3c的文档找找吧。很幸运，这个<code>Access-Control-Expose-Headers</code>似乎和我们的需求很匹配啊，不妨在过滤器中加入输出这个响应头来试一试：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># myapp.rb</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'rubygems'</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'sinatra'</span></span><br><span class=\"line\"></span><br><span class=\"line\">get <span class=\"string\">'/'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    send_file <span class=\"string\">'test.html'</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#跨域请求</span></span><br><span class=\"line\">get <span class=\"string\">'/img'</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    send_file <span class=\"string\">'london.jpg'</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">after <span class=\"keyword\">do</span></span><br><span class=\"line\">    headers\\</span><br><span class=\"line\">    <span class=\"string\">'Access-Control-Allow-Origin'</span> =&gt; <span class=\"string\">'*'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Access-Control-Expose-Headers'</span> =&gt; <span class=\"string\">'Content-Length'</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>重启web server，刷新页面，打开chrome控制台，点击按钮。没有任何错误，顺利输出两个数值：47714，45926。看来已经能够顺利的获取到Content-Length响应头，而且数值也很准确，和文件大小一致。但是这个<code>responseText</code>为什么少了接近2KB呢？还请高人解答。</p>\n<p>一切都很顺利，不过虽然只针对webkit系浏览器，至少也得测试下safari吧。打开safari及其控制台，输入url，点击按钮，居然抛出了和之前未设置<code>Access-Control-Expose-Headers</code>时一样的错误：</p>\n<p><code>Refused to get unsafe header &quot;Content-Length&quot;</code></p>\n<p>是不是浏览器缓存的问题呢？重启浏览器再测试，问题依旧。看来这应该就是safari的bug了。既然safari不支持，那就意味着我们前端脚本无法使用<code>getResponseHeader</code>了，那问题该如何解决呢？让我们再看看w3c上关于<code>XMLHttpRequest Level 2</code>的实现还有属性和函数我们可能用得上，继续找啊…终于发现XMLHttpRequest Level 2有一个<a href=\"http://www.w3.org/TR/XMLHttpRequest2/#handler-xhr-onprogress\" target=\"_blank\" rel=\"noopener\">onprogress</a>事件和<a href=\"http://dvcs.w3.org/hg/progress/raw-file/tip/Overview.html#progressevent\" target=\"_blank\" rel=\"noopener\">ProgressEvent</a>对象，于是修改我们的页面代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-CN\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>跨域获取图片的文件大小<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"send\"</span>&gt;</span>Send Ajax Request<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    +function()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        var xhr = new XMLHttpRequest(),</span></span><br><span class=\"line\"><span class=\"undefined\">            host = location.href.indexOf('localhost')&gt;-1?'127.0.0.1':'localhost',</span></span><br><span class=\"line\"><span class=\"undefined\">            url = 'http://' + host + ':4567/img'</span></span><br><span class=\"line\"><span class=\"undefined\">        xhr.onprogress  = function(e)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            if(e.lengthComputable)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                if(e.loaded/e.total == 1)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    //invoke onload</span></span><br><span class=\"line\"><span class=\"undefined\">                    console.log(e.total)</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        xhr.onerror = function(a)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            console.log(a)</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        var send = document.getElementById('send')</span></span><br><span class=\"line\"><span class=\"undefined\">        send.addEventListener('click',function()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            xhr.abort()</span></span><br><span class=\"line\"><span class=\"undefined\">            xhr.open('GET', url, true)</span></span><br><span class=\"line\"><span class=\"undefined\">            xhr.send(null)</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,false)</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;()</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>细心的同学可能会问为什么不在<code>onload</code>中执行相关操作，其实经我测试发现onload之后<code>e.total</code>和<code>e.loaded</code>已经被设置为0，虽然<code>responseText</code>依然可读，但是这与真实的文件大小有一点的误差。</p>\n<h2 id=\"最后的完善\"><a href=\"#最后的完善\" class=\"headerlink\" title=\"最后的完善\"></a>最后的完善</h2><p>虽然我们的目标已经完成，但是我们的工作还没有结束。因为服务端存在一个严重的<code>安全隐患</code>。我们草率地将<code>Access-Control-Allow-Origin</code>设置为”＊“，不可避免地为一些黑客攻击创造了便利条件。</p>\n<p>其实，既然我们的跨域访问只开放给部分信任的站点，那么我们只需要在后台的过滤器中判断请求来源是否属于白名单之中，如果存在则输出Access-Control-Allow-Origin响应头，内容为该站点域名。至于这个白名单的设计，可以参考<code>Apache</code>（之前一直误以为Apache的做法是业界的标准）。</p>\n<p>另外跨域访问控制一般针对的是Ajax请求，所以我们还可以在过滤器中加入一个是否是Ajax请求的判断(服务端判断请求头中是否包含<code>X-Requested-With</code>:<code>XMLHttpRequest</code>)，避免为普通的请求也加入<code>Access-Control-Allow-Origin</code>这个响应头。</p>\n<p>最后由于各浏览器对<code>Access-Control-Expose-Headers</code>的实现并不完善，所以这个响应头就显得异常鸡肋。</p>\n"},{"title":"Ajax编码问题","date":"2012-11-10T16:00:00.000Z","_content":"\n前些天看到一个关于Ajax编码的问题，当时被提问者的描述绕的都想不清楚，今天闲来没事就整理下。原文地址在[这里](http://segmentfault.com/q/1010000000130593)。\n\n## 问题描述\n\n我的前端页面为GBK，所以待发送的数据肯定也为GBK，而由ajax的特性其在发送前其会被自动转换为utf-8\n所以后台接收到的数据为utf-8的\n然后我的后台页面编码为UTF-8，同时设置了response header中的编码参数也为UTF-8，那么前端收到的数据应该也是UTF-8\n但前端页面为GBK，理论上来说这样会产生乱码，可是并没有，这是为什么呢？\n\n提问者的描述有点混乱，而且各种绕，一不小心就会踩到提问者设的坑。\n\n## 如何解决\n\n彻底解决这个问题你首先需要了解以下几个知识点：\n\n> * 页面表单提交到后台的数据编码与页面编码一致\n> * 通过javascript提交到后台的数据都会被转换为utf-8格式\n\n所以原则上这样理解，这个问题就差不多了：\n\n\t输入编码为UTF-8，后台以UTF-8方式输出，保证输入和输出一致那么自然就没有乱码问题。\n\n要让别人相信自己，首先得自己相信自己，我们先不妨来几个测试。另外问题描述既然提到了后台的文本编码，我们也需要重点测试一下。\n\n## 测试工作\n\n准备以下页面：\n\n* 主页面index.php\n* ajax后台页面utf8.php\n* ajax后台页面gbk.php\n\n### 主页面 index.php，文本编码gbk\n\n```html\n\t<!doctype html>\n\t<html>\n\t\t<head>\n\t\t\t<meta charset=\"gbk\"/>\n\t\t\t<script src=\"http://s.segmentfault.com/js/jquery.js?12.11.5.1\"></script>\n\t\t</head>\n\t\t<body>\n\t\t\t<button type=\"button\" onclick=\"ajax_send('utf8')\">JS提交(utf-8)</button>\n\t\t\t<button type=\"button\" onclick=\"ajax_send('gbk')\">JS提交(gbk)</button>\n\t\t\t<script type=\"text/javascript\">\n\t\t\t\tvar ajax_send = function(encoding){\n\t\t\t\t\tvar xhr = new XMLHttpRequest(), params = encodeURI('t=编码')\n\t\t\t\t\txhr.onreadystatechange = function(){\n\t\t\t\t\t\tif(this.readyState == 4 && this.status ==200)\n\t\t\t\t\t\t\talert(this.responseText)\n\t\t\t\t\t}\n\t\t\t\t\txhr.open('POST',encoding + '.php',true)\n\t\t\t\t\txhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n\t\t\t\t\txhr.send(params)\n\t\t\t\t}\n\t\t\t</script>\n\t\t</body>\n```\n\n### utf8.php，文本编码utf-8\n\n```php\n\t<?php\n\theader('content-type:text/html;charset=utf-8');\n\techo $_POST['t'];\n\t?>\n```\n\n### gbk.php，与utf8.php内容相同，区别就是文本编码为gbk\n\n```php\n\t<?php\n\theader('content-type:text/html;charset=utf-8');\n\techo $_POST['t'];\n\t?>\n```\n\n启动Web Server，打开页面，分别点击按钮，都正确的弹出了“编码”二字，没有发现乱码现象。\n\n## 结论\n\n对于页面通过JS提交的数据：\n\n> * 后台接口，只要保证输入输出的编码一致，提交的数据就会有乱码产生\n> * 后台文件的文本编码以及前端页面的编码不会导致提交的数据返回时乱码，只要输入输出编码一致\n\n对于以上两个结论，读者还可以这样测试。\n\n```php\n\t<?php\n\theader('content-type:text/html;charset=gbk');\n\techo iconv(\"utf-8\",\"gbk\",$_POST['t']);\n\t?>\n```\n\n先将输入转码为gbk，然后输出同时设置为页面编码，这样也不会有乱码产生，但是服务端多了一道转码处理，效率不及直接输出utf-8。\n\n对于后台附加的一些输出，比如在gbk.php中最后加一行\n\n```php\n\techo \"中文\";\n```\n\n这种情况会不会导致乱码呢？读者可以自己测试一下。\n\n## 深入\n\n稍微搞过前端的人都知道，使用script标签引入脚本的时候，有一个属性是charset用于指定脚本文件的编码。当页面编码与引入脚本的文本编码不一致的时候需要显式指定，否则就会容易造成乱码。\n\n现在我们仔细对比这两种场景的处理方式，不就是一模一样吗？只要保证输入输出的编码一致即可。唯一的区别就是一个是静态资源，一个是动态接口。\n\n你有可能会问，当输入输出指定的编码不一致时是不是就一定是乱码呢，浏览器又该如何解析呢？\n\n这个时候你就该来[这里](http://ued.taobao.com/blog/2011/08/26/encode-war/)看看了。\n\n光棍节写博客，看来我是真光棍，真屌丝。\n","source":"_posts/Ajax-Encoding.md","raw":"---\ntitle: Ajax编码问题\ndate: 2012-11-11\ntags: JavaScript\n---\n\n前些天看到一个关于Ajax编码的问题，当时被提问者的描述绕的都想不清楚，今天闲来没事就整理下。原文地址在[这里](http://segmentfault.com/q/1010000000130593)。\n\n## 问题描述\n\n我的前端页面为GBK，所以待发送的数据肯定也为GBK，而由ajax的特性其在发送前其会被自动转换为utf-8\n所以后台接收到的数据为utf-8的\n然后我的后台页面编码为UTF-8，同时设置了response header中的编码参数也为UTF-8，那么前端收到的数据应该也是UTF-8\n但前端页面为GBK，理论上来说这样会产生乱码，可是并没有，这是为什么呢？\n\n提问者的描述有点混乱，而且各种绕，一不小心就会踩到提问者设的坑。\n\n## 如何解决\n\n彻底解决这个问题你首先需要了解以下几个知识点：\n\n> * 页面表单提交到后台的数据编码与页面编码一致\n> * 通过javascript提交到后台的数据都会被转换为utf-8格式\n\n所以原则上这样理解，这个问题就差不多了：\n\n\t输入编码为UTF-8，后台以UTF-8方式输出，保证输入和输出一致那么自然就没有乱码问题。\n\n要让别人相信自己，首先得自己相信自己，我们先不妨来几个测试。另外问题描述既然提到了后台的文本编码，我们也需要重点测试一下。\n\n## 测试工作\n\n准备以下页面：\n\n* 主页面index.php\n* ajax后台页面utf8.php\n* ajax后台页面gbk.php\n\n### 主页面 index.php，文本编码gbk\n\n```html\n\t<!doctype html>\n\t<html>\n\t\t<head>\n\t\t\t<meta charset=\"gbk\"/>\n\t\t\t<script src=\"http://s.segmentfault.com/js/jquery.js?12.11.5.1\"></script>\n\t\t</head>\n\t\t<body>\n\t\t\t<button type=\"button\" onclick=\"ajax_send('utf8')\">JS提交(utf-8)</button>\n\t\t\t<button type=\"button\" onclick=\"ajax_send('gbk')\">JS提交(gbk)</button>\n\t\t\t<script type=\"text/javascript\">\n\t\t\t\tvar ajax_send = function(encoding){\n\t\t\t\t\tvar xhr = new XMLHttpRequest(), params = encodeURI('t=编码')\n\t\t\t\t\txhr.onreadystatechange = function(){\n\t\t\t\t\t\tif(this.readyState == 4 && this.status ==200)\n\t\t\t\t\t\t\talert(this.responseText)\n\t\t\t\t\t}\n\t\t\t\t\txhr.open('POST',encoding + '.php',true)\n\t\t\t\t\txhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n\t\t\t\t\txhr.send(params)\n\t\t\t\t}\n\t\t\t</script>\n\t\t</body>\n```\n\n### utf8.php，文本编码utf-8\n\n```php\n\t<?php\n\theader('content-type:text/html;charset=utf-8');\n\techo $_POST['t'];\n\t?>\n```\n\n### gbk.php，与utf8.php内容相同，区别就是文本编码为gbk\n\n```php\n\t<?php\n\theader('content-type:text/html;charset=utf-8');\n\techo $_POST['t'];\n\t?>\n```\n\n启动Web Server，打开页面，分别点击按钮，都正确的弹出了“编码”二字，没有发现乱码现象。\n\n## 结论\n\n对于页面通过JS提交的数据：\n\n> * 后台接口，只要保证输入输出的编码一致，提交的数据就会有乱码产生\n> * 后台文件的文本编码以及前端页面的编码不会导致提交的数据返回时乱码，只要输入输出编码一致\n\n对于以上两个结论，读者还可以这样测试。\n\n```php\n\t<?php\n\theader('content-type:text/html;charset=gbk');\n\techo iconv(\"utf-8\",\"gbk\",$_POST['t']);\n\t?>\n```\n\n先将输入转码为gbk，然后输出同时设置为页面编码，这样也不会有乱码产生，但是服务端多了一道转码处理，效率不及直接输出utf-8。\n\n对于后台附加的一些输出，比如在gbk.php中最后加一行\n\n```php\n\techo \"中文\";\n```\n\n这种情况会不会导致乱码呢？读者可以自己测试一下。\n\n## 深入\n\n稍微搞过前端的人都知道，使用script标签引入脚本的时候，有一个属性是charset用于指定脚本文件的编码。当页面编码与引入脚本的文本编码不一致的时候需要显式指定，否则就会容易造成乱码。\n\n现在我们仔细对比这两种场景的处理方式，不就是一模一样吗？只要保证输入输出的编码一致即可。唯一的区别就是一个是静态资源，一个是动态接口。\n\n你有可能会问，当输入输出指定的编码不一致时是不是就一定是乱码呢，浏览器又该如何解析呢？\n\n这个时候你就该来[这里](http://ued.taobao.com/blog/2011/08/26/encode-war/)看看了。\n\n光棍节写博客，看来我是真光棍，真屌丝。\n","slug":"Ajax-Encoding","published":1,"updated":"2017-12-22T08:18:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbhnlun500017i95b407evv4","content":"<p>前些天看到一个关于Ajax编码的问题，当时被提问者的描述绕的都想不清楚，今天闲来没事就整理下。原文地址在<a href=\"http://segmentfault.com/q/1010000000130593\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>我的前端页面为GBK，所以待发送的数据肯定也为GBK，而由ajax的特性其在发送前其会被自动转换为utf-8<br>所以后台接收到的数据为utf-8的<br>然后我的后台页面编码为UTF-8，同时设置了response header中的编码参数也为UTF-8，那么前端收到的数据应该也是UTF-8<br>但前端页面为GBK，理论上来说这样会产生乱码，可是并没有，这是为什么呢？</p>\n<p>提问者的描述有点混乱，而且各种绕，一不小心就会踩到提问者设的坑。</p>\n<h2 id=\"如何解决\"><a href=\"#如何解决\" class=\"headerlink\" title=\"如何解决\"></a>如何解决</h2><p>彻底解决这个问题你首先需要了解以下几个知识点：</p>\n<blockquote>\n<ul>\n<li>页面表单提交到后台的数据编码与页面编码一致</li>\n<li>通过javascript提交到后台的数据都会被转换为utf-8格式</li>\n</ul>\n</blockquote>\n<p>所以原则上这样理解，这个问题就差不多了：</p>\n<pre><code>输入编码为UTF-8，后台以UTF-8方式输出，保证输入和输出一致那么自然就没有乱码问题。\n</code></pre><p>要让别人相信自己，首先得自己相信自己，我们先不妨来几个测试。另外问题描述既然提到了后台的文本编码，我们也需要重点测试一下。</p>\n<h2 id=\"测试工作\"><a href=\"#测试工作\" class=\"headerlink\" title=\"测试工作\"></a>测试工作</h2><p>准备以下页面：</p>\n<ul>\n<li>主页面index.php</li>\n<li>ajax后台页面utf8.php</li>\n<li>ajax后台页面gbk.php</li>\n</ul>\n<h3 id=\"主页面-index-php，文本编码gbk\"><a href=\"#主页面-index-php，文本编码gbk\" class=\"headerlink\" title=\"主页面 index.php，文本编码gbk\"></a>主页面 index.php，文本编码gbk</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"gbk\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://s.segmentfault.com/js/jquery.js?12.11.5.1\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"ajax_send('utf8')\"</span>&gt;</span>JS提交(utf-8)<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"ajax_send('gbk')\"</span>&gt;</span>JS提交(gbk)<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tvar ajax_send = function(encoding)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\tvar xhr = new XMLHttpRequest(), params = encodeURI('t=编码')</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\txhr.onreadystatechange = function()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\t\tif(this.readyState == 4 &amp;&amp; this.status ==200)</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\t\t\talert(this.responseText)</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\txhr.open('POST',encoding + '.php',true)</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\txhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\txhr.send(params)</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"utf8-php，文本编码utf-8\"><a href=\"#utf8-php，文本编码utf-8\" class=\"headerlink\" title=\"utf8.php，文本编码utf-8\"></a>utf8.php，文本编码utf-8</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">header(<span class=\"string\">'content-type:text/html;charset=utf-8'</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $_POST[<span class=\"string\">'t'</span>];</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"gbk-php，与utf8-php内容相同，区别就是文本编码为gbk\"><a href=\"#gbk-php，与utf8-php内容相同，区别就是文本编码为gbk\" class=\"headerlink\" title=\"gbk.php，与utf8.php内容相同，区别就是文本编码为gbk\"></a>gbk.php，与utf8.php内容相同，区别就是文本编码为gbk</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">header(<span class=\"string\">'content-type:text/html;charset=utf-8'</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $_POST[<span class=\"string\">'t'</span>];</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>启动Web Server，打开页面，分别点击按钮，都正确的弹出了“编码”二字，没有发现乱码现象。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>对于页面通过JS提交的数据：</p>\n<blockquote>\n<ul>\n<li>后台接口，只要保证输入输出的编码一致，提交的数据就会有乱码产生</li>\n<li>后台文件的文本编码以及前端页面的编码不会导致提交的数据返回时乱码，只要输入输出编码一致</li>\n</ul>\n</blockquote>\n<p>对于以上两个结论，读者还可以这样测试。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">header(<span class=\"string\">'content-type:text/html;charset=gbk'</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> iconv(<span class=\"string\">\"utf-8\"</span>,<span class=\"string\">\"gbk\"</span>,$_POST[<span class=\"string\">'t'</span>]);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>先将输入转码为gbk，然后输出同时设置为页面编码，这样也不会有乱码产生，但是服务端多了一道转码处理，效率不及直接输出utf-8。</p>\n<p>对于后台附加的一些输出，比如在gbk.php中最后加一行</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"中文\"</span>;</span><br></pre></td></tr></table></figure>\n<p>这种情况会不会导致乱码呢？读者可以自己测试一下。</p>\n<h2 id=\"深入\"><a href=\"#深入\" class=\"headerlink\" title=\"深入\"></a>深入</h2><p>稍微搞过前端的人都知道，使用script标签引入脚本的时候，有一个属性是charset用于指定脚本文件的编码。当页面编码与引入脚本的文本编码不一致的时候需要显式指定，否则就会容易造成乱码。</p>\n<p>现在我们仔细对比这两种场景的处理方式，不就是一模一样吗？只要保证输入输出的编码一致即可。唯一的区别就是一个是静态资源，一个是动态接口。</p>\n<p>你有可能会问，当输入输出指定的编码不一致时是不是就一定是乱码呢，浏览器又该如何解析呢？</p>\n<p>这个时候你就该来<a href=\"http://ued.taobao.com/blog/2011/08/26/encode-war/\" target=\"_blank\" rel=\"noopener\">这里</a>看看了。</p>\n<p>光棍节写博客，看来我是真光棍，真屌丝。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前些天看到一个关于Ajax编码的问题，当时被提问者的描述绕的都想不清楚，今天闲来没事就整理下。原文地址在<a href=\"http://segmentfault.com/q/1010000000130593\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>我的前端页面为GBK，所以待发送的数据肯定也为GBK，而由ajax的特性其在发送前其会被自动转换为utf-8<br>所以后台接收到的数据为utf-8的<br>然后我的后台页面编码为UTF-8，同时设置了response header中的编码参数也为UTF-8，那么前端收到的数据应该也是UTF-8<br>但前端页面为GBK，理论上来说这样会产生乱码，可是并没有，这是为什么呢？</p>\n<p>提问者的描述有点混乱，而且各种绕，一不小心就会踩到提问者设的坑。</p>\n<h2 id=\"如何解决\"><a href=\"#如何解决\" class=\"headerlink\" title=\"如何解决\"></a>如何解决</h2><p>彻底解决这个问题你首先需要了解以下几个知识点：</p>\n<blockquote>\n<ul>\n<li>页面表单提交到后台的数据编码与页面编码一致</li>\n<li>通过javascript提交到后台的数据都会被转换为utf-8格式</li>\n</ul>\n</blockquote>\n<p>所以原则上这样理解，这个问题就差不多了：</p>\n<pre><code>输入编码为UTF-8，后台以UTF-8方式输出，保证输入和输出一致那么自然就没有乱码问题。\n</code></pre><p>要让别人相信自己，首先得自己相信自己，我们先不妨来几个测试。另外问题描述既然提到了后台的文本编码，我们也需要重点测试一下。</p>\n<h2 id=\"测试工作\"><a href=\"#测试工作\" class=\"headerlink\" title=\"测试工作\"></a>测试工作</h2><p>准备以下页面：</p>\n<ul>\n<li>主页面index.php</li>\n<li>ajax后台页面utf8.php</li>\n<li>ajax后台页面gbk.php</li>\n</ul>\n<h3 id=\"主页面-index-php，文本编码gbk\"><a href=\"#主页面-index-php，文本编码gbk\" class=\"headerlink\" title=\"主页面 index.php，文本编码gbk\"></a>主页面 index.php，文本编码gbk</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"gbk\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://s.segmentfault.com/js/jquery.js?12.11.5.1\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"ajax_send('utf8')\"</span>&gt;</span>JS提交(utf-8)<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"ajax_send('gbk')\"</span>&gt;</span>JS提交(gbk)<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tvar ajax_send = function(encoding)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\tvar xhr = new XMLHttpRequest(), params = encodeURI('t=编码')</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\txhr.onreadystatechange = function()&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\t\tif(this.readyState == 4 &amp;&amp; this.status ==200)</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\t\t\talert(this.responseText)</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\txhr.open('POST',encoding + '.php',true)</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\txhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\txhr.send(params)</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"utf8-php，文本编码utf-8\"><a href=\"#utf8-php，文本编码utf-8\" class=\"headerlink\" title=\"utf8.php，文本编码utf-8\"></a>utf8.php，文本编码utf-8</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">header(<span class=\"string\">'content-type:text/html;charset=utf-8'</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $_POST[<span class=\"string\">'t'</span>];</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"gbk-php，与utf8-php内容相同，区别就是文本编码为gbk\"><a href=\"#gbk-php，与utf8-php内容相同，区别就是文本编码为gbk\" class=\"headerlink\" title=\"gbk.php，与utf8.php内容相同，区别就是文本编码为gbk\"></a>gbk.php，与utf8.php内容相同，区别就是文本编码为gbk</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">header(<span class=\"string\">'content-type:text/html;charset=utf-8'</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $_POST[<span class=\"string\">'t'</span>];</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>启动Web Server，打开页面，分别点击按钮，都正确的弹出了“编码”二字，没有发现乱码现象。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>对于页面通过JS提交的数据：</p>\n<blockquote>\n<ul>\n<li>后台接口，只要保证输入输出的编码一致，提交的数据就会有乱码产生</li>\n<li>后台文件的文本编码以及前端页面的编码不会导致提交的数据返回时乱码，只要输入输出编码一致</li>\n</ul>\n</blockquote>\n<p>对于以上两个结论，读者还可以这样测试。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">header(<span class=\"string\">'content-type:text/html;charset=gbk'</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> iconv(<span class=\"string\">\"utf-8\"</span>,<span class=\"string\">\"gbk\"</span>,$_POST[<span class=\"string\">'t'</span>]);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>先将输入转码为gbk，然后输出同时设置为页面编码，这样也不会有乱码产生，但是服务端多了一道转码处理，效率不及直接输出utf-8。</p>\n<p>对于后台附加的一些输出，比如在gbk.php中最后加一行</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"中文\"</span>;</span><br></pre></td></tr></table></figure>\n<p>这种情况会不会导致乱码呢？读者可以自己测试一下。</p>\n<h2 id=\"深入\"><a href=\"#深入\" class=\"headerlink\" title=\"深入\"></a>深入</h2><p>稍微搞过前端的人都知道，使用script标签引入脚本的时候，有一个属性是charset用于指定脚本文件的编码。当页面编码与引入脚本的文本编码不一致的时候需要显式指定，否则就会容易造成乱码。</p>\n<p>现在我们仔细对比这两种场景的处理方式，不就是一模一样吗？只要保证输入输出的编码一致即可。唯一的区别就是一个是静态资源，一个是动态接口。</p>\n<p>你有可能会问，当输入输出指定的编码不一致时是不是就一定是乱码呢，浏览器又该如何解析呢？</p>\n<p>这个时候你就该来<a href=\"http://ued.taobao.com/blog/2011/08/26/encode-war/\" target=\"_blank\" rel=\"noopener\">这里</a>看看了。</p>\n<p>光棍节写博客，看来我是真光棍，真屌丝。</p>\n"},{"title":"AOP in JavaScript","date":"2012-03-17T16:00:00.000Z","_content":"\n## 基本概念\n\n`面向侧面的程序设计`（aspect-oriented programming，AOP，又译作面向方面的程序设计、观点导向编程）是计算机科学中的一个术语，指一种程序设计范型。\n\n该范型以一种称为侧面（aspect，又译作方面）的语言构造为基础，侧面是一种新的模块化机制，用来描述分散在对象、类或函数中的 `横切关注点` （crosscutting concern）。\n\n\n## 使用目的\n\n需要增强或者修改原有函数的功能，但并不直接修改原函数的内部逻辑。比如为函数添加 `前置` 和 `后置` 操作。\n\n最常见的应用比如计算函数执行的时间、函数执行时的`日志记录`。\n\n## 实际应用\n在系统中有两个函数，func1和func2，func2是func1代码末尾的JSONP（跨域请求）回调。这两个函数内部逻辑相对复杂，代码也较多。\n\nfunc1的执行频率是10秒一次，而客户端与服务器之间的网络并不能保证永远正常连接，除了后端有DNSPOD、反向代理等容灾方案，前端也要做一些容灾工作。\n\n`如何容灾` ？就是在发现连续两次请求失败，就认定主服务器不可用，立刻在前端切换到备用服务器。\n确定好这个思路以后剩下的就是在服务端添加各种配置，然后在前端为原有的func1加入请求超时的统计功能。\n\n超时统计无非就是在func1的开始设置一个变量，func2结束后还原为初始值，如果在指定的超时时间段内发现变量未还原则判定为请求超时。\n\n这段代码与原函数func1和func2均无逻辑关联，所以尽量不直接修改这2个函数的代码，\n加之func1和func2已经相对复杂，若直接修改函数内部代码将导致代码复杂度加倍而且难于维护。\n\n于是乎，AOP就派上用场了！\n\n## 实现代码\n\n```javascript\n\tvar _ = function(id){return document.getElementById(id);};\n\tvar GFRAME = {};\n\tGFRAME.name = 'GFRAME';\n\tGFRAME.func1 = function(x){\n\t    console.log(this.name,x);\n\t}\n\t/**\n\t * @description AOP in JavaScript，不直接修改原函数而增强函数功能。未考虑前置操作的函数返回值的情况\n\t * @param {Object} args {context:执行环境，name:函数名称，start:前置操作，end:后置操作}\n\t **/\n\t_.inject = function(args){\n\t    var origin = args.name,\n\t        context = args.context || window,\n\t        start = args.start || (function(){}),\n\t        end = args.end || (function(){});\n\t    var temp = context[origin];\n\t    if(typeof temp != 'function')\n\t        throw Error(origin + ' is not a function in the given context.');\n\t    if(typeof start != 'function' || typeof end != 'function' )\n\t        throw Error('start and end is not a function in the given context.');\n\t    context[origin] = function(){\n\t        start.apply(this,arguments);\n\t        var ret = temp.apply(this,arguments);\n\t        end.apply(this,arguments);\n\t        return ret;\n\t    };\n\t};\n```\n\n## 使用方法\n\n```javascript\n\t_.inject({\n\t    name:'func1',\n\t    context:GFRAME,\n\t    start:function(x){\n\t        console.log('start',this.name,x);\n\t    },\n\t    end:function(x){\n\t        console.log('end',this.name,x);\n\t    }\n\t});\n\tGFRAME.func1('test');\n```\n\n## 输出结果\n\n```html\n\tstart GFRAME test\n\tGFRAME test\n\tend GFRAME test\n```\n\n## 扩展阅读\n*\t[AOP@维基百科](http://zh.wikipedia.org/wiki/AOP)\n*\t[你相信么，只需一个函数5行JS代码即可在Javascript中实现完整的AOP功能](http://www.cnblogs.com/riceball/archive/2007/09/02/jsInject.html)\n","source":"_posts/AOP-in-JavaScript.md","raw":"---\ntitle: AOP in JavaScript\ndate: 2012-03-18\ntags: JavaScript\n---\n\n## 基本概念\n\n`面向侧面的程序设计`（aspect-oriented programming，AOP，又译作面向方面的程序设计、观点导向编程）是计算机科学中的一个术语，指一种程序设计范型。\n\n该范型以一种称为侧面（aspect，又译作方面）的语言构造为基础，侧面是一种新的模块化机制，用来描述分散在对象、类或函数中的 `横切关注点` （crosscutting concern）。\n\n\n## 使用目的\n\n需要增强或者修改原有函数的功能，但并不直接修改原函数的内部逻辑。比如为函数添加 `前置` 和 `后置` 操作。\n\n最常见的应用比如计算函数执行的时间、函数执行时的`日志记录`。\n\n## 实际应用\n在系统中有两个函数，func1和func2，func2是func1代码末尾的JSONP（跨域请求）回调。这两个函数内部逻辑相对复杂，代码也较多。\n\nfunc1的执行频率是10秒一次，而客户端与服务器之间的网络并不能保证永远正常连接，除了后端有DNSPOD、反向代理等容灾方案，前端也要做一些容灾工作。\n\n`如何容灾` ？就是在发现连续两次请求失败，就认定主服务器不可用，立刻在前端切换到备用服务器。\n确定好这个思路以后剩下的就是在服务端添加各种配置，然后在前端为原有的func1加入请求超时的统计功能。\n\n超时统计无非就是在func1的开始设置一个变量，func2结束后还原为初始值，如果在指定的超时时间段内发现变量未还原则判定为请求超时。\n\n这段代码与原函数func1和func2均无逻辑关联，所以尽量不直接修改这2个函数的代码，\n加之func1和func2已经相对复杂，若直接修改函数内部代码将导致代码复杂度加倍而且难于维护。\n\n于是乎，AOP就派上用场了！\n\n## 实现代码\n\n```javascript\n\tvar _ = function(id){return document.getElementById(id);};\n\tvar GFRAME = {};\n\tGFRAME.name = 'GFRAME';\n\tGFRAME.func1 = function(x){\n\t    console.log(this.name,x);\n\t}\n\t/**\n\t * @description AOP in JavaScript，不直接修改原函数而增强函数功能。未考虑前置操作的函数返回值的情况\n\t * @param {Object} args {context:执行环境，name:函数名称，start:前置操作，end:后置操作}\n\t **/\n\t_.inject = function(args){\n\t    var origin = args.name,\n\t        context = args.context || window,\n\t        start = args.start || (function(){}),\n\t        end = args.end || (function(){});\n\t    var temp = context[origin];\n\t    if(typeof temp != 'function')\n\t        throw Error(origin + ' is not a function in the given context.');\n\t    if(typeof start != 'function' || typeof end != 'function' )\n\t        throw Error('start and end is not a function in the given context.');\n\t    context[origin] = function(){\n\t        start.apply(this,arguments);\n\t        var ret = temp.apply(this,arguments);\n\t        end.apply(this,arguments);\n\t        return ret;\n\t    };\n\t};\n```\n\n## 使用方法\n\n```javascript\n\t_.inject({\n\t    name:'func1',\n\t    context:GFRAME,\n\t    start:function(x){\n\t        console.log('start',this.name,x);\n\t    },\n\t    end:function(x){\n\t        console.log('end',this.name,x);\n\t    }\n\t});\n\tGFRAME.func1('test');\n```\n\n## 输出结果\n\n```html\n\tstart GFRAME test\n\tGFRAME test\n\tend GFRAME test\n```\n\n## 扩展阅读\n*\t[AOP@维基百科](http://zh.wikipedia.org/wiki/AOP)\n*\t[你相信么，只需一个函数5行JS代码即可在Javascript中实现完整的AOP功能](http://www.cnblogs.com/riceball/archive/2007/09/02/jsInject.html)\n","slug":"AOP-in-JavaScript","published":1,"updated":"2017-12-22T08:18:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbhnm6p7000098953bxcaqzk","content":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p><code>面向侧面的程序设计</code>（aspect-oriented programming，AOP，又译作面向方面的程序设计、观点导向编程）是计算机科学中的一个术语，指一种程序设计范型。</p>\n<p>该范型以一种称为侧面（aspect，又译作方面）的语言构造为基础，侧面是一种新的模块化机制，用来描述分散在对象、类或函数中的 <code>横切关注点</code> （crosscutting concern）。</p>\n<h2 id=\"使用目的\"><a href=\"#使用目的\" class=\"headerlink\" title=\"使用目的\"></a>使用目的</h2><p>需要增强或者修改原有函数的功能，但并不直接修改原函数的内部逻辑。比如为函数添加 <code>前置</code> 和 <code>后置</code> 操作。</p>\n<p>最常见的应用比如计算函数执行的时间、函数执行时的<code>日志记录</code>。</p>\n<h2 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h2><p>在系统中有两个函数，func1和func2，func2是func1代码末尾的JSONP（跨域请求）回调。这两个函数内部逻辑相对复杂，代码也较多。</p>\n<p>func1的执行频率是10秒一次，而客户端与服务器之间的网络并不能保证永远正常连接，除了后端有DNSPOD、反向代理等容灾方案，前端也要做一些容灾工作。</p>\n<p><code>如何容灾</code> ？就是在发现连续两次请求失败，就认定主服务器不可用，立刻在前端切换到备用服务器。<br>确定好这个思路以后剩下的就是在服务端添加各种配置，然后在前端为原有的func1加入请求超时的统计功能。</p>\n<p>超时统计无非就是在func1的开始设置一个变量，func2结束后还原为初始值，如果在指定的超时时间段内发现变量未还原则判定为请求超时。</p>\n<p>这段代码与原函数func1和func2均无逻辑关联，所以尽量不直接修改这2个函数的代码，<br>加之func1和func2已经相对复杂，若直接修改函数内部代码将导致代码复杂度加倍而且难于维护。</p>\n<p>于是乎，AOP就派上用场了！</p>\n<h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.getElementById(id);&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> GFRAME = &#123;&#125;;</span><br><span class=\"line\">GFRAME.name = <span class=\"string\">'GFRAME'</span>;</span><br><span class=\"line\">GFRAME.func1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name,x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description AOP in JavaScript，不直接修改原函数而增强函数功能。未考虑前置操作的函数返回值的情况</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; args &#123;context:执行环境，name:函数名称，start:前置操作，end:后置操作&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\">_.inject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> origin = args.name,</span><br><span class=\"line\">        context = args.context || <span class=\"built_in\">window</span>,</span><br><span class=\"line\">        start = args.start || (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;),</span><br><span class=\"line\">        end = args.end || (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = context[origin];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> temp != <span class=\"string\">'function'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(origin + <span class=\"string\">' is not a function in the given context.'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> start != <span class=\"string\">'function'</span> || <span class=\"keyword\">typeof</span> end != <span class=\"string\">'function'</span> )</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'start and end is not a function in the given context.'</span>);</span><br><span class=\"line\">    context[origin] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        start.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ret = temp.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        end.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.inject(&#123;</span><br><span class=\"line\">    name:<span class=\"string\">'func1'</span>,</span><br><span class=\"line\">    context:GFRAME,</span><br><span class=\"line\">    start:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>,<span class=\"keyword\">this</span>.name,x);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    end:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>,<span class=\"keyword\">this</span>.name,x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">GFRAME.func1(<span class=\"string\">'test'</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出结果\"><a href=\"#输出结果\" class=\"headerlink\" title=\"输出结果\"></a>输出结果</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start GFRAME test</span><br><span class=\"line\">GFRAME test</span><br><span class=\"line\">end GFRAME test</span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li><a href=\"http://zh.wikipedia.org/wiki/AOP\" target=\"_blank\" rel=\"noopener\">AOP@维基百科</a></li>\n<li><a href=\"http://www.cnblogs.com/riceball/archive/2007/09/02/jsInject.html\" target=\"_blank\" rel=\"noopener\">你相信么，只需一个函数5行JS代码即可在Javascript中实现完整的AOP功能</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p><code>面向侧面的程序设计</code>（aspect-oriented programming，AOP，又译作面向方面的程序设计、观点导向编程）是计算机科学中的一个术语，指一种程序设计范型。</p>\n<p>该范型以一种称为侧面（aspect，又译作方面）的语言构造为基础，侧面是一种新的模块化机制，用来描述分散在对象、类或函数中的 <code>横切关注点</code> （crosscutting concern）。</p>\n<h2 id=\"使用目的\"><a href=\"#使用目的\" class=\"headerlink\" title=\"使用目的\"></a>使用目的</h2><p>需要增强或者修改原有函数的功能，但并不直接修改原函数的内部逻辑。比如为函数添加 <code>前置</code> 和 <code>后置</code> 操作。</p>\n<p>最常见的应用比如计算函数执行的时间、函数执行时的<code>日志记录</code>。</p>\n<h2 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h2><p>在系统中有两个函数，func1和func2，func2是func1代码末尾的JSONP（跨域请求）回调。这两个函数内部逻辑相对复杂，代码也较多。</p>\n<p>func1的执行频率是10秒一次，而客户端与服务器之间的网络并不能保证永远正常连接，除了后端有DNSPOD、反向代理等容灾方案，前端也要做一些容灾工作。</p>\n<p><code>如何容灾</code> ？就是在发现连续两次请求失败，就认定主服务器不可用，立刻在前端切换到备用服务器。<br>确定好这个思路以后剩下的就是在服务端添加各种配置，然后在前端为原有的func1加入请求超时的统计功能。</p>\n<p>超时统计无非就是在func1的开始设置一个变量，func2结束后还原为初始值，如果在指定的超时时间段内发现变量未还原则判定为请求超时。</p>\n<p>这段代码与原函数func1和func2均无逻辑关联，所以尽量不直接修改这2个函数的代码，<br>加之func1和func2已经相对复杂，若直接修改函数内部代码将导致代码复杂度加倍而且难于维护。</p>\n<p>于是乎，AOP就派上用场了！</p>\n<h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.getElementById(id);&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> GFRAME = &#123;&#125;;</span><br><span class=\"line\">GFRAME.name = <span class=\"string\">'GFRAME'</span>;</span><br><span class=\"line\">GFRAME.func1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name,x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description AOP in JavaScript，不直接修改原函数而增强函数功能。未考虑前置操作的函数返回值的情况</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; args &#123;context:执行环境，name:函数名称，start:前置操作，end:后置操作&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\">_.inject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> origin = args.name,</span><br><span class=\"line\">        context = args.context || <span class=\"built_in\">window</span>,</span><br><span class=\"line\">        start = args.start || (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;),</span><br><span class=\"line\">        end = args.end || (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = context[origin];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> temp != <span class=\"string\">'function'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(origin + <span class=\"string\">' is not a function in the given context.'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> start != <span class=\"string\">'function'</span> || <span class=\"keyword\">typeof</span> end != <span class=\"string\">'function'</span> )</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'start and end is not a function in the given context.'</span>);</span><br><span class=\"line\">    context[origin] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        start.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ret = temp.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        end.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.inject(&#123;</span><br><span class=\"line\">    name:<span class=\"string\">'func1'</span>,</span><br><span class=\"line\">    context:GFRAME,</span><br><span class=\"line\">    start:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>,<span class=\"keyword\">this</span>.name,x);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    end:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>,<span class=\"keyword\">this</span>.name,x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">GFRAME.func1(<span class=\"string\">'test'</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出结果\"><a href=\"#输出结果\" class=\"headerlink\" title=\"输出结果\"></a>输出结果</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start GFRAME test</span><br><span class=\"line\">GFRAME test</span><br><span class=\"line\">end GFRAME test</span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><ul>\n<li><a href=\"http://zh.wikipedia.org/wiki/AOP\" target=\"_blank\" rel=\"noopener\">AOP@维基百科</a></li>\n<li><a href=\"http://www.cnblogs.com/riceball/archive/2007/09/02/jsInject.html\" target=\"_blank\" rel=\"noopener\">你相信么，只需一个函数5行JS代码即可在Javascript中实现完整的AOP功能</a></li>\n</ul>\n"},{"title":"iOS UIWebView Class Reference","date":"2012-10-29T16:00:00.000Z","_content":"\n[原文地址](https://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIWebView_Class/Reference/Reference.html)\n\n## 属性\n\n###  allowsInlineMediaPlayback\n\n<strong style=\"color:red;\">前端重点关注</strong>\n\n是否允许页内播放视频，默认值NO，使用原生的全屏控制。\n\n使用页面播放需要设置此属性为YES，并且video 元素要加上 `webkit-playsinline`属性。\n\n###  canGoBack\n\n是否可以后退，只读属性\n\n###  canGoForward\n\n是否可以前进，只读属性\n\n###  dataDetectorTypes\n\n在webview被转换为可点击的URL内容的数据类型。\n\n使用此属性可以指定譬如`http链接`，`Email地址`，`电话号码`等内容将自动转换为可点击的链接。当点击以后，webview寻找相应的应用程序来处理。\n\n###  delegate\n\n委托，用于回调通知页面的加载状态，比如已经打开、打开完成或打开错误等。\n\n\n### keyboardDisplayRequiresUserAction\n\n<strong style=\"color:red;\">前端重点关注</strong>\n\n显示键盘是否一定需要用户动作，默认值为YES，也就是用户必须主动点击可输入的表单元素以后才会显示键盘。\n\n设置为NO以后，页面可以通过JS脚本的`focus`事件显示键盘。\n\n### loading\n\nwebview是否还在加载，只读属性\n\n### #mediaPlaybackAllowsAirPlay\n\n<strong style=\"color:red;\">前端重点关注</strong>\n\n媒体播放是否允许`Air Play`???默认值为YES\n\n### mediaPlaybackRequiresUserAction\n\n<strong style=\"color:red;\">前端重点关注</strong>\n\n媒体播放是否需要用户动作主动触发，默认值为YES。也就是说默认情况无法自动播放音频和视频。\n\n那么默认设置下是不是一定无法自动播放呢？StackOverflow上找到一个[方法](http://stackoverflow.com/questions/4259928/how-can-i-autoplay-media-in-ios-4-2-1-mobile-safari)解决此问题（没有测试）\n\n```javascript\n\tvar ifr = document.createElement(\"iframe\");\n\tifr.setAttribute('src', \"http://mysite.com/myvideo.mp4\");\n\tifr.setAttribute('width', '1px');\n\tifr.setAttribute('height', '1px');\n\tifr.setAttribute('scrolling', 'no');\n\tifr.style.border=\"0px\";\n\tdocument.body.appendChild(ifr);\n```\n\n### request\n\nwebview当前请求的URL，只读属性\n\n### scalesPageToFit\n\n指定页面是否按比例缩放适应webview，并且用户可以更改缩放比例。默认值为NO，用户不能更改缩放比例。\n\n### scrollView\n\nwebview关联的scroll view，只读属性\n\n### suppressesIncrementalRendering\n\n当页面完全加载到内存以后，webview是否禁止增量内容渲染，默认值为NO\n\niOS 6.0版本支持\n\n##实例方法\n\n### goBack\n\n加载历史记录当前页之前的页面\n\n### goForward\n\n加载历史记录当前页之后的页面\n\n### loadData:MIMEType:textEncodingName:baseURL\n\n设置页面内容，MIMIE type，编码，URL\n\n### loadHTMLString:baseURL:\n\n设置页面内容\n\n### loadRequest\n\n根据指定的URL进行异步连接\n\n### reload\n\n重新载入当前页\n\n### stopLoading\n\n取消当前页的加载\n\n### stringByEvaluatingJavaScriptFromString\n\n**前端重点关注**\n\n在页面加载完成以后运行JavaScript脚本，运行脚本有如下注意事项：\n\n* 脚本运行不得超过10秒\n* 将要执行的脚本内存分配不得超过10M\n\n[这里](http://url.cn/7Vf4bx)有一个比较详细的教程可以参考\n","source":"_posts/iOS-UIWebView-Class-Reference.md","raw":"---\ntitle: iOS UIWebView Class Reference\ndate: 2012-10-30\ntags: JavaScript\n---\n\n[原文地址](https://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIWebView_Class/Reference/Reference.html)\n\n## 属性\n\n###  allowsInlineMediaPlayback\n\n<strong style=\"color:red;\">前端重点关注</strong>\n\n是否允许页内播放视频，默认值NO，使用原生的全屏控制。\n\n使用页面播放需要设置此属性为YES，并且video 元素要加上 `webkit-playsinline`属性。\n\n###  canGoBack\n\n是否可以后退，只读属性\n\n###  canGoForward\n\n是否可以前进，只读属性\n\n###  dataDetectorTypes\n\n在webview被转换为可点击的URL内容的数据类型。\n\n使用此属性可以指定譬如`http链接`，`Email地址`，`电话号码`等内容将自动转换为可点击的链接。当点击以后，webview寻找相应的应用程序来处理。\n\n###  delegate\n\n委托，用于回调通知页面的加载状态，比如已经打开、打开完成或打开错误等。\n\n\n### keyboardDisplayRequiresUserAction\n\n<strong style=\"color:red;\">前端重点关注</strong>\n\n显示键盘是否一定需要用户动作，默认值为YES，也就是用户必须主动点击可输入的表单元素以后才会显示键盘。\n\n设置为NO以后，页面可以通过JS脚本的`focus`事件显示键盘。\n\n### loading\n\nwebview是否还在加载，只读属性\n\n### #mediaPlaybackAllowsAirPlay\n\n<strong style=\"color:red;\">前端重点关注</strong>\n\n媒体播放是否允许`Air Play`???默认值为YES\n\n### mediaPlaybackRequiresUserAction\n\n<strong style=\"color:red;\">前端重点关注</strong>\n\n媒体播放是否需要用户动作主动触发，默认值为YES。也就是说默认情况无法自动播放音频和视频。\n\n那么默认设置下是不是一定无法自动播放呢？StackOverflow上找到一个[方法](http://stackoverflow.com/questions/4259928/how-can-i-autoplay-media-in-ios-4-2-1-mobile-safari)解决此问题（没有测试）\n\n```javascript\n\tvar ifr = document.createElement(\"iframe\");\n\tifr.setAttribute('src', \"http://mysite.com/myvideo.mp4\");\n\tifr.setAttribute('width', '1px');\n\tifr.setAttribute('height', '1px');\n\tifr.setAttribute('scrolling', 'no');\n\tifr.style.border=\"0px\";\n\tdocument.body.appendChild(ifr);\n```\n\n### request\n\nwebview当前请求的URL，只读属性\n\n### scalesPageToFit\n\n指定页面是否按比例缩放适应webview，并且用户可以更改缩放比例。默认值为NO，用户不能更改缩放比例。\n\n### scrollView\n\nwebview关联的scroll view，只读属性\n\n### suppressesIncrementalRendering\n\n当页面完全加载到内存以后，webview是否禁止增量内容渲染，默认值为NO\n\niOS 6.0版本支持\n\n##实例方法\n\n### goBack\n\n加载历史记录当前页之前的页面\n\n### goForward\n\n加载历史记录当前页之后的页面\n\n### loadData:MIMEType:textEncodingName:baseURL\n\n设置页面内容，MIMIE type，编码，URL\n\n### loadHTMLString:baseURL:\n\n设置页面内容\n\n### loadRequest\n\n根据指定的URL进行异步连接\n\n### reload\n\n重新载入当前页\n\n### stopLoading\n\n取消当前页的加载\n\n### stringByEvaluatingJavaScriptFromString\n\n**前端重点关注**\n\n在页面加载完成以后运行JavaScript脚本，运行脚本有如下注意事项：\n\n* 脚本运行不得超过10秒\n* 将要执行的脚本内存分配不得超过10M\n\n[这里](http://url.cn/7Vf4bx)有一个比较详细的教程可以参考\n","slug":"iOS-UIWebView-Class-Reference","published":1,"updated":"2017-12-22T15:26:00.000Z","_id":"cjbhnm6pf00019895xvjzmbly","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIWebView_Class/Reference/Reference.html\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><h3 id=\"allowsInlineMediaPlayback\"><a href=\"#allowsInlineMediaPlayback\" class=\"headerlink\" title=\"allowsInlineMediaPlayback\"></a>allowsInlineMediaPlayback</h3><p><strong style=\"color:red;\">前端重点关注</strong></p>\n<p>是否允许页内播放视频，默认值NO，使用原生的全屏控制。</p>\n<p>使用页面播放需要设置此属性为YES，并且video 元素要加上 <code>webkit-playsinline</code>属性。</p>\n<h3 id=\"canGoBack\"><a href=\"#canGoBack\" class=\"headerlink\" title=\"canGoBack\"></a>canGoBack</h3><p>是否可以后退，只读属性</p>\n<h3 id=\"canGoForward\"><a href=\"#canGoForward\" class=\"headerlink\" title=\"canGoForward\"></a>canGoForward</h3><p>是否可以前进，只读属性</p>\n<h3 id=\"dataDetectorTypes\"><a href=\"#dataDetectorTypes\" class=\"headerlink\" title=\"dataDetectorTypes\"></a>dataDetectorTypes</h3><p>在webview被转换为可点击的URL内容的数据类型。</p>\n<p>使用此属性可以指定譬如<code>http链接</code>，<code>Email地址</code>，<code>电话号码</code>等内容将自动转换为可点击的链接。当点击以后，webview寻找相应的应用程序来处理。</p>\n<h3 id=\"delegate\"><a href=\"#delegate\" class=\"headerlink\" title=\"delegate\"></a>delegate</h3><p>委托，用于回调通知页面的加载状态，比如已经打开、打开完成或打开错误等。</p>\n<h3 id=\"keyboardDisplayRequiresUserAction\"><a href=\"#keyboardDisplayRequiresUserAction\" class=\"headerlink\" title=\"keyboardDisplayRequiresUserAction\"></a>keyboardDisplayRequiresUserAction</h3><p><strong style=\"color:red;\">前端重点关注</strong></p>\n<p>显示键盘是否一定需要用户动作，默认值为YES，也就是用户必须主动点击可输入的表单元素以后才会显示键盘。</p>\n<p>设置为NO以后，页面可以通过JS脚本的<code>focus</code>事件显示键盘。</p>\n<h3 id=\"loading\"><a href=\"#loading\" class=\"headerlink\" title=\"loading\"></a>loading</h3><p>webview是否还在加载，只读属性</p>\n<h3 id=\"mediaPlaybackAllowsAirPlay\"><a href=\"#mediaPlaybackAllowsAirPlay\" class=\"headerlink\" title=\"#mediaPlaybackAllowsAirPlay\"></a>#mediaPlaybackAllowsAirPlay</h3><p><strong style=\"color:red;\">前端重点关注</strong></p>\n<p>媒体播放是否允许<code>Air Play</code>???默认值为YES</p>\n<h3 id=\"mediaPlaybackRequiresUserAction\"><a href=\"#mediaPlaybackRequiresUserAction\" class=\"headerlink\" title=\"mediaPlaybackRequiresUserAction\"></a>mediaPlaybackRequiresUserAction</h3><p><strong style=\"color:red;\">前端重点关注</strong></p>\n<p>媒体播放是否需要用户动作主动触发，默认值为YES。也就是说默认情况无法自动播放音频和视频。</p>\n<p>那么默认设置下是不是一定无法自动播放呢？StackOverflow上找到一个<a href=\"http://stackoverflow.com/questions/4259928/how-can-i-autoplay-media-in-ios-4-2-1-mobile-safari\" target=\"_blank\" rel=\"noopener\">方法</a>解决此问题（没有测试）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ifr = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\">ifr.setAttribute(<span class=\"string\">'src'</span>, <span class=\"string\">\"http://mysite.com/myvideo.mp4\"</span>);</span><br><span class=\"line\">ifr.setAttribute(<span class=\"string\">'width'</span>, <span class=\"string\">'1px'</span>);</span><br><span class=\"line\">ifr.setAttribute(<span class=\"string\">'height'</span>, <span class=\"string\">'1px'</span>);</span><br><span class=\"line\">ifr.setAttribute(<span class=\"string\">'scrolling'</span>, <span class=\"string\">'no'</span>);</span><br><span class=\"line\">ifr.style.border=<span class=\"string\">\"0px\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(ifr);</span><br></pre></td></tr></table></figure>\n<h3 id=\"request\"><a href=\"#request\" class=\"headerlink\" title=\"request\"></a>request</h3><p>webview当前请求的URL，只读属性</p>\n<h3 id=\"scalesPageToFit\"><a href=\"#scalesPageToFit\" class=\"headerlink\" title=\"scalesPageToFit\"></a>scalesPageToFit</h3><p>指定页面是否按比例缩放适应webview，并且用户可以更改缩放比例。默认值为NO，用户不能更改缩放比例。</p>\n<h3 id=\"scrollView\"><a href=\"#scrollView\" class=\"headerlink\" title=\"scrollView\"></a>scrollView</h3><p>webview关联的scroll view，只读属性</p>\n<h3 id=\"suppressesIncrementalRendering\"><a href=\"#suppressesIncrementalRendering\" class=\"headerlink\" title=\"suppressesIncrementalRendering\"></a>suppressesIncrementalRendering</h3><p>当页面完全加载到内存以后，webview是否禁止增量内容渲染，默认值为NO</p>\n<p>iOS 6.0版本支持</p>\n<p>##实例方法</p>\n<h3 id=\"goBack\"><a href=\"#goBack\" class=\"headerlink\" title=\"goBack\"></a>goBack</h3><p>加载历史记录当前页之前的页面</p>\n<h3 id=\"goForward\"><a href=\"#goForward\" class=\"headerlink\" title=\"goForward\"></a>goForward</h3><p>加载历史记录当前页之后的页面</p>\n<h3 id=\"loadData-MIMEType-textEncodingName-baseURL\"><a href=\"#loadData-MIMEType-textEncodingName-baseURL\" class=\"headerlink\" title=\"loadData:MIMEType:textEncodingName:baseURL\"></a>loadData:MIMEType:textEncodingName:baseURL</h3><p>设置页面内容，MIMIE type，编码，URL</p>\n<h3 id=\"loadHTMLString-baseURL\"><a href=\"#loadHTMLString-baseURL\" class=\"headerlink\" title=\"loadHTMLString:baseURL:\"></a>loadHTMLString:baseURL:</h3><p>设置页面内容</p>\n<h3 id=\"loadRequest\"><a href=\"#loadRequest\" class=\"headerlink\" title=\"loadRequest\"></a>loadRequest</h3><p>根据指定的URL进行异步连接</p>\n<h3 id=\"reload\"><a href=\"#reload\" class=\"headerlink\" title=\"reload\"></a>reload</h3><p>重新载入当前页</p>\n<h3 id=\"stopLoading\"><a href=\"#stopLoading\" class=\"headerlink\" title=\"stopLoading\"></a>stopLoading</h3><p>取消当前页的加载</p>\n<h3 id=\"stringByEvaluatingJavaScriptFromString\"><a href=\"#stringByEvaluatingJavaScriptFromString\" class=\"headerlink\" title=\"stringByEvaluatingJavaScriptFromString\"></a>stringByEvaluatingJavaScriptFromString</h3><p><strong>前端重点关注</strong></p>\n<p>在页面加载完成以后运行JavaScript脚本，运行脚本有如下注意事项：</p>\n<ul>\n<li>脚本运行不得超过10秒</li>\n<li>将要执行的脚本内存分配不得超过10M</li>\n</ul>\n<p><a href=\"http://url.cn/7Vf4bx\" target=\"_blank\" rel=\"noopener\">这里</a>有一个比较详细的教程可以参考</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIWebView_Class/Reference/Reference.html\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><h3 id=\"allowsInlineMediaPlayback\"><a href=\"#allowsInlineMediaPlayback\" class=\"headerlink\" title=\"allowsInlineMediaPlayback\"></a>allowsInlineMediaPlayback</h3><p><strong style=\"color:red;\">前端重点关注</strong></p>\n<p>是否允许页内播放视频，默认值NO，使用原生的全屏控制。</p>\n<p>使用页面播放需要设置此属性为YES，并且video 元素要加上 <code>webkit-playsinline</code>属性。</p>\n<h3 id=\"canGoBack\"><a href=\"#canGoBack\" class=\"headerlink\" title=\"canGoBack\"></a>canGoBack</h3><p>是否可以后退，只读属性</p>\n<h3 id=\"canGoForward\"><a href=\"#canGoForward\" class=\"headerlink\" title=\"canGoForward\"></a>canGoForward</h3><p>是否可以前进，只读属性</p>\n<h3 id=\"dataDetectorTypes\"><a href=\"#dataDetectorTypes\" class=\"headerlink\" title=\"dataDetectorTypes\"></a>dataDetectorTypes</h3><p>在webview被转换为可点击的URL内容的数据类型。</p>\n<p>使用此属性可以指定譬如<code>http链接</code>，<code>Email地址</code>，<code>电话号码</code>等内容将自动转换为可点击的链接。当点击以后，webview寻找相应的应用程序来处理。</p>\n<h3 id=\"delegate\"><a href=\"#delegate\" class=\"headerlink\" title=\"delegate\"></a>delegate</h3><p>委托，用于回调通知页面的加载状态，比如已经打开、打开完成或打开错误等。</p>\n<h3 id=\"keyboardDisplayRequiresUserAction\"><a href=\"#keyboardDisplayRequiresUserAction\" class=\"headerlink\" title=\"keyboardDisplayRequiresUserAction\"></a>keyboardDisplayRequiresUserAction</h3><p><strong style=\"color:red;\">前端重点关注</strong></p>\n<p>显示键盘是否一定需要用户动作，默认值为YES，也就是用户必须主动点击可输入的表单元素以后才会显示键盘。</p>\n<p>设置为NO以后，页面可以通过JS脚本的<code>focus</code>事件显示键盘。</p>\n<h3 id=\"loading\"><a href=\"#loading\" class=\"headerlink\" title=\"loading\"></a>loading</h3><p>webview是否还在加载，只读属性</p>\n<h3 id=\"mediaPlaybackAllowsAirPlay\"><a href=\"#mediaPlaybackAllowsAirPlay\" class=\"headerlink\" title=\"#mediaPlaybackAllowsAirPlay\"></a>#mediaPlaybackAllowsAirPlay</h3><p><strong style=\"color:red;\">前端重点关注</strong></p>\n<p>媒体播放是否允许<code>Air Play</code>???默认值为YES</p>\n<h3 id=\"mediaPlaybackRequiresUserAction\"><a href=\"#mediaPlaybackRequiresUserAction\" class=\"headerlink\" title=\"mediaPlaybackRequiresUserAction\"></a>mediaPlaybackRequiresUserAction</h3><p><strong style=\"color:red;\">前端重点关注</strong></p>\n<p>媒体播放是否需要用户动作主动触发，默认值为YES。也就是说默认情况无法自动播放音频和视频。</p>\n<p>那么默认设置下是不是一定无法自动播放呢？StackOverflow上找到一个<a href=\"http://stackoverflow.com/questions/4259928/how-can-i-autoplay-media-in-ios-4-2-1-mobile-safari\" target=\"_blank\" rel=\"noopener\">方法</a>解决此问题（没有测试）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ifr = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\">ifr.setAttribute(<span class=\"string\">'src'</span>, <span class=\"string\">\"http://mysite.com/myvideo.mp4\"</span>);</span><br><span class=\"line\">ifr.setAttribute(<span class=\"string\">'width'</span>, <span class=\"string\">'1px'</span>);</span><br><span class=\"line\">ifr.setAttribute(<span class=\"string\">'height'</span>, <span class=\"string\">'1px'</span>);</span><br><span class=\"line\">ifr.setAttribute(<span class=\"string\">'scrolling'</span>, <span class=\"string\">'no'</span>);</span><br><span class=\"line\">ifr.style.border=<span class=\"string\">\"0px\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(ifr);</span><br></pre></td></tr></table></figure>\n<h3 id=\"request\"><a href=\"#request\" class=\"headerlink\" title=\"request\"></a>request</h3><p>webview当前请求的URL，只读属性</p>\n<h3 id=\"scalesPageToFit\"><a href=\"#scalesPageToFit\" class=\"headerlink\" title=\"scalesPageToFit\"></a>scalesPageToFit</h3><p>指定页面是否按比例缩放适应webview，并且用户可以更改缩放比例。默认值为NO，用户不能更改缩放比例。</p>\n<h3 id=\"scrollView\"><a href=\"#scrollView\" class=\"headerlink\" title=\"scrollView\"></a>scrollView</h3><p>webview关联的scroll view，只读属性</p>\n<h3 id=\"suppressesIncrementalRendering\"><a href=\"#suppressesIncrementalRendering\" class=\"headerlink\" title=\"suppressesIncrementalRendering\"></a>suppressesIncrementalRendering</h3><p>当页面完全加载到内存以后，webview是否禁止增量内容渲染，默认值为NO</p>\n<p>iOS 6.0版本支持</p>\n<p>##实例方法</p>\n<h3 id=\"goBack\"><a href=\"#goBack\" class=\"headerlink\" title=\"goBack\"></a>goBack</h3><p>加载历史记录当前页之前的页面</p>\n<h3 id=\"goForward\"><a href=\"#goForward\" class=\"headerlink\" title=\"goForward\"></a>goForward</h3><p>加载历史记录当前页之后的页面</p>\n<h3 id=\"loadData-MIMEType-textEncodingName-baseURL\"><a href=\"#loadData-MIMEType-textEncodingName-baseURL\" class=\"headerlink\" title=\"loadData:MIMEType:textEncodingName:baseURL\"></a>loadData:MIMEType:textEncodingName:baseURL</h3><p>设置页面内容，MIMIE type，编码，URL</p>\n<h3 id=\"loadHTMLString-baseURL\"><a href=\"#loadHTMLString-baseURL\" class=\"headerlink\" title=\"loadHTMLString:baseURL:\"></a>loadHTMLString:baseURL:</h3><p>设置页面内容</p>\n<h3 id=\"loadRequest\"><a href=\"#loadRequest\" class=\"headerlink\" title=\"loadRequest\"></a>loadRequest</h3><p>根据指定的URL进行异步连接</p>\n<h3 id=\"reload\"><a href=\"#reload\" class=\"headerlink\" title=\"reload\"></a>reload</h3><p>重新载入当前页</p>\n<h3 id=\"stopLoading\"><a href=\"#stopLoading\" class=\"headerlink\" title=\"stopLoading\"></a>stopLoading</h3><p>取消当前页的加载</p>\n<h3 id=\"stringByEvaluatingJavaScriptFromString\"><a href=\"#stringByEvaluatingJavaScriptFromString\" class=\"headerlink\" title=\"stringByEvaluatingJavaScriptFromString\"></a>stringByEvaluatingJavaScriptFromString</h3><p><strong>前端重点关注</strong></p>\n<p>在页面加载完成以后运行JavaScript脚本，运行脚本有如下注意事项：</p>\n<ul>\n<li>脚本运行不得超过10秒</li>\n<li>将要执行的脚本内存分配不得超过10M</li>\n</ul>\n<p><a href=\"http://url.cn/7Vf4bx\" target=\"_blank\" rel=\"noopener\">这里</a>有一个比较详细的教程可以参考</p>\n"},{"title":"JavaScript Template Engine","date":"2012-02-05T16:00:00.000Z","_content":"\n## 设计目的\n\n减少现有代码中的字符串拼接操作，增强代码的可维护性。\n\n## 实现代码\n\n```javascript\n\t/*\n\t * @description An Easy Template in JavaScript, it is designed to reduce the string concatention work,\n\t * to make the gigantic code more readable and maintainable.\n\t */\n\tfunction Template(tmpl,source){\n\t    //add all template tasks to this array\n\t    this.task = [];\n\t    if(tmpl)\n\t        this.task.push([tmpl,source]);\n\t}\n\t/*\n\t * @description core function,hanlde two cases: typeof dataSource is either object or array\n\t *  when the type of dataSource is array,you'd better confirm that the fields in every object is the same.\n\t */\n\tTemplate.format = function(template,dataSource){\n\t    //default variable flags\n\t    var start = '{', end = '}';\n\t    if(dataSource && dataSource.slice && dataSource.length){\n\t        var retStr = [], formatted, len = dataSource.length, regMap = {};\n\t        //restore the RegExp,avoid to construct them repeatedly.\n\t        for(var regKey in dataSource[0]){\n\t            regMap[regKey] = new RegExp(start + regKey + end,'g');\n\t        }\n\t        for(var index in dataSource){\n\t            formatted = template;\n\t            for(var key in dataSource[index]){\n\t                formatted = formatted.replace(regMap[key],String(dataSource[index][key]));\n\t            }\n\t            retStr.push(formatted);\n\t        }\n\t        return retStr.join('');\n\t    }else{\n\t        for(var key in dataSource){\n\t            template = template.replace(new RegExp(start + key + end,'g'),String(dataSource[index][key]));\n\t        }\n\t        return template;\n\t    }\n\t};\n\tTemplate.prototype.add = function(tmpl,source){\n\t    //add one template task\n\t    this.task.push([tmpl,source]);\n\t};\n\t/*\n\t * @description handle all tasks,and return the final string.\n\t *  when this method is invoked,you can reuse the instance.\n\t */\n\tTemplate.prototype.end = function(){\n\t    var retStr = [];\n\t    for(var index in this.task){\n\t        retStr.push(Template.format(this.task[index][0],this.task[index][1]));    \n\t    }\n\t    this.task.length = 0;\n\t    return retStr.join('');\n\t};\n```\n\n##使用方法\n\n```html\n\t<!doctype html>\n\t<html>\n\t<head>\n\t    <script src=\"jTemp.js\"></script>\n\t</head>\n\t<body>\n\t        <ul id=\"MenuItems\">\n\t            <li class=\"nav\"><a href=\"{href}\">{text}</a></li>                \n\t        </ul>\n\t        <script>\n\t            var ul = document.getElementById('MenuItems');\n\t            var dataSource = [\n\t                {text:'首页',href:'http://www.oschina.net/'},\n\t                {text:'开源软件',href:'http://www.oschina.net/'},\n\t                {text:'讨论区',href:'http://www.oschina.net/'},\n\t                {text:'代码分享',href:'http://www.oschina.net/'},\n\t                {text:'资讯',href:'http://www.oschina.net/'},\n\t                {text:'博客',href:'http://www.oschina.net/'},\n\t                {text:'Android',href:'http://www.oschina.net/'}\n\t            ];\n\t            var tmpl = new Template(ul.innerHTML,dataSource);\n\t            ul.innerHTML = tmpl.end();\n\t        </script>\n\t</body>\n\t</html>\n```\n\n## 额外说明\n\n上面的例子更加偏向于一个穷人版的**模板引擎**（变量替换），如果这是你需要更加强大的例子，不妨看看 `jQuery` 的作者John Resig在几年前的 [作品](http://ejohn.org/blog/javascript-micro-templating/)。\n\n不过模板引擎的发展在JavaScript圈子里面可谓日新月异，比较出名的有：\n\n> * mustache\n> * handlerbars\n> * ejs\n> * artTemplate (国产)\n","source":"_posts/JavaScript-Template-Engine.md","raw":"---\ntitle: JavaScript Template Engine\ndate: 2012-02-06\ntags: JavaScript\n---\n\n## 设计目的\n\n减少现有代码中的字符串拼接操作，增强代码的可维护性。\n\n## 实现代码\n\n```javascript\n\t/*\n\t * @description An Easy Template in JavaScript, it is designed to reduce the string concatention work,\n\t * to make the gigantic code more readable and maintainable.\n\t */\n\tfunction Template(tmpl,source){\n\t    //add all template tasks to this array\n\t    this.task = [];\n\t    if(tmpl)\n\t        this.task.push([tmpl,source]);\n\t}\n\t/*\n\t * @description core function,hanlde two cases: typeof dataSource is either object or array\n\t *  when the type of dataSource is array,you'd better confirm that the fields in every object is the same.\n\t */\n\tTemplate.format = function(template,dataSource){\n\t    //default variable flags\n\t    var start = '{', end = '}';\n\t    if(dataSource && dataSource.slice && dataSource.length){\n\t        var retStr = [], formatted, len = dataSource.length, regMap = {};\n\t        //restore the RegExp,avoid to construct them repeatedly.\n\t        for(var regKey in dataSource[0]){\n\t            regMap[regKey] = new RegExp(start + regKey + end,'g');\n\t        }\n\t        for(var index in dataSource){\n\t            formatted = template;\n\t            for(var key in dataSource[index]){\n\t                formatted = formatted.replace(regMap[key],String(dataSource[index][key]));\n\t            }\n\t            retStr.push(formatted);\n\t        }\n\t        return retStr.join('');\n\t    }else{\n\t        for(var key in dataSource){\n\t            template = template.replace(new RegExp(start + key + end,'g'),String(dataSource[index][key]));\n\t        }\n\t        return template;\n\t    }\n\t};\n\tTemplate.prototype.add = function(tmpl,source){\n\t    //add one template task\n\t    this.task.push([tmpl,source]);\n\t};\n\t/*\n\t * @description handle all tasks,and return the final string.\n\t *  when this method is invoked,you can reuse the instance.\n\t */\n\tTemplate.prototype.end = function(){\n\t    var retStr = [];\n\t    for(var index in this.task){\n\t        retStr.push(Template.format(this.task[index][0],this.task[index][1]));    \n\t    }\n\t    this.task.length = 0;\n\t    return retStr.join('');\n\t};\n```\n\n##使用方法\n\n```html\n\t<!doctype html>\n\t<html>\n\t<head>\n\t    <script src=\"jTemp.js\"></script>\n\t</head>\n\t<body>\n\t        <ul id=\"MenuItems\">\n\t            <li class=\"nav\"><a href=\"{href}\">{text}</a></li>                \n\t        </ul>\n\t        <script>\n\t            var ul = document.getElementById('MenuItems');\n\t            var dataSource = [\n\t                {text:'首页',href:'http://www.oschina.net/'},\n\t                {text:'开源软件',href:'http://www.oschina.net/'},\n\t                {text:'讨论区',href:'http://www.oschina.net/'},\n\t                {text:'代码分享',href:'http://www.oschina.net/'},\n\t                {text:'资讯',href:'http://www.oschina.net/'},\n\t                {text:'博客',href:'http://www.oschina.net/'},\n\t                {text:'Android',href:'http://www.oschina.net/'}\n\t            ];\n\t            var tmpl = new Template(ul.innerHTML,dataSource);\n\t            ul.innerHTML = tmpl.end();\n\t        </script>\n\t</body>\n\t</html>\n```\n\n## 额外说明\n\n上面的例子更加偏向于一个穷人版的**模板引擎**（变量替换），如果这是你需要更加强大的例子，不妨看看 `jQuery` 的作者John Resig在几年前的 [作品](http://ejohn.org/blog/javascript-micro-templating/)。\n\n不过模板引擎的发展在JavaScript圈子里面可谓日新月异，比较出名的有：\n\n> * mustache\n> * handlerbars\n> * ejs\n> * artTemplate (国产)\n","slug":"JavaScript-Template-Engine","published":1,"updated":"2017-12-22T08:19:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbi067o80001bi95mzvqrfgu","content":"<h2 id=\"设计目的\"><a href=\"#设计目的\" class=\"headerlink\" title=\"设计目的\"></a>设计目的</h2><p>减少现有代码中的字符串拼接操作，增强代码的可维护性。</p>\n<h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @description An Easy Template in JavaScript, it is designed to reduce the string concatention work,</span></span><br><span class=\"line\"><span class=\"comment\"> * to make the gigantic code more readable and maintainable.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Template</span>(<span class=\"params\">tmpl,source</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//add all template tasks to this array</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.task = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tmpl)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.task.push([tmpl,source]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @description core function,hanlde two cases: typeof dataSource is either object or array</span></span><br><span class=\"line\"><span class=\"comment\"> *  when the type of dataSource is array,you'd better confirm that the fields in every object is the same.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Template.format = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">template,dataSource</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//default variable flags</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = <span class=\"string\">'&#123;'</span>, end = <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dataSource &amp;&amp; dataSource.slice &amp;&amp; dataSource.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> retStr = [], formatted, len = dataSource.length, regMap = &#123;&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//restore the RegExp,avoid to construct them repeatedly.</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> regKey <span class=\"keyword\">in</span> dataSource[<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">            regMap[regKey] = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(start + regKey + end,<span class=\"string\">'g'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> index <span class=\"keyword\">in</span> dataSource)&#123;</span><br><span class=\"line\">            formatted = template;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> dataSource[index])&#123;</span><br><span class=\"line\">                formatted = formatted.replace(regMap[key],<span class=\"built_in\">String</span>(dataSource[index][key]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            retStr.push(formatted);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> retStr.join(<span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> dataSource)&#123;</span><br><span class=\"line\">            template = template.replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(start + key + end,<span class=\"string\">'g'</span>),<span class=\"built_in\">String</span>(dataSource[index][key]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Template.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tmpl,source</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//add one template task</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.task.push([tmpl,source]);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @description handle all tasks,and return the final string.</span></span><br><span class=\"line\"><span class=\"comment\"> *  when this method is invoked,you can reuse the instance.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Template.prototype.end = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> retStr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> index <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.task)&#123;</span><br><span class=\"line\">        retStr.push(Template.format(<span class=\"keyword\">this</span>.task[index][<span class=\"number\">0</span>],<span class=\"keyword\">this</span>.task[index][<span class=\"number\">1</span>]));    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.task.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> retStr.join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>##使用方法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jTemp.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"MenuItems\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;href&#125;\"</span>&gt;</span>&#123;text&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>                </span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'MenuItems'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> dataSource = [</span></span><br><span class=\"line\"><span class=\"javascript\">                &#123;<span class=\"attr\">text</span>:<span class=\"string\">'首页'</span>,<span class=\"attr\">href</span>:<span class=\"string\">'http://www.oschina.net/'</span>&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">                &#123;<span class=\"attr\">text</span>:<span class=\"string\">'开源软件'</span>,<span class=\"attr\">href</span>:<span class=\"string\">'http://www.oschina.net/'</span>&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">                &#123;<span class=\"attr\">text</span>:<span class=\"string\">'讨论区'</span>,<span class=\"attr\">href</span>:<span class=\"string\">'http://www.oschina.net/'</span>&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">                &#123;<span class=\"attr\">text</span>:<span class=\"string\">'代码分享'</span>,<span class=\"attr\">href</span>:<span class=\"string\">'http://www.oschina.net/'</span>&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">                &#123;<span class=\"attr\">text</span>:<span class=\"string\">'资讯'</span>,<span class=\"attr\">href</span>:<span class=\"string\">'http://www.oschina.net/'</span>&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">                &#123;<span class=\"attr\">text</span>:<span class=\"string\">'博客'</span>,<span class=\"attr\">href</span>:<span class=\"string\">'http://www.oschina.net/'</span>&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">                &#123;<span class=\"attr\">text</span>:<span class=\"string\">'Android'</span>,<span class=\"attr\">href</span>:<span class=\"string\">'http://www.oschina.net/'</span>&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            ];</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> tmpl = <span class=\"keyword\">new</span> Template(ul.innerHTML,dataSource);</span></span><br><span class=\"line\"><span class=\"undefined\">            ul.innerHTML = tmpl.end();</span></span><br><span class=\"line\"><span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"额外说明\"><a href=\"#额外说明\" class=\"headerlink\" title=\"额外说明\"></a>额外说明</h2><p>上面的例子更加偏向于一个穷人版的<strong>模板引擎</strong>（变量替换），如果这是你需要更加强大的例子，不妨看看 <code>jQuery</code> 的作者John Resig在几年前的 <a href=\"http://ejohn.org/blog/javascript-micro-templating/\" target=\"_blank\" rel=\"noopener\">作品</a>。</p>\n<p>不过模板引擎的发展在JavaScript圈子里面可谓日新月异，比较出名的有：</p>\n<blockquote>\n<ul>\n<li>mustache</li>\n<li>handlerbars</li>\n<li>ejs</li>\n<li>artTemplate (国产)</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"设计目的\"><a href=\"#设计目的\" class=\"headerlink\" title=\"设计目的\"></a>设计目的</h2><p>减少现有代码中的字符串拼接操作，增强代码的可维护性。</p>\n<h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @description An Easy Template in JavaScript, it is designed to reduce the string concatention work,</span></span><br><span class=\"line\"><span class=\"comment\"> * to make the gigantic code more readable and maintainable.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Template</span>(<span class=\"params\">tmpl,source</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//add all template tasks to this array</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.task = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tmpl)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.task.push([tmpl,source]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @description core function,hanlde two cases: typeof dataSource is either object or array</span></span><br><span class=\"line\"><span class=\"comment\"> *  when the type of dataSource is array,you'd better confirm that the fields in every object is the same.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Template.format = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">template,dataSource</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//default variable flags</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = <span class=\"string\">'&#123;'</span>, end = <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dataSource &amp;&amp; dataSource.slice &amp;&amp; dataSource.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> retStr = [], formatted, len = dataSource.length, regMap = &#123;&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//restore the RegExp,avoid to construct them repeatedly.</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> regKey <span class=\"keyword\">in</span> dataSource[<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">            regMap[regKey] = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(start + regKey + end,<span class=\"string\">'g'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> index <span class=\"keyword\">in</span> dataSource)&#123;</span><br><span class=\"line\">            formatted = template;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> dataSource[index])&#123;</span><br><span class=\"line\">                formatted = formatted.replace(regMap[key],<span class=\"built_in\">String</span>(dataSource[index][key]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            retStr.push(formatted);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> retStr.join(<span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> dataSource)&#123;</span><br><span class=\"line\">            template = template.replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(start + key + end,<span class=\"string\">'g'</span>),<span class=\"built_in\">String</span>(dataSource[index][key]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Template.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tmpl,source</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//add one template task</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.task.push([tmpl,source]);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @description handle all tasks,and return the final string.</span></span><br><span class=\"line\"><span class=\"comment\"> *  when this method is invoked,you can reuse the instance.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Template.prototype.end = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> retStr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> index <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.task)&#123;</span><br><span class=\"line\">        retStr.push(Template.format(<span class=\"keyword\">this</span>.task[index][<span class=\"number\">0</span>],<span class=\"keyword\">this</span>.task[index][<span class=\"number\">1</span>]));    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.task.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> retStr.join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>##使用方法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jTemp.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"MenuItems\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;href&#125;\"</span>&gt;</span>&#123;text&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>                </span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'MenuItems'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> dataSource = [</span></span><br><span class=\"line\"><span class=\"javascript\">                &#123;<span class=\"attr\">text</span>:<span class=\"string\">'首页'</span>,<span class=\"attr\">href</span>:<span class=\"string\">'http://www.oschina.net/'</span>&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">                &#123;<span class=\"attr\">text</span>:<span class=\"string\">'开源软件'</span>,<span class=\"attr\">href</span>:<span class=\"string\">'http://www.oschina.net/'</span>&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">                &#123;<span class=\"attr\">text</span>:<span class=\"string\">'讨论区'</span>,<span class=\"attr\">href</span>:<span class=\"string\">'http://www.oschina.net/'</span>&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">                &#123;<span class=\"attr\">text</span>:<span class=\"string\">'代码分享'</span>,<span class=\"attr\">href</span>:<span class=\"string\">'http://www.oschina.net/'</span>&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">                &#123;<span class=\"attr\">text</span>:<span class=\"string\">'资讯'</span>,<span class=\"attr\">href</span>:<span class=\"string\">'http://www.oschina.net/'</span>&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">                &#123;<span class=\"attr\">text</span>:<span class=\"string\">'博客'</span>,<span class=\"attr\">href</span>:<span class=\"string\">'http://www.oschina.net/'</span>&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">                &#123;<span class=\"attr\">text</span>:<span class=\"string\">'Android'</span>,<span class=\"attr\">href</span>:<span class=\"string\">'http://www.oschina.net/'</span>&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            ];</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> tmpl = <span class=\"keyword\">new</span> Template(ul.innerHTML,dataSource);</span></span><br><span class=\"line\"><span class=\"undefined\">            ul.innerHTML = tmpl.end();</span></span><br><span class=\"line\"><span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"额外说明\"><a href=\"#额外说明\" class=\"headerlink\" title=\"额外说明\"></a>额外说明</h2><p>上面的例子更加偏向于一个穷人版的<strong>模板引擎</strong>（变量替换），如果这是你需要更加强大的例子，不妨看看 <code>jQuery</code> 的作者John Resig在几年前的 <a href=\"http://ejohn.org/blog/javascript-micro-templating/\" target=\"_blank\" rel=\"noopener\">作品</a>。</p>\n<p>不过模板引擎的发展在JavaScript圈子里面可谓日新月异，比较出名的有：</p>\n<blockquote>\n<ul>\n<li>mustache</li>\n<li>handlerbars</li>\n<li>ejs</li>\n<li>artTemplate (国产)</li>\n</ul>\n</blockquote>\n"},{"title":"JSONP Memory Leak","date":"2011-10-21T16:00:00.000Z","_content":"\n## 什么是JSONP？\n\n`JSONP` （JSON with Padding）是资料格式 JSON 的一种“使用模式”，可以让网页从别的网域要资料。另一个解决这个问题的新方法是跨来源资源共享。\n\n由于 `同源策略` ，一般来说位于 server1.example.com 的网页无法与不是 server1.example.com 的服务器沟通，而 HTML 的  `script`  元素是一个例外。利用 script元素的这个开放策略，网页可以得到从其他来源动态产生的 JSON 资料，而这种使用模式就是所谓的 JSONP。用 JSONP 抓到的资料并不是 JSON，而是任意的 JavaScript，用 JavaScript 直译器执行而不是用 JSON 解析器解析。\n\n以上内容摘抄自：[JSONP@维基百科](http://zh.wikipedia.org/wiki/JSONP)\n\n简而言之，JSONP就是WEB前端开发中最常用的一种 `跨域请求` 数据的方式。\n\n## 使用场景\n\nJSONP是一种常用的跨域请求脚本的方式。如果页面不涉及轮询，那也不是什么大问题。但是当页面中存在 `轮询` 跨域请求时，问题就被无数倍的放大了。所以需要额外小心由此带来的 `内存泄漏`！\n\n当然毫无疑问，IE系列始终是最让人纠结的。\n\n## 跨域加载脚本\n\n通常我们使用下面的方式来加载一段脚本：\n\n```javascript\n\tvar script = document.createElement('script');\n\tscript.src = 'http://www.abc.com/somepage?callback=check';\n\tscript.id = 'JSONP';\n\tvar head = document.getElementsByTagName('head')[0];\n\thead.appendChild(script);\n```\n\n对于一般的WEB应用程序这并不存在什么问题，但是一旦你的应用程序中使用到了轮询，这样只增加节点而不删除，将导致内存不断增长，增长的比例和加载脚本执行的内容也有很大的关系。读者可以尝试向页面不断载入jquery源代码，设定轮询间隔为2s，可以看到内存的增速达到几十M每秒。\n\n所以十分有必要在脚本执行完成以后删除这些script节点。\n\n## 删除加载的script节点\n\n ```javascript\n\tvar script = document.createElement('script');\n\tscript.src = 'http://www.abc.com/somepage?callback=check';\n\tscript.id = 'JSONP';\n\tscript.type = 'text/javascript';\n\tscript.charset = 'utf-8';\n\tvar head = document.getElementsByTagName('head')[0];\n\thead.appendChild(script);\n\thead.removeChild(script);\n```\n\n这样的方式可以吗？显然不行！\n\n因为加载的脚本还没来的及执行就被删除了，所以我们需要 `让加载的脚本先执行一会儿` 。\n\n### 曲线救国\n\n```javascript\n\tsetTimeout(function(){\n\t\thead.removeChild(script);\n\t},200);\n```\n\n不得不说，这样的解决方式很不优雅，要是脚本200ms内还没有执行完毕，肯定会出问题。所以需要保证脚本执行完之后自动删除。\n\n## 加载script后自动删除节点\n\n```javascript\n\tvar script = document.createElement('script');\n\thead.appendChild(script);\n\tif(script.readyState){\n\t\tscript.onreadysctatechange =function(){\n\t\t\t//注意使用this避免内存泄漏\n\t\t\tif(this.readyState == 'completed' || this.readyState == ''loaded)\n\t\t\t\tthis.parentNode.removeChild(this);\n\t\t};\n\t}else{\n\t\tscript.onload =function(){\n\t\t\t//注意使用this避免内存泄漏\n\t\t\tthis.onload = null;\n\t\t\tthis.parentNode.removeChild(this);\n\t\t};\n\t}\n\tscript.src = url;\n```\n\n幸好IE支持 `onreadysctatechange` 事件，而标准浏览器支持 `onload` 事件来判断脚本的执行状态。\n\n## IE浏览器下的问题\n\n那么是不是现在我们的问题就解决了呢？\n\n测试后发现这样的解决方案不能完全避免内存的不断增长，标准浏览器包括Chrome随着轮询的都会有内存增长的现象，\n不过增长程度微乎其微（轮询间隔2m，增长速度也只有4k-8k）。但是IE会有十几到几十K的内存增长。\n\n你会看到我们在script加载完成之后已经将script元素删除了，为什么内存还会不断增长呢？\n\n很简单，这就是 `内存泄漏` 现象。\n\n## 重用script节点\n\n标准浏览器对script标签的处理就是每个script标签的地址（src）只能设置一次，\n后续的设置能够改变地址，但是对应地址的脚本内容不会执行，不管script标签是页面预留的还是动态插入。\n\nIE下面则很神奇，使用js动态插入的script标签不遵守这一规则。\n于是我们只需要动态的插入一个id已知的script标签，然后不断地改变它的src，以此方式加载的脚本都会执行。\n而且这个script节点也不必删除，下次请求继续重用即可。\n\n这样IE下面的内存泄漏问题就解决了！\n\n```javascript\n\tvar _ = function(id){return document.getElementById(id);};\n\t_.ajax = function(){};\n\t(function(){\n\t    //存储超时或异常的JSONP请求\n\t    _.ajax.TIMEOUT_REQUEST = [];\n\t\t//超时设定\n\t\t_.ajax.TIMEOUT = 5000;\n\t\tif(_.isIE){\n\t\t\t//JSONP重用标签的id\n\t\t\t_.ajax.SCRIPT_ID = 'ie_script_for_jsonp';\n\t\t\t//重用标签是否被JSONP请求占用\n\t\t\t_.ajax.SCRIPT_USED = false;\n\t\t\t//被占用时JSONP请求等待的时间\n\t\t\t_.ajax.WAIT_TIME = 100;\n\t\t\t//上次JSONP请求的时间\n\t\t\t_.ajax.LAST_USED_TIME = 0;\n\t\t\tvar script = document.createElement('script'), head = document.head || document.getElementsByTagName('head')[0];\n\t\t\tscript.setAttribute('id',_.ajax.SCRIPT_ID);\n\t\t\tscript.onreadystatechange = function(){\n\t\t\t\tif (this.readyState == \"loaded\" || this.readyState == \"complete\"){\n\t\t\t\t\t_.ajax.SCRIPT_USED = false;\n\t\t\t\t}\n\t\t\t};\n\t\t\thead.appendChild(script);\n\t\t}\n\t})();\n\t/**\n\t * @description 轮询JSONP请求调用，IE浏览器采用重用Script节点方式。\n\t * @param url 手动加上callback参数，自动追加了时间戳\n\t **/\n\t_.ajax.jsonp = function(url){\n\t\tif(!navigator.onLine){\n\t\t\t_.ajax.TIMEOUT_REQUEST.push(url);\n\t\t\treturn;\n\t\t}\n\t\tvar script, now = new Date().getTime(),\n\t\t\trequestUrl = url + (url.indexOf('?')>-1?'&timestamp=':'?timestamp=') + now,\n\t\t\thead = document.head || document.getElementsByTagName('head')[0];\n\t\tif(_.isIE && _.isIE < 9){\n\t\t\tscript = document.getElementById(_.ajax.SCRIPT_ID);\n\t\t\t//节点被占用\n\t\t\tif(_.ajax.SCRIPT_USED){\n\t\t\t\tif(_.ajax.LAST_USED_TIME === 0)\n\t\t\t\t\t_.ajax.LAST_USED_TIME = now;\n\t\t\t\t//已经超时\n\t\t\t\tif((now - _.ajax.LAST_USED_TIME) > _.ajax.TIMEOUT){\n\t\t\t\t\t_.ajax.LAST_USED_TIME = now;\n\t\t\t\t\tif(_.ajax.TIMEOUT_REQUEST.length>=1000)\n\t\t\t\t\t\t_.ajax.TIMEOUT_REQUEST.length = 0;\n\t\t\t\t\t_.ajax.TIMEOUT_REQUEST.push(script.src.split('&timestamp=')[0]);\n\t\t\t\t\tscript.src = requestUrl;\n\t\t\t\t//没有超时则等待\n\t\t\t\t}else{\n\t\t\t\t\tsetTimeout(function(){_.ajax.jsonp(url);},_.ajax.WAIT_TIME);\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\t_.ajax.SCRIPT_USED = true;\n\t\t\t\t_.ajax.LAST_USED_TIME = now;\n\t\t\t\tscript.src = requestUrl;\n\t\t\t}\n\t\t}else{\n\t\t\tscript = document.createElement('script');\n\t\t\thead.appendChild(script);\n\t\t\tscript.onload =\tfunction(){\n\t\t\t\tthis.onload = null;\n\t\t\t\tthis.parentNode.removeChild(this);\n\t\t\t};\n\t        script.onerror = function(){\n\t            _.ajax.TIMEOUT_REQUEST.push(this.src);\n\t        };\n\t\t\tscript.src = requestUrl;\n\t\t}\n\t};\n```\n\n## 测试结果\n\n对上述代码测试，使用 `sieve` 结合任务管理器，发现此方法引起的内存泄漏和chrome下面的差不多都在4K左右，测试环境是IE 8。\n\n```javascript\n\tvar i = 0;\n\twindow.onload = function(){\n\t\tsetInterval(function(){\n\t\t\t_.ajax.jsonp('data.js');\n\t\t},1000);\n\t};\n```\n\ndata.js 的内容：\n\n``````javascript\n\ti++;\n```\n\n##  后续说明\n\n其实之所以存在内存泄漏，是因为IE的 `removeChild` 方法存在内存泄漏的问题。对于这一点 `jQuery` 的 `empty` 方法已经考虑到。关于removeChild导致内存泄漏的问题，很早就被发现了，具体请看[这里](http://groups.google.com/group/jquery-dev/browse_thread/thread/4a99f6e9b2e33057/45ce657a48afd43a?pli=1)。\n\n一般的框架都有各自的删除节点的方式来避免内存泄漏问题，下面是 `EXT` 的处理方式：\n\n```javascript\n\t_.dom = function(){};\n\t/**\n\t * @description 采用ext的处理方式，也可以对删除的元素使用outerHTML=''，但是此方法不通用，某些元素的outerHTML属性只读\n\t * @param n 要删除的HTML节点\n\t */\n\t_.dom.remove = function(n){\n\t\tvar d;\n\t\tif(_.isIE){\n\t        if(n && n.tagName != 'BODY'){\n\t            d = d || document.createElement('div');\n\t            d.appendChild(n);\n\t            d.innerHTML = '';\n\t        }\n\t\t}else{\n\t\t    if(n && n.parentNode && n.tagName != 'BODY'){\n\t\t        n.parentNode.removeChild(n);\n\t\t    }\n\t\t}\n\t};\n```\n\n为什么jQuery的 `getJSON` 在进行跨域请求时仍然存在比较严重的内存泄漏？或许是script节点不同于普通的html元素吧，无法按照上述方式删除吧。\n","source":"_posts/JSONP-Memory-Leak.md","raw":"---\ntitle: JSONP Memory Leak\ndate: 2011-10-22\ntags: JavaScript\n---\n\n## 什么是JSONP？\n\n`JSONP` （JSON with Padding）是资料格式 JSON 的一种“使用模式”，可以让网页从别的网域要资料。另一个解决这个问题的新方法是跨来源资源共享。\n\n由于 `同源策略` ，一般来说位于 server1.example.com 的网页无法与不是 server1.example.com 的服务器沟通，而 HTML 的  `script`  元素是一个例外。利用 script元素的这个开放策略，网页可以得到从其他来源动态产生的 JSON 资料，而这种使用模式就是所谓的 JSONP。用 JSONP 抓到的资料并不是 JSON，而是任意的 JavaScript，用 JavaScript 直译器执行而不是用 JSON 解析器解析。\n\n以上内容摘抄自：[JSONP@维基百科](http://zh.wikipedia.org/wiki/JSONP)\n\n简而言之，JSONP就是WEB前端开发中最常用的一种 `跨域请求` 数据的方式。\n\n## 使用场景\n\nJSONP是一种常用的跨域请求脚本的方式。如果页面不涉及轮询，那也不是什么大问题。但是当页面中存在 `轮询` 跨域请求时，问题就被无数倍的放大了。所以需要额外小心由此带来的 `内存泄漏`！\n\n当然毫无疑问，IE系列始终是最让人纠结的。\n\n## 跨域加载脚本\n\n通常我们使用下面的方式来加载一段脚本：\n\n```javascript\n\tvar script = document.createElement('script');\n\tscript.src = 'http://www.abc.com/somepage?callback=check';\n\tscript.id = 'JSONP';\n\tvar head = document.getElementsByTagName('head')[0];\n\thead.appendChild(script);\n```\n\n对于一般的WEB应用程序这并不存在什么问题，但是一旦你的应用程序中使用到了轮询，这样只增加节点而不删除，将导致内存不断增长，增长的比例和加载脚本执行的内容也有很大的关系。读者可以尝试向页面不断载入jquery源代码，设定轮询间隔为2s，可以看到内存的增速达到几十M每秒。\n\n所以十分有必要在脚本执行完成以后删除这些script节点。\n\n## 删除加载的script节点\n\n ```javascript\n\tvar script = document.createElement('script');\n\tscript.src = 'http://www.abc.com/somepage?callback=check';\n\tscript.id = 'JSONP';\n\tscript.type = 'text/javascript';\n\tscript.charset = 'utf-8';\n\tvar head = document.getElementsByTagName('head')[0];\n\thead.appendChild(script);\n\thead.removeChild(script);\n```\n\n这样的方式可以吗？显然不行！\n\n因为加载的脚本还没来的及执行就被删除了，所以我们需要 `让加载的脚本先执行一会儿` 。\n\n### 曲线救国\n\n```javascript\n\tsetTimeout(function(){\n\t\thead.removeChild(script);\n\t},200);\n```\n\n不得不说，这样的解决方式很不优雅，要是脚本200ms内还没有执行完毕，肯定会出问题。所以需要保证脚本执行完之后自动删除。\n\n## 加载script后自动删除节点\n\n```javascript\n\tvar script = document.createElement('script');\n\thead.appendChild(script);\n\tif(script.readyState){\n\t\tscript.onreadysctatechange =function(){\n\t\t\t//注意使用this避免内存泄漏\n\t\t\tif(this.readyState == 'completed' || this.readyState == ''loaded)\n\t\t\t\tthis.parentNode.removeChild(this);\n\t\t};\n\t}else{\n\t\tscript.onload =function(){\n\t\t\t//注意使用this避免内存泄漏\n\t\t\tthis.onload = null;\n\t\t\tthis.parentNode.removeChild(this);\n\t\t};\n\t}\n\tscript.src = url;\n```\n\n幸好IE支持 `onreadysctatechange` 事件，而标准浏览器支持 `onload` 事件来判断脚本的执行状态。\n\n## IE浏览器下的问题\n\n那么是不是现在我们的问题就解决了呢？\n\n测试后发现这样的解决方案不能完全避免内存的不断增长，标准浏览器包括Chrome随着轮询的都会有内存增长的现象，\n不过增长程度微乎其微（轮询间隔2m，增长速度也只有4k-8k）。但是IE会有十几到几十K的内存增长。\n\n你会看到我们在script加载完成之后已经将script元素删除了，为什么内存还会不断增长呢？\n\n很简单，这就是 `内存泄漏` 现象。\n\n## 重用script节点\n\n标准浏览器对script标签的处理就是每个script标签的地址（src）只能设置一次，\n后续的设置能够改变地址，但是对应地址的脚本内容不会执行，不管script标签是页面预留的还是动态插入。\n\nIE下面则很神奇，使用js动态插入的script标签不遵守这一规则。\n于是我们只需要动态的插入一个id已知的script标签，然后不断地改变它的src，以此方式加载的脚本都会执行。\n而且这个script节点也不必删除，下次请求继续重用即可。\n\n这样IE下面的内存泄漏问题就解决了！\n\n```javascript\n\tvar _ = function(id){return document.getElementById(id);};\n\t_.ajax = function(){};\n\t(function(){\n\t    //存储超时或异常的JSONP请求\n\t    _.ajax.TIMEOUT_REQUEST = [];\n\t\t//超时设定\n\t\t_.ajax.TIMEOUT = 5000;\n\t\tif(_.isIE){\n\t\t\t//JSONP重用标签的id\n\t\t\t_.ajax.SCRIPT_ID = 'ie_script_for_jsonp';\n\t\t\t//重用标签是否被JSONP请求占用\n\t\t\t_.ajax.SCRIPT_USED = false;\n\t\t\t//被占用时JSONP请求等待的时间\n\t\t\t_.ajax.WAIT_TIME = 100;\n\t\t\t//上次JSONP请求的时间\n\t\t\t_.ajax.LAST_USED_TIME = 0;\n\t\t\tvar script = document.createElement('script'), head = document.head || document.getElementsByTagName('head')[0];\n\t\t\tscript.setAttribute('id',_.ajax.SCRIPT_ID);\n\t\t\tscript.onreadystatechange = function(){\n\t\t\t\tif (this.readyState == \"loaded\" || this.readyState == \"complete\"){\n\t\t\t\t\t_.ajax.SCRIPT_USED = false;\n\t\t\t\t}\n\t\t\t};\n\t\t\thead.appendChild(script);\n\t\t}\n\t})();\n\t/**\n\t * @description 轮询JSONP请求调用，IE浏览器采用重用Script节点方式。\n\t * @param url 手动加上callback参数，自动追加了时间戳\n\t **/\n\t_.ajax.jsonp = function(url){\n\t\tif(!navigator.onLine){\n\t\t\t_.ajax.TIMEOUT_REQUEST.push(url);\n\t\t\treturn;\n\t\t}\n\t\tvar script, now = new Date().getTime(),\n\t\t\trequestUrl = url + (url.indexOf('?')>-1?'&timestamp=':'?timestamp=') + now,\n\t\t\thead = document.head || document.getElementsByTagName('head')[0];\n\t\tif(_.isIE && _.isIE < 9){\n\t\t\tscript = document.getElementById(_.ajax.SCRIPT_ID);\n\t\t\t//节点被占用\n\t\t\tif(_.ajax.SCRIPT_USED){\n\t\t\t\tif(_.ajax.LAST_USED_TIME === 0)\n\t\t\t\t\t_.ajax.LAST_USED_TIME = now;\n\t\t\t\t//已经超时\n\t\t\t\tif((now - _.ajax.LAST_USED_TIME) > _.ajax.TIMEOUT){\n\t\t\t\t\t_.ajax.LAST_USED_TIME = now;\n\t\t\t\t\tif(_.ajax.TIMEOUT_REQUEST.length>=1000)\n\t\t\t\t\t\t_.ajax.TIMEOUT_REQUEST.length = 0;\n\t\t\t\t\t_.ajax.TIMEOUT_REQUEST.push(script.src.split('&timestamp=')[0]);\n\t\t\t\t\tscript.src = requestUrl;\n\t\t\t\t//没有超时则等待\n\t\t\t\t}else{\n\t\t\t\t\tsetTimeout(function(){_.ajax.jsonp(url);},_.ajax.WAIT_TIME);\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\t_.ajax.SCRIPT_USED = true;\n\t\t\t\t_.ajax.LAST_USED_TIME = now;\n\t\t\t\tscript.src = requestUrl;\n\t\t\t}\n\t\t}else{\n\t\t\tscript = document.createElement('script');\n\t\t\thead.appendChild(script);\n\t\t\tscript.onload =\tfunction(){\n\t\t\t\tthis.onload = null;\n\t\t\t\tthis.parentNode.removeChild(this);\n\t\t\t};\n\t        script.onerror = function(){\n\t            _.ajax.TIMEOUT_REQUEST.push(this.src);\n\t        };\n\t\t\tscript.src = requestUrl;\n\t\t}\n\t};\n```\n\n## 测试结果\n\n对上述代码测试，使用 `sieve` 结合任务管理器，发现此方法引起的内存泄漏和chrome下面的差不多都在4K左右，测试环境是IE 8。\n\n```javascript\n\tvar i = 0;\n\twindow.onload = function(){\n\t\tsetInterval(function(){\n\t\t\t_.ajax.jsonp('data.js');\n\t\t},1000);\n\t};\n```\n\ndata.js 的内容：\n\n``````javascript\n\ti++;\n```\n\n##  后续说明\n\n其实之所以存在内存泄漏，是因为IE的 `removeChild` 方法存在内存泄漏的问题。对于这一点 `jQuery` 的 `empty` 方法已经考虑到。关于removeChild导致内存泄漏的问题，很早就被发现了，具体请看[这里](http://groups.google.com/group/jquery-dev/browse_thread/thread/4a99f6e9b2e33057/45ce657a48afd43a?pli=1)。\n\n一般的框架都有各自的删除节点的方式来避免内存泄漏问题，下面是 `EXT` 的处理方式：\n\n```javascript\n\t_.dom = function(){};\n\t/**\n\t * @description 采用ext的处理方式，也可以对删除的元素使用outerHTML=''，但是此方法不通用，某些元素的outerHTML属性只读\n\t * @param n 要删除的HTML节点\n\t */\n\t_.dom.remove = function(n){\n\t\tvar d;\n\t\tif(_.isIE){\n\t        if(n && n.tagName != 'BODY'){\n\t            d = d || document.createElement('div');\n\t            d.appendChild(n);\n\t            d.innerHTML = '';\n\t        }\n\t\t}else{\n\t\t    if(n && n.parentNode && n.tagName != 'BODY'){\n\t\t        n.parentNode.removeChild(n);\n\t\t    }\n\t\t}\n\t};\n```\n\n为什么jQuery的 `getJSON` 在进行跨域请求时仍然存在比较严重的内存泄漏？或许是script节点不同于普通的html元素吧，无法按照上述方式删除吧。\n","slug":"JSONP-Memory-Leak","published":1,"updated":"2017-12-22T08:19:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbi06osz0000da95nvrnoagy","content":"<h2 id=\"什么是JSONP？\"><a href=\"#什么是JSONP？\" class=\"headerlink\" title=\"什么是JSONP？\"></a>什么是JSONP？</h2><p><code>JSONP</code> （JSON with Padding）是资料格式 JSON 的一种“使用模式”，可以让网页从别的网域要资料。另一个解决这个问题的新方法是跨来源资源共享。</p>\n<p>由于 <code>同源策略</code> ，一般来说位于 server1.example.com 的网页无法与不是 server1.example.com 的服务器沟通，而 HTML 的  <code>script</code>  元素是一个例外。利用 script元素的这个开放策略，网页可以得到从其他来源动态产生的 JSON 资料，而这种使用模式就是所谓的 JSONP。用 JSONP 抓到的资料并不是 JSON，而是任意的 JavaScript，用 JavaScript 直译器执行而不是用 JSON 解析器解析。</p>\n<p>以上内容摘抄自：<a href=\"http://zh.wikipedia.org/wiki/JSONP\" target=\"_blank\" rel=\"noopener\">JSONP@维基百科</a></p>\n<p>简而言之，JSONP就是WEB前端开发中最常用的一种 <code>跨域请求</code> 数据的方式。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>JSONP是一种常用的跨域请求脚本的方式。如果页面不涉及轮询，那也不是什么大问题。但是当页面中存在 <code>轮询</code> 跨域请求时，问题就被无数倍的放大了。所以需要额外小心由此带来的 <code>内存泄漏</code>！</p>\n<p>当然毫无疑问，IE系列始终是最让人纠结的。</p>\n<h2 id=\"跨域加载脚本\"><a href=\"#跨域加载脚本\" class=\"headerlink\" title=\"跨域加载脚本\"></a>跨域加载脚本</h2><p>通常我们使用下面的方式来加载一段脚本：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">script.src = <span class=\"string\">'http://www.abc.com/somepage?callback=check'</span>;</span><br><span class=\"line\">script.id = <span class=\"string\">'JSONP'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> head = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">head.appendChild(script);</span><br></pre></td></tr></table></figure>\n<p>对于一般的WEB应用程序这并不存在什么问题，但是一旦你的应用程序中使用到了轮询，这样只增加节点而不删除，将导致内存不断增长，增长的比例和加载脚本执行的内容也有很大的关系。读者可以尝试向页面不断载入jquery源代码，设定轮询间隔为2s，可以看到内存的增速达到几十M每秒。</p>\n<p>所以十分有必要在脚本执行完成以后删除这些script节点。</p>\n<h2 id=\"删除加载的script节点\"><a href=\"#删除加载的script节点\" class=\"headerlink\" title=\"删除加载的script节点\"></a>删除加载的script节点</h2> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">script.src = <span class=\"string\">'http://www.abc.com/somepage?callback=check'</span>;</span><br><span class=\"line\">script.id = <span class=\"string\">'JSONP'</span>;</span><br><span class=\"line\">script.type = <span class=\"string\">'text/javascript'</span>;</span><br><span class=\"line\">script.charset = <span class=\"string\">'utf-8'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> head = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">head.appendChild(script);</span><br><span class=\"line\">head.removeChild(script);</span><br></pre></td></tr></table></figure>\n<p>这样的方式可以吗？显然不行！</p>\n<p>因为加载的脚本还没来的及执行就被删除了，所以我们需要 <code>让加载的脚本先执行一会儿</code> 。</p>\n<h3 id=\"曲线救国\"><a href=\"#曲线救国\" class=\"headerlink\" title=\"曲线救国\"></a>曲线救国</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\thead.removeChild(script);</span><br><span class=\"line\">&#125;,<span class=\"number\">200</span>);</span><br></pre></td></tr></table></figure>\n<p>不得不说，这样的解决方式很不优雅，要是脚本200ms内还没有执行完毕，肯定会出问题。所以需要保证脚本执行完之后自动删除。</p>\n<h2 id=\"加载script后自动删除节点\"><a href=\"#加载script后自动删除节点\" class=\"headerlink\" title=\"加载script后自动删除节点\"></a>加载script后自动删除节点</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">head.appendChild(script);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(script.readyState)&#123;</span><br><span class=\"line\">\tscript.onreadysctatechange =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//注意使用this避免内存泄漏</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.readyState == <span class=\"string\">'completed'</span> || <span class=\"keyword\">this</span>.readyState == <span class=\"string\">''</span>loaded)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.parentNode.removeChild(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\tscript.onload =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//注意使用this避免内存泄漏</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.parentNode.removeChild(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">script.src = url;</span><br></pre></td></tr></table></figure>\n<p>幸好IE支持 <code>onreadysctatechange</code> 事件，而标准浏览器支持 <code>onload</code> 事件来判断脚本的执行状态。</p>\n<h2 id=\"IE浏览器下的问题\"><a href=\"#IE浏览器下的问题\" class=\"headerlink\" title=\"IE浏览器下的问题\"></a>IE浏览器下的问题</h2><p>那么是不是现在我们的问题就解决了呢？</p>\n<p>测试后发现这样的解决方案不能完全避免内存的不断增长，标准浏览器包括Chrome随着轮询的都会有内存增长的现象，<br>不过增长程度微乎其微（轮询间隔2m，增长速度也只有4k-8k）。但是IE会有十几到几十K的内存增长。</p>\n<p>你会看到我们在script加载完成之后已经将script元素删除了，为什么内存还会不断增长呢？</p>\n<p>很简单，这就是 <code>内存泄漏</code> 现象。</p>\n<h2 id=\"重用script节点\"><a href=\"#重用script节点\" class=\"headerlink\" title=\"重用script节点\"></a>重用script节点</h2><p>标准浏览器对script标签的处理就是每个script标签的地址（src）只能设置一次，<br>后续的设置能够改变地址，但是对应地址的脚本内容不会执行，不管script标签是页面预留的还是动态插入。</p>\n<p>IE下面则很神奇，使用js动态插入的script标签不遵守这一规则。<br>于是我们只需要动态的插入一个id已知的script标签，然后不断地改变它的src，以此方式加载的脚本都会执行。<br>而且这个script节点也不必删除，下次请求继续重用即可。</p>\n<p>这样IE下面的内存泄漏问题就解决了！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.getElementById(id);&#125;;</span><br><span class=\"line\">_.ajax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//存储超时或异常的JSONP请求</span></span><br><span class=\"line\">    _.ajax.TIMEOUT_REQUEST = [];</span><br><span class=\"line\">\t<span class=\"comment\">//超时设定</span></span><br><span class=\"line\">\t_.ajax.TIMEOUT = <span class=\"number\">5000</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(_.isIE)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//JSONP重用标签的id</span></span><br><span class=\"line\">\t\t_.ajax.SCRIPT_ID = <span class=\"string\">'ie_script_for_jsonp'</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//重用标签是否被JSONP请求占用</span></span><br><span class=\"line\">\t\t_.ajax.SCRIPT_USED = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//被占用时JSONP请求等待的时间</span></span><br><span class=\"line\">\t\t_.ajax.WAIT_TIME = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//上次JSONP请求的时间</span></span><br><span class=\"line\">\t\t_.ajax.LAST_USED_TIME = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>), head = <span class=\"built_in\">document</span>.head || <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\tscript.setAttribute(<span class=\"string\">'id'</span>,_.ajax.SCRIPT_ID);</span><br><span class=\"line\">\t\tscript.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.readyState == <span class=\"string\">\"loaded\"</span> || <span class=\"keyword\">this</span>.readyState == <span class=\"string\">\"complete\"</span>)&#123;</span><br><span class=\"line\">\t\t\t\t_.ajax.SCRIPT_USED = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\thead.appendChild(script);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description 轮询JSONP请求调用，IE浏览器采用重用Script节点方式。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param url 手动加上callback参数，自动追加了时间戳</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\">_.ajax.jsonp = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!navigator.onLine)&#123;</span><br><span class=\"line\">\t\t_.ajax.TIMEOUT_REQUEST.push(url);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> script, now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime(),</span><br><span class=\"line\">\t\trequestUrl = url + (url.indexOf(<span class=\"string\">'?'</span>)&gt;<span class=\"number\">-1</span>?<span class=\"string\">'&amp;timestamp='</span>:<span class=\"string\">'?timestamp='</span>) + now,</span><br><span class=\"line\">\t\thead = <span class=\"built_in\">document</span>.head || <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(_.isIE &amp;&amp; _.isIE &lt; <span class=\"number\">9</span>)&#123;</span><br><span class=\"line\">\t\tscript = <span class=\"built_in\">document</span>.getElementById(_.ajax.SCRIPT_ID);</span><br><span class=\"line\">\t\t<span class=\"comment\">//节点被占用</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(_.ajax.SCRIPT_USED)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(_.ajax.LAST_USED_TIME === <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t_.ajax.LAST_USED_TIME = now;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//已经超时</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>((now - _.ajax.LAST_USED_TIME) &gt; _.ajax.TIMEOUT)&#123;</span><br><span class=\"line\">\t\t\t\t_.ajax.LAST_USED_TIME = now;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(_.ajax.TIMEOUT_REQUEST.length&gt;=<span class=\"number\">1000</span>)</span><br><span class=\"line\">\t\t\t\t\t_.ajax.TIMEOUT_REQUEST.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t_.ajax.TIMEOUT_REQUEST.push(script.src.split(<span class=\"string\">'&amp;timestamp='</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t\t\tscript.src = requestUrl;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//没有超时则等待</span></span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;_.ajax.jsonp(url);&#125;,_.ajax.WAIT_TIME);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t_.ajax.SCRIPT_USED = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t_.ajax.LAST_USED_TIME = now;</span><br><span class=\"line\">\t\t\tscript.src = requestUrl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tscript = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">\t\thead.appendChild(script);</span><br><span class=\"line\">\t\tscript.onload =\t<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.parentNode.removeChild(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">        script.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            _.ajax.TIMEOUT_REQUEST.push(<span class=\"keyword\">this</span>.src);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">\t\tscript.src = requestUrl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h2><p>对上述代码测试，使用 <code>sieve</code> 结合任务管理器，发现此方法引起的内存泄漏和chrome下面的差不多都在4K左右，测试环境是IE 8。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tsetInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t_.ajax.jsonp(<span class=\"string\">'data.js'</span>);</span><br><span class=\"line\">\t&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>data.js 的内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i++;</span><br></pre></td></tr></table></figure>\n<h2 id=\"后续说明\"><a href=\"#后续说明\" class=\"headerlink\" title=\"后续说明\"></a>后续说明</h2><p>其实之所以存在内存泄漏，是因为IE的 <code>removeChild</code> 方法存在内存泄漏的问题。对于这一点 <code>jQuery</code> 的 <code>empty</code> 方法已经考虑到。关于removeChild导致内存泄漏的问题，很早就被发现了，具体请看<a href=\"http://groups.google.com/group/jquery-dev/browse_thread/thread/4a99f6e9b2e33057/45ce657a48afd43a?pli=1\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>一般的框架都有各自的删除节点的方式来避免内存泄漏问题，下面是 <code>EXT</code> 的处理方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.dom = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description 采用ext的处理方式，也可以对删除的元素使用outerHTML=''，但是此方法不通用，某些元素的outerHTML属性只读</span></span><br><span class=\"line\"><span class=\"comment\"> * @param n 要删除的HTML节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">_.dom.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> d;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(_.isIE)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &amp;&amp; n.tagName != <span class=\"string\">'BODY'</span>)&#123;</span><br><span class=\"line\">            d = d || <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">            d.appendChild(n);</span><br><span class=\"line\">            d.innerHTML = <span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(n &amp;&amp; n.parentNode &amp;&amp; n.tagName != <span class=\"string\">'BODY'</span>)&#123;</span><br><span class=\"line\">\t        n.parentNode.removeChild(n);</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>为什么jQuery的 <code>getJSON</code> 在进行跨域请求时仍然存在比较严重的内存泄漏？或许是script节点不同于普通的html元素吧，无法按照上述方式删除吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是JSONP？\"><a href=\"#什么是JSONP？\" class=\"headerlink\" title=\"什么是JSONP？\"></a>什么是JSONP？</h2><p><code>JSONP</code> （JSON with Padding）是资料格式 JSON 的一种“使用模式”，可以让网页从别的网域要资料。另一个解决这个问题的新方法是跨来源资源共享。</p>\n<p>由于 <code>同源策略</code> ，一般来说位于 server1.example.com 的网页无法与不是 server1.example.com 的服务器沟通，而 HTML 的  <code>script</code>  元素是一个例外。利用 script元素的这个开放策略，网页可以得到从其他来源动态产生的 JSON 资料，而这种使用模式就是所谓的 JSONP。用 JSONP 抓到的资料并不是 JSON，而是任意的 JavaScript，用 JavaScript 直译器执行而不是用 JSON 解析器解析。</p>\n<p>以上内容摘抄自：<a href=\"http://zh.wikipedia.org/wiki/JSONP\" target=\"_blank\" rel=\"noopener\">JSONP@维基百科</a></p>\n<p>简而言之，JSONP就是WEB前端开发中最常用的一种 <code>跨域请求</code> 数据的方式。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>JSONP是一种常用的跨域请求脚本的方式。如果页面不涉及轮询，那也不是什么大问题。但是当页面中存在 <code>轮询</code> 跨域请求时，问题就被无数倍的放大了。所以需要额外小心由此带来的 <code>内存泄漏</code>！</p>\n<p>当然毫无疑问，IE系列始终是最让人纠结的。</p>\n<h2 id=\"跨域加载脚本\"><a href=\"#跨域加载脚本\" class=\"headerlink\" title=\"跨域加载脚本\"></a>跨域加载脚本</h2><p>通常我们使用下面的方式来加载一段脚本：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">script.src = <span class=\"string\">'http://www.abc.com/somepage?callback=check'</span>;</span><br><span class=\"line\">script.id = <span class=\"string\">'JSONP'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> head = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">head.appendChild(script);</span><br></pre></td></tr></table></figure>\n<p>对于一般的WEB应用程序这并不存在什么问题，但是一旦你的应用程序中使用到了轮询，这样只增加节点而不删除，将导致内存不断增长，增长的比例和加载脚本执行的内容也有很大的关系。读者可以尝试向页面不断载入jquery源代码，设定轮询间隔为2s，可以看到内存的增速达到几十M每秒。</p>\n<p>所以十分有必要在脚本执行完成以后删除这些script节点。</p>\n<h2 id=\"删除加载的script节点\"><a href=\"#删除加载的script节点\" class=\"headerlink\" title=\"删除加载的script节点\"></a>删除加载的script节点</h2> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">script.src = <span class=\"string\">'http://www.abc.com/somepage?callback=check'</span>;</span><br><span class=\"line\">script.id = <span class=\"string\">'JSONP'</span>;</span><br><span class=\"line\">script.type = <span class=\"string\">'text/javascript'</span>;</span><br><span class=\"line\">script.charset = <span class=\"string\">'utf-8'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> head = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">head.appendChild(script);</span><br><span class=\"line\">head.removeChild(script);</span><br></pre></td></tr></table></figure>\n<p>这样的方式可以吗？显然不行！</p>\n<p>因为加载的脚本还没来的及执行就被删除了，所以我们需要 <code>让加载的脚本先执行一会儿</code> 。</p>\n<h3 id=\"曲线救国\"><a href=\"#曲线救国\" class=\"headerlink\" title=\"曲线救国\"></a>曲线救国</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\thead.removeChild(script);</span><br><span class=\"line\">&#125;,<span class=\"number\">200</span>);</span><br></pre></td></tr></table></figure>\n<p>不得不说，这样的解决方式很不优雅，要是脚本200ms内还没有执行完毕，肯定会出问题。所以需要保证脚本执行完之后自动删除。</p>\n<h2 id=\"加载script后自动删除节点\"><a href=\"#加载script后自动删除节点\" class=\"headerlink\" title=\"加载script后自动删除节点\"></a>加载script后自动删除节点</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">head.appendChild(script);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(script.readyState)&#123;</span><br><span class=\"line\">\tscript.onreadysctatechange =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//注意使用this避免内存泄漏</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.readyState == <span class=\"string\">'completed'</span> || <span class=\"keyword\">this</span>.readyState == <span class=\"string\">''</span>loaded)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.parentNode.removeChild(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\tscript.onload =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//注意使用this避免内存泄漏</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.parentNode.removeChild(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">script.src = url;</span><br></pre></td></tr></table></figure>\n<p>幸好IE支持 <code>onreadysctatechange</code> 事件，而标准浏览器支持 <code>onload</code> 事件来判断脚本的执行状态。</p>\n<h2 id=\"IE浏览器下的问题\"><a href=\"#IE浏览器下的问题\" class=\"headerlink\" title=\"IE浏览器下的问题\"></a>IE浏览器下的问题</h2><p>那么是不是现在我们的问题就解决了呢？</p>\n<p>测试后发现这样的解决方案不能完全避免内存的不断增长，标准浏览器包括Chrome随着轮询的都会有内存增长的现象，<br>不过增长程度微乎其微（轮询间隔2m，增长速度也只有4k-8k）。但是IE会有十几到几十K的内存增长。</p>\n<p>你会看到我们在script加载完成之后已经将script元素删除了，为什么内存还会不断增长呢？</p>\n<p>很简单，这就是 <code>内存泄漏</code> 现象。</p>\n<h2 id=\"重用script节点\"><a href=\"#重用script节点\" class=\"headerlink\" title=\"重用script节点\"></a>重用script节点</h2><p>标准浏览器对script标签的处理就是每个script标签的地址（src）只能设置一次，<br>后续的设置能够改变地址，但是对应地址的脚本内容不会执行，不管script标签是页面预留的还是动态插入。</p>\n<p>IE下面则很神奇，使用js动态插入的script标签不遵守这一规则。<br>于是我们只需要动态的插入一个id已知的script标签，然后不断地改变它的src，以此方式加载的脚本都会执行。<br>而且这个script节点也不必删除，下次请求继续重用即可。</p>\n<p>这样IE下面的内存泄漏问题就解决了！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.getElementById(id);&#125;;</span><br><span class=\"line\">_.ajax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//存储超时或异常的JSONP请求</span></span><br><span class=\"line\">    _.ajax.TIMEOUT_REQUEST = [];</span><br><span class=\"line\">\t<span class=\"comment\">//超时设定</span></span><br><span class=\"line\">\t_.ajax.TIMEOUT = <span class=\"number\">5000</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(_.isIE)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//JSONP重用标签的id</span></span><br><span class=\"line\">\t\t_.ajax.SCRIPT_ID = <span class=\"string\">'ie_script_for_jsonp'</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//重用标签是否被JSONP请求占用</span></span><br><span class=\"line\">\t\t_.ajax.SCRIPT_USED = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//被占用时JSONP请求等待的时间</span></span><br><span class=\"line\">\t\t_.ajax.WAIT_TIME = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//上次JSONP请求的时间</span></span><br><span class=\"line\">\t\t_.ajax.LAST_USED_TIME = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>), head = <span class=\"built_in\">document</span>.head || <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\tscript.setAttribute(<span class=\"string\">'id'</span>,_.ajax.SCRIPT_ID);</span><br><span class=\"line\">\t\tscript.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.readyState == <span class=\"string\">\"loaded\"</span> || <span class=\"keyword\">this</span>.readyState == <span class=\"string\">\"complete\"</span>)&#123;</span><br><span class=\"line\">\t\t\t\t_.ajax.SCRIPT_USED = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\thead.appendChild(script);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description 轮询JSONP请求调用，IE浏览器采用重用Script节点方式。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param url 手动加上callback参数，自动追加了时间戳</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\">_.ajax.jsonp = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!navigator.onLine)&#123;</span><br><span class=\"line\">\t\t_.ajax.TIMEOUT_REQUEST.push(url);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> script, now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime(),</span><br><span class=\"line\">\t\trequestUrl = url + (url.indexOf(<span class=\"string\">'?'</span>)&gt;<span class=\"number\">-1</span>?<span class=\"string\">'&amp;timestamp='</span>:<span class=\"string\">'?timestamp='</span>) + now,</span><br><span class=\"line\">\t\thead = <span class=\"built_in\">document</span>.head || <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(_.isIE &amp;&amp; _.isIE &lt; <span class=\"number\">9</span>)&#123;</span><br><span class=\"line\">\t\tscript = <span class=\"built_in\">document</span>.getElementById(_.ajax.SCRIPT_ID);</span><br><span class=\"line\">\t\t<span class=\"comment\">//节点被占用</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(_.ajax.SCRIPT_USED)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(_.ajax.LAST_USED_TIME === <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t_.ajax.LAST_USED_TIME = now;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//已经超时</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>((now - _.ajax.LAST_USED_TIME) &gt; _.ajax.TIMEOUT)&#123;</span><br><span class=\"line\">\t\t\t\t_.ajax.LAST_USED_TIME = now;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(_.ajax.TIMEOUT_REQUEST.length&gt;=<span class=\"number\">1000</span>)</span><br><span class=\"line\">\t\t\t\t\t_.ajax.TIMEOUT_REQUEST.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t_.ajax.TIMEOUT_REQUEST.push(script.src.split(<span class=\"string\">'&amp;timestamp='</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t\t\tscript.src = requestUrl;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//没有超时则等待</span></span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;_.ajax.jsonp(url);&#125;,_.ajax.WAIT_TIME);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t_.ajax.SCRIPT_USED = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t_.ajax.LAST_USED_TIME = now;</span><br><span class=\"line\">\t\t\tscript.src = requestUrl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tscript = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">\t\thead.appendChild(script);</span><br><span class=\"line\">\t\tscript.onload =\t<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.parentNode.removeChild(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">        script.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            _.ajax.TIMEOUT_REQUEST.push(<span class=\"keyword\">this</span>.src);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">\t\tscript.src = requestUrl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h2><p>对上述代码测试，使用 <code>sieve</code> 结合任务管理器，发现此方法引起的内存泄漏和chrome下面的差不多都在4K左右，测试环境是IE 8。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tsetInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t_.ajax.jsonp(<span class=\"string\">'data.js'</span>);</span><br><span class=\"line\">\t&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>data.js 的内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i++;</span><br></pre></td></tr></table></figure>\n<h2 id=\"后续说明\"><a href=\"#后续说明\" class=\"headerlink\" title=\"后续说明\"></a>后续说明</h2><p>其实之所以存在内存泄漏，是因为IE的 <code>removeChild</code> 方法存在内存泄漏的问题。对于这一点 <code>jQuery</code> 的 <code>empty</code> 方法已经考虑到。关于removeChild导致内存泄漏的问题，很早就被发现了，具体请看<a href=\"http://groups.google.com/group/jquery-dev/browse_thread/thread/4a99f6e9b2e33057/45ce657a48afd43a?pli=1\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>一般的框架都有各自的删除节点的方式来避免内存泄漏问题，下面是 <code>EXT</code> 的处理方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.dom = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description 采用ext的处理方式，也可以对删除的元素使用outerHTML=''，但是此方法不通用，某些元素的outerHTML属性只读</span></span><br><span class=\"line\"><span class=\"comment\"> * @param n 要删除的HTML节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">_.dom.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> d;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(_.isIE)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &amp;&amp; n.tagName != <span class=\"string\">'BODY'</span>)&#123;</span><br><span class=\"line\">            d = d || <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">            d.appendChild(n);</span><br><span class=\"line\">            d.innerHTML = <span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(n &amp;&amp; n.parentNode &amp;&amp; n.tagName != <span class=\"string\">'BODY'</span>)&#123;</span><br><span class=\"line\">\t        n.parentNode.removeChild(n);</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>为什么jQuery的 <code>getJSON</code> 在进行跨域请求时仍然存在比较严重的内存泄漏？或许是script节点不同于普通的html元素吧，无法按照上述方式删除吧。</p>\n"},{"title":"JavaScript乱弹之（一）：JQuery+CSS入门","date":"2010-01-24T16:00:00.000Z","_content":"\n一直没有系统的学习JavaScript，因为总感觉花太多时间来学习JS似乎有点浪费。\n现实也似乎是如此，太多人执迷于服务器端语言而忽视了最基本的HTML、JavaScript语言。\n其中这个**“太多人”**里面自然也包括我在内。\n\n不过本文并不打算去按照一篇HTML语言基础或者JavaScript语言基础教程来介绍这些东西。\n即使你和我一样是一个新手，阅读他们也不会有什么困难。\n因为我的宗旨就是在应用中掌握他们，正所谓**“书读百遍其义自见”**就是这个道理。\n\n注明：本系列文章是本人学习笔记和知识摘要，错误之处肯定很多，还请指出。\n\n```asp\n<%@ Page Language=\"C#\" AutoEventWireup=\"true\"  CodeFile=\"Default.aspx.cs\" Inherits=\"_Default\" %>\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head runat=\"server\">\n    <title>JS乱弹系列（一）</title>\n    <%--这里只例举了2种常用的CSS选择器--%>\n    <style type=\"text/css\">\n        body\n        {\n            background-color:Black;\n            }\n    #div1\n    {\n        width:300px;\n        height:50px;\n        background-color:White;\n        border-color:Red;\n        margin-top:1%;\n        margin-bottom:2%;\n    }\n        #div2\n    {\n        width:417px;\n        height:133px;\n        background-color:White;\n        margin-bottom:2%;\n    }\n        #div3\n    {\n        width:500px;\n        height:50px;\n        background-color:White;\n        margin-bottom:2%;\n    }\n        #div4\n    {\n        width:600px;\n        height:50px;\n        background-color:White;\n        margin-bottom:2%;\n    }\n        #div5\n    {\n        width:700px;\n        height:100px;\n        background-color:White;\n        text-align:center;\n    }\n    </style>\n    <script src=\"JS/jquery-1.3.2-vsdoc2.js\" type=\"text/javascript\"></script>\n    <%--加入此引用后，按Crtl+Shift+J更新智能感知#--%>\n    <script language=\"javascript\" type=\"text/javascript\">\n        $(document).ready(function() { $(\"#btn1\").bind(\"click\", function() { alert(\"绑定成功!\"); }) })\n        $(document).ready(function() {\n            $(\"#btn\").bind(\"click\", function() {\n                var name = $(\"#txtname\").val();\n                var pwd = $(\"#txtpwd\").val();\n                if (name=== \"\" || pwd === \"\")\n                { alert(\"用户名和密码不能为空！\"); return false; }\n                else {\n                    alert(name + \"/\" + pwd);\n                    return true;\n                }\n            })\n        })\n        //假值，按照crockford的建议最好使用===代替==\n        $(document).ready(function() {\n            var a = (undefined == \"\");\n            var b = (undefined == null);\n            var c = (undefined == NaN);\n            var d = (undefined === \"\");\n            var e = (undefined === null);\n            var f = (undefined === NaN);\n            $(\"#div2\").text(String(a) + \"\\n\" + String(b) + \"\\n\" + String(c) + \"\\n\" + String(d) + \"\\n\" + String(e) + \"\\n\" + String(f));\n        })\n//        是不是很像C#的typeof\n        $(document).ready(function() {\n            var a =typeof(undefined) ;\n            var b =typeof(null) ;\n            var c =typeof(\"\") ;\n            var d = typeof (NaN);\n            $(\"#div3\").text(String(a) + \"/\" + String(b) + \"/\" + String(c) + \"/\" + String(d));\n        })\n        //存在表单输入时自动聚焦\n        $(document).ready(function() { document.form1.txtname.focus(); })\n    </script>\n</head>\n<body>\n    <form id=\"form1\" runat=\"server\">\n    <div id=\"divmain\">\n<div id=\"div1\">\n这是div1\n</div>\n<div id=\"div2\">\n这是div2\n<br/>\nJavaScript的假值，你知道这些结果是true还是false吗？\n1.undefined == \"\"\n2.undefined == null\n3.undefined == NaN\n4.undefined === \"\"\n5.undefined === null\n6.undefined === NaN\n</div>\n<div id=\"div3\">\n这是div3\n</div>\n<div id=\"div4\">\n    <input id=\"btn1\" type=\"button\" value=\"使用JQuery为按钮绑定事件\"  title=\"在ready函数中绑定button的Click函数\"/>\n</div>\n<div id=\"div5\">\n这是模拟一个登陆验证\n<br />\n  <span style=\"background-color:White\"> 账号：</span><asp:TextBox ID=\"txtname\" runat=\"server\"></asp:TextBox>\n    <br />\n   <span style=\"background-color:White\"> 密码：</span><asp:TextBox ID=\"txtpwd\" runat=\"server\"></asp:TextBox>\n    <br />\n    <asp:Button ID=\"btn\" runat=\"server\" Text=\"登陆验证\"/>\n</div>\n</div>\n    </form>\n</body>\n</html>\n```\n","source":"_posts/JavaScript乱弹之（一）：JQuery+CSS入门.md","raw":"---\ntitle: JavaScript乱弹之（一）：JQuery+CSS入门\ndate: 2010-01-25\ntags: JavaScript\n---\n\n一直没有系统的学习JavaScript，因为总感觉花太多时间来学习JS似乎有点浪费。\n现实也似乎是如此，太多人执迷于服务器端语言而忽视了最基本的HTML、JavaScript语言。\n其中这个**“太多人”**里面自然也包括我在内。\n\n不过本文并不打算去按照一篇HTML语言基础或者JavaScript语言基础教程来介绍这些东西。\n即使你和我一样是一个新手，阅读他们也不会有什么困难。\n因为我的宗旨就是在应用中掌握他们，正所谓**“书读百遍其义自见”**就是这个道理。\n\n注明：本系列文章是本人学习笔记和知识摘要，错误之处肯定很多，还请指出。\n\n```asp\n<%@ Page Language=\"C#\" AutoEventWireup=\"true\"  CodeFile=\"Default.aspx.cs\" Inherits=\"_Default\" %>\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head runat=\"server\">\n    <title>JS乱弹系列（一）</title>\n    <%--这里只例举了2种常用的CSS选择器--%>\n    <style type=\"text/css\">\n        body\n        {\n            background-color:Black;\n            }\n    #div1\n    {\n        width:300px;\n        height:50px;\n        background-color:White;\n        border-color:Red;\n        margin-top:1%;\n        margin-bottom:2%;\n    }\n        #div2\n    {\n        width:417px;\n        height:133px;\n        background-color:White;\n        margin-bottom:2%;\n    }\n        #div3\n    {\n        width:500px;\n        height:50px;\n        background-color:White;\n        margin-bottom:2%;\n    }\n        #div4\n    {\n        width:600px;\n        height:50px;\n        background-color:White;\n        margin-bottom:2%;\n    }\n        #div5\n    {\n        width:700px;\n        height:100px;\n        background-color:White;\n        text-align:center;\n    }\n    </style>\n    <script src=\"JS/jquery-1.3.2-vsdoc2.js\" type=\"text/javascript\"></script>\n    <%--加入此引用后，按Crtl+Shift+J更新智能感知#--%>\n    <script language=\"javascript\" type=\"text/javascript\">\n        $(document).ready(function() { $(\"#btn1\").bind(\"click\", function() { alert(\"绑定成功!\"); }) })\n        $(document).ready(function() {\n            $(\"#btn\").bind(\"click\", function() {\n                var name = $(\"#txtname\").val();\n                var pwd = $(\"#txtpwd\").val();\n                if (name=== \"\" || pwd === \"\")\n                { alert(\"用户名和密码不能为空！\"); return false; }\n                else {\n                    alert(name + \"/\" + pwd);\n                    return true;\n                }\n            })\n        })\n        //假值，按照crockford的建议最好使用===代替==\n        $(document).ready(function() {\n            var a = (undefined == \"\");\n            var b = (undefined == null);\n            var c = (undefined == NaN);\n            var d = (undefined === \"\");\n            var e = (undefined === null);\n            var f = (undefined === NaN);\n            $(\"#div2\").text(String(a) + \"\\n\" + String(b) + \"\\n\" + String(c) + \"\\n\" + String(d) + \"\\n\" + String(e) + \"\\n\" + String(f));\n        })\n//        是不是很像C#的typeof\n        $(document).ready(function() {\n            var a =typeof(undefined) ;\n            var b =typeof(null) ;\n            var c =typeof(\"\") ;\n            var d = typeof (NaN);\n            $(\"#div3\").text(String(a) + \"/\" + String(b) + \"/\" + String(c) + \"/\" + String(d));\n        })\n        //存在表单输入时自动聚焦\n        $(document).ready(function() { document.form1.txtname.focus(); })\n    </script>\n</head>\n<body>\n    <form id=\"form1\" runat=\"server\">\n    <div id=\"divmain\">\n<div id=\"div1\">\n这是div1\n</div>\n<div id=\"div2\">\n这是div2\n<br/>\nJavaScript的假值，你知道这些结果是true还是false吗？\n1.undefined == \"\"\n2.undefined == null\n3.undefined == NaN\n4.undefined === \"\"\n5.undefined === null\n6.undefined === NaN\n</div>\n<div id=\"div3\">\n这是div3\n</div>\n<div id=\"div4\">\n    <input id=\"btn1\" type=\"button\" value=\"使用JQuery为按钮绑定事件\"  title=\"在ready函数中绑定button的Click函数\"/>\n</div>\n<div id=\"div5\">\n这是模拟一个登陆验证\n<br />\n  <span style=\"background-color:White\"> 账号：</span><asp:TextBox ID=\"txtname\" runat=\"server\"></asp:TextBox>\n    <br />\n   <span style=\"background-color:White\"> 密码：</span><asp:TextBox ID=\"txtpwd\" runat=\"server\"></asp:TextBox>\n    <br />\n    <asp:Button ID=\"btn\" runat=\"server\" Text=\"登陆验证\"/>\n</div>\n</div>\n    </form>\n</body>\n</html>\n```\n","slug":"JavaScript乱弹之（一）：JQuery+CSS入门","published":1,"updated":"2017-12-22T14:34:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbi0v4eh00003k951eeqk90d","content":"<p>一直没有系统的学习JavaScript，因为总感觉花太多时间来学习JS似乎有点浪费。<br>现实也似乎是如此，太多人执迷于服务器端语言而忽视了最基本的HTML、JavaScript语言。<br>其中这个<strong>“太多人”</strong>里面自然也包括我在内。</p>\n<p>不过本文并不打算去按照一篇HTML语言基础或者JavaScript语言基础教程来介绍这些东西。<br>即使你和我一样是一个新手，阅读他们也不会有什么困难。<br>因为我的宗旨就是在应用中掌握他们，正所谓<strong>“书读百遍其义自见”</strong>就是这个道理。</p>\n<p>注明：本系列文章是本人学习笔记和知识摘要，错误之处肯定很多，还请指出。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot;  CodeFile=&quot;Default.aspx.cs&quot; Inherits=&quot;_Default&quot; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head runat=&quot;server&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;JS乱弹系列（一）&lt;/title&gt;</span><br><span class=\"line\">    &lt;%--这里只例举了2种常用的CSS选择器--%&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        body</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            background-color:Black;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    #div1</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        width:300px;</span><br><span class=\"line\">        height:50px;</span><br><span class=\"line\">        background-color:White;</span><br><span class=\"line\">        border-color:Red;</span><br><span class=\"line\">        margin-top:1%;</span><br><span class=\"line\">        margin-bottom:2%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        #div2</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        width:417px;</span><br><span class=\"line\">        height:133px;</span><br><span class=\"line\">        background-color:White;</span><br><span class=\"line\">        margin-bottom:2%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        #div3</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        width:500px;</span><br><span class=\"line\">        height:50px;</span><br><span class=\"line\">        background-color:White;</span><br><span class=\"line\">        margin-bottom:2%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        #div4</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        width:600px;</span><br><span class=\"line\">        height:50px;</span><br><span class=\"line\">        background-color:White;</span><br><span class=\"line\">        margin-bottom:2%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        #div5</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        width:700px;</span><br><span class=\"line\">        height:100px;</span><br><span class=\"line\">        background-color:White;</span><br><span class=\"line\">        text-align:center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script src=&quot;JS/jquery-1.3.2-vsdoc2.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;%--加入此引用后，按Crtl+Shift+J更新智能感知#--%&gt;</span><br><span class=\"line\">    &lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">        $(document).ready(function() &#123; $(&quot;#btn1&quot;).bind(&quot;click&quot;, function() &#123; alert(&quot;绑定成功!&quot;); &#125;) &#125;)</span><br><span class=\"line\">        $(document).ready(function() &#123;</span><br><span class=\"line\">            $(&quot;#btn&quot;).bind(&quot;click&quot;, function() &#123;</span><br><span class=\"line\">                var name = $(&quot;#txtname&quot;).val();</span><br><span class=\"line\">                var pwd = $(&quot;#txtpwd&quot;).val();</span><br><span class=\"line\">                if (name=== &quot;&quot; || pwd === &quot;&quot;)</span><br><span class=\"line\">                &#123; alert(&quot;用户名和密码不能为空！&quot;); return false; &#125;</span><br><span class=\"line\">                else &#123;</span><br><span class=\"line\">                    alert(name + &quot;/&quot; + pwd);</span><br><span class=\"line\">                    return true;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        //假值，按照crockford的建议最好使用===代替==</span><br><span class=\"line\">        $(document).ready(function() &#123;</span><br><span class=\"line\">            var a = (undefined == &quot;&quot;);</span><br><span class=\"line\">            var b = (undefined == null);</span><br><span class=\"line\">            var c = (undefined == NaN);</span><br><span class=\"line\">            var d = (undefined === &quot;&quot;);</span><br><span class=\"line\">            var e = (undefined === null);</span><br><span class=\"line\">            var f = (undefined === NaN);</span><br><span class=\"line\">            $(&quot;#div2&quot;).text(String(a) + &quot;\\n&quot; + String(b) + &quot;\\n&quot; + String(c) + &quot;\\n&quot; + String(d) + &quot;\\n&quot; + String(e) + &quot;\\n&quot; + String(f));</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">//        是不是很像C#的typeof</span><br><span class=\"line\">        $(document).ready(function() &#123;</span><br><span class=\"line\">            var a =typeof(undefined) ;</span><br><span class=\"line\">            var b =typeof(null) ;</span><br><span class=\"line\">            var c =typeof(&quot;&quot;) ;</span><br><span class=\"line\">            var d = typeof (NaN);</span><br><span class=\"line\">            $(&quot;#div3&quot;).text(String(a) + &quot;/&quot; + String(b) + &quot;/&quot; + String(c) + &quot;/&quot; + String(d));</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        //存在表单输入时自动聚焦</span><br><span class=\"line\">        $(document).ready(function() &#123; document.form1.txtname.focus(); &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;</span><br><span class=\"line\">    &lt;div id=&quot;divmain&quot;&gt;</span><br><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">这是div1</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div id=&quot;div2&quot;&gt;</span><br><span class=\"line\">这是div2</span><br><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\">JavaScript的假值，你知道这些结果是true还是false吗？</span><br><span class=\"line\">1.undefined == &quot;&quot;</span><br><span class=\"line\">2.undefined == null</span><br><span class=\"line\">3.undefined == NaN</span><br><span class=\"line\">4.undefined === &quot;&quot;</span><br><span class=\"line\">5.undefined === null</span><br><span class=\"line\">6.undefined === NaN</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div id=&quot;div3&quot;&gt;</span><br><span class=\"line\">这是div3</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div id=&quot;div4&quot;&gt;</span><br><span class=\"line\">    &lt;input id=&quot;btn1&quot; type=&quot;button&quot; value=&quot;使用JQuery为按钮绑定事件&quot;  title=&quot;在ready函数中绑定button的Click函数&quot;/&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div id=&quot;div5&quot;&gt;</span><br><span class=\"line\">这是模拟一个登陆验证</span><br><span class=\"line\">&lt;br /&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background-color:White&quot;&gt; 账号：&lt;/span&gt;&lt;asp:TextBox ID=&quot;txtname&quot; runat=&quot;server&quot;&gt;&lt;/asp:TextBox&gt;</span><br><span class=\"line\">    &lt;br /&gt;</span><br><span class=\"line\">   &lt;span style=&quot;background-color:White&quot;&gt; 密码：&lt;/span&gt;&lt;asp:TextBox ID=&quot;txtpwd&quot; runat=&quot;server&quot;&gt;&lt;/asp:TextBox&gt;</span><br><span class=\"line\">    &lt;br /&gt;</span><br><span class=\"line\">    &lt;asp:Button ID=&quot;btn&quot; runat=&quot;server&quot; Text=&quot;登陆验证&quot;/&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>一直没有系统的学习JavaScript，因为总感觉花太多时间来学习JS似乎有点浪费。<br>现实也似乎是如此，太多人执迷于服务器端语言而忽视了最基本的HTML、JavaScript语言。<br>其中这个<strong>“太多人”</strong>里面自然也包括我在内。</p>\n<p>不过本文并不打算去按照一篇HTML语言基础或者JavaScript语言基础教程来介绍这些东西。<br>即使你和我一样是一个新手，阅读他们也不会有什么困难。<br>因为我的宗旨就是在应用中掌握他们，正所谓<strong>“书读百遍其义自见”</strong>就是这个道理。</p>\n<p>注明：本系列文章是本人学习笔记和知识摘要，错误之处肯定很多，还请指出。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot;  CodeFile=&quot;Default.aspx.cs&quot; Inherits=&quot;_Default&quot; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head runat=&quot;server&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;JS乱弹系列（一）&lt;/title&gt;</span><br><span class=\"line\">    &lt;%--这里只例举了2种常用的CSS选择器--%&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        body</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            background-color:Black;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    #div1</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        width:300px;</span><br><span class=\"line\">        height:50px;</span><br><span class=\"line\">        background-color:White;</span><br><span class=\"line\">        border-color:Red;</span><br><span class=\"line\">        margin-top:1%;</span><br><span class=\"line\">        margin-bottom:2%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        #div2</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        width:417px;</span><br><span class=\"line\">        height:133px;</span><br><span class=\"line\">        background-color:White;</span><br><span class=\"line\">        margin-bottom:2%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        #div3</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        width:500px;</span><br><span class=\"line\">        height:50px;</span><br><span class=\"line\">        background-color:White;</span><br><span class=\"line\">        margin-bottom:2%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        #div4</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        width:600px;</span><br><span class=\"line\">        height:50px;</span><br><span class=\"line\">        background-color:White;</span><br><span class=\"line\">        margin-bottom:2%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        #div5</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        width:700px;</span><br><span class=\"line\">        height:100px;</span><br><span class=\"line\">        background-color:White;</span><br><span class=\"line\">        text-align:center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script src=&quot;JS/jquery-1.3.2-vsdoc2.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;%--加入此引用后，按Crtl+Shift+J更新智能感知#--%&gt;</span><br><span class=\"line\">    &lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">        $(document).ready(function() &#123; $(&quot;#btn1&quot;).bind(&quot;click&quot;, function() &#123; alert(&quot;绑定成功!&quot;); &#125;) &#125;)</span><br><span class=\"line\">        $(document).ready(function() &#123;</span><br><span class=\"line\">            $(&quot;#btn&quot;).bind(&quot;click&quot;, function() &#123;</span><br><span class=\"line\">                var name = $(&quot;#txtname&quot;).val();</span><br><span class=\"line\">                var pwd = $(&quot;#txtpwd&quot;).val();</span><br><span class=\"line\">                if (name=== &quot;&quot; || pwd === &quot;&quot;)</span><br><span class=\"line\">                &#123; alert(&quot;用户名和密码不能为空！&quot;); return false; &#125;</span><br><span class=\"line\">                else &#123;</span><br><span class=\"line\">                    alert(name + &quot;/&quot; + pwd);</span><br><span class=\"line\">                    return true;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        //假值，按照crockford的建议最好使用===代替==</span><br><span class=\"line\">        $(document).ready(function() &#123;</span><br><span class=\"line\">            var a = (undefined == &quot;&quot;);</span><br><span class=\"line\">            var b = (undefined == null);</span><br><span class=\"line\">            var c = (undefined == NaN);</span><br><span class=\"line\">            var d = (undefined === &quot;&quot;);</span><br><span class=\"line\">            var e = (undefined === null);</span><br><span class=\"line\">            var f = (undefined === NaN);</span><br><span class=\"line\">            $(&quot;#div2&quot;).text(String(a) + &quot;\\n&quot; + String(b) + &quot;\\n&quot; + String(c) + &quot;\\n&quot; + String(d) + &quot;\\n&quot; + String(e) + &quot;\\n&quot; + String(f));</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">//        是不是很像C#的typeof</span><br><span class=\"line\">        $(document).ready(function() &#123;</span><br><span class=\"line\">            var a =typeof(undefined) ;</span><br><span class=\"line\">            var b =typeof(null) ;</span><br><span class=\"line\">            var c =typeof(&quot;&quot;) ;</span><br><span class=\"line\">            var d = typeof (NaN);</span><br><span class=\"line\">            $(&quot;#div3&quot;).text(String(a) + &quot;/&quot; + String(b) + &quot;/&quot; + String(c) + &quot;/&quot; + String(d));</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        //存在表单输入时自动聚焦</span><br><span class=\"line\">        $(document).ready(function() &#123; document.form1.txtname.focus(); &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;</span><br><span class=\"line\">    &lt;div id=&quot;divmain&quot;&gt;</span><br><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">这是div1</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div id=&quot;div2&quot;&gt;</span><br><span class=\"line\">这是div2</span><br><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\">JavaScript的假值，你知道这些结果是true还是false吗？</span><br><span class=\"line\">1.undefined == &quot;&quot;</span><br><span class=\"line\">2.undefined == null</span><br><span class=\"line\">3.undefined == NaN</span><br><span class=\"line\">4.undefined === &quot;&quot;</span><br><span class=\"line\">5.undefined === null</span><br><span class=\"line\">6.undefined === NaN</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div id=&quot;div3&quot;&gt;</span><br><span class=\"line\">这是div3</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div id=&quot;div4&quot;&gt;</span><br><span class=\"line\">    &lt;input id=&quot;btn1&quot; type=&quot;button&quot; value=&quot;使用JQuery为按钮绑定事件&quot;  title=&quot;在ready函数中绑定button的Click函数&quot;/&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div id=&quot;div5&quot;&gt;</span><br><span class=\"line\">这是模拟一个登陆验证</span><br><span class=\"line\">&lt;br /&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background-color:White&quot;&gt; 账号：&lt;/span&gt;&lt;asp:TextBox ID=&quot;txtname&quot; runat=&quot;server&quot;&gt;&lt;/asp:TextBox&gt;</span><br><span class=\"line\">    &lt;br /&gt;</span><br><span class=\"line\">   &lt;span style=&quot;background-color:White&quot;&gt; 密码：&lt;/span&gt;&lt;asp:TextBox ID=&quot;txtpwd&quot; runat=&quot;server&quot;&gt;&lt;/asp:TextBox&gt;</span><br><span class=\"line\">    &lt;br /&gt;</span><br><span class=\"line\">    &lt;asp:Button ID=&quot;btn&quot; runat=&quot;server&quot; Text=&quot;登陆验证&quot;/&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"JavaScript乱弹之（三）：管理浏览器窗口","date":"2010-01-26T16:00:00.000Z","_content":"\n曾几何时，弹出式窗口大行其道，随着浏览器的竞争态势愈演愈烈，虽然给开发者带来极大的不便，\n但是浏览器的规范化已经成为了共识。\n\n如今弹出式窗口的局面已经有效地得到了控制，如果你要在页面中通过脚本打开一个新窗口，\n那么许多**“潜规则”**你必须要有所了解。\n\n与窗口相关的绝大部分行为都涉及到window对象，window对象涉及大量的属性和方法，\n但是在不同的浏览器之间确实千差万别。\n\n部分原因是由于window对象是脚本任务中最大的全局上下文。\nIE利用这个上下文为window对象嵌入了许多与浏览器和操作系统相关的属性和方法，\n而Mozilla却认为window对象的属性会威胁用户的隐私，因此只能通过被服务器打上电子标签的脚本来访问，\n这些脚本的来源必须经过用户的明确允许（带有签名的脚本）。\n\n\n## 八条\"潜规则\"\n### 潜规则一：不要修改主窗口的界面元素（chrome）\n比如状态栏、菜单栏、滚动条、工具栏、标题栏等。唯一的定制窗口界面的方法是打开一个全新的窗口。\n### 潜规则二：不要在子窗口中通过脚本关闭主窗口\n尽管可以使用opener.close()方法来实现。\n### 潜规则三：不要试图替用户关闭主窗口之外的其他窗口\n因为通过脚本你无法得知用户打开了多少个窗口。\n### 潜规则四：不要试图访问位于其他域的窗口的文档属性\n因为这会引发潜在的恶意时间，浏览器都实现了同源安全策略--除非两窗口来自于同一域中的同一服务器，且协议相同，否则不能通过脚本访问另一窗口的关键细节。\n### 潜规则五：不要试图阻止或者激活浏览器的窗口按钮\n许多开发人员希望拦截后退和前进按钮来控制浏览器的导航，但是这些用户动作不会出现在window对象中。\n### 潜规则六：不要试图改变地址栏的内容\n脚本唯一能做的是通过location.href赋值使其渲染新页面。\n### 潜规则七：不要试图添加或删除收藏夹的项目\n在IE中window.external.AddFavorite(\"URL\",\"Title\")方法可以添加到收藏夹，即使是这个功能，添加之前也会询问用户是否允许。收藏夹是用户私有的，不应该暴露给脚本。\n### 潜规则八：不要试图修改浏览器偏好设置\nMozilla允许带有签名的脚本应用程序的偏好设置，该功能是网络管理功能。\n\n## 设置窗口的尺寸\n1.window.resizeTo(800,600);设置窗口为指定尺寸\n\n2.window.resizeBy(50,-10);按一定像素增大或缩小窗口\n\n调整窗口大小使其符合指定内容大小，并不简单。Mozilla，Opera和Safari提供了一对读写属性可以对窗口的内容区域进行特殊控制--innerHeight和innerwidth，而IE只提供了只读操作document.body.parentNode.clientHeight(clientWidth)。\n\n注意：设置窗口的外围尺寸来管理内容区域的思想是糟糕的，用户可能选择工具栏进行设置或者浏览器的操作询问都会影响到你精心设计的布局。\n## 移动窗口\n3.window.moveTo(10,20);移动窗口到指定坐标\n\n4.window.moveBy(0,10);按一定像素改变窗口的位置\n\n移动窗口时，窗口尺寸不变\n\n##最大化主窗口\n\n实例：function maximizeWindow()\n\n```js\nwindow.moveTo(0,0);\nwindow.resizeTo(screen.availWidth,screen.availHeight);\n```\n\n注意：XP真正最大化窗口并没有定位在（0，0）点。其实窗口的左上角位于（-4，-4）。没有真正最大化窗口的方法，也没有最小化窗口的实现方法。\n","source":"_posts/JavaScript乱弹之（三）：管理浏览器窗口.md","raw":"---\ntitle: JavaScript乱弹之（三）：管理浏览器窗口\ndate: 2010-01-27\ntags: JavaScript\n---\n\n曾几何时，弹出式窗口大行其道，随着浏览器的竞争态势愈演愈烈，虽然给开发者带来极大的不便，\n但是浏览器的规范化已经成为了共识。\n\n如今弹出式窗口的局面已经有效地得到了控制，如果你要在页面中通过脚本打开一个新窗口，\n那么许多**“潜规则”**你必须要有所了解。\n\n与窗口相关的绝大部分行为都涉及到window对象，window对象涉及大量的属性和方法，\n但是在不同的浏览器之间确实千差万别。\n\n部分原因是由于window对象是脚本任务中最大的全局上下文。\nIE利用这个上下文为window对象嵌入了许多与浏览器和操作系统相关的属性和方法，\n而Mozilla却认为window对象的属性会威胁用户的隐私，因此只能通过被服务器打上电子标签的脚本来访问，\n这些脚本的来源必须经过用户的明确允许（带有签名的脚本）。\n\n\n## 八条\"潜规则\"\n### 潜规则一：不要修改主窗口的界面元素（chrome）\n比如状态栏、菜单栏、滚动条、工具栏、标题栏等。唯一的定制窗口界面的方法是打开一个全新的窗口。\n### 潜规则二：不要在子窗口中通过脚本关闭主窗口\n尽管可以使用opener.close()方法来实现。\n### 潜规则三：不要试图替用户关闭主窗口之外的其他窗口\n因为通过脚本你无法得知用户打开了多少个窗口。\n### 潜规则四：不要试图访问位于其他域的窗口的文档属性\n因为这会引发潜在的恶意时间，浏览器都实现了同源安全策略--除非两窗口来自于同一域中的同一服务器，且协议相同，否则不能通过脚本访问另一窗口的关键细节。\n### 潜规则五：不要试图阻止或者激活浏览器的窗口按钮\n许多开发人员希望拦截后退和前进按钮来控制浏览器的导航，但是这些用户动作不会出现在window对象中。\n### 潜规则六：不要试图改变地址栏的内容\n脚本唯一能做的是通过location.href赋值使其渲染新页面。\n### 潜规则七：不要试图添加或删除收藏夹的项目\n在IE中window.external.AddFavorite(\"URL\",\"Title\")方法可以添加到收藏夹，即使是这个功能，添加之前也会询问用户是否允许。收藏夹是用户私有的，不应该暴露给脚本。\n### 潜规则八：不要试图修改浏览器偏好设置\nMozilla允许带有签名的脚本应用程序的偏好设置，该功能是网络管理功能。\n\n## 设置窗口的尺寸\n1.window.resizeTo(800,600);设置窗口为指定尺寸\n\n2.window.resizeBy(50,-10);按一定像素增大或缩小窗口\n\n调整窗口大小使其符合指定内容大小，并不简单。Mozilla，Opera和Safari提供了一对读写属性可以对窗口的内容区域进行特殊控制--innerHeight和innerwidth，而IE只提供了只读操作document.body.parentNode.clientHeight(clientWidth)。\n\n注意：设置窗口的外围尺寸来管理内容区域的思想是糟糕的，用户可能选择工具栏进行设置或者浏览器的操作询问都会影响到你精心设计的布局。\n## 移动窗口\n3.window.moveTo(10,20);移动窗口到指定坐标\n\n4.window.moveBy(0,10);按一定像素改变窗口的位置\n\n移动窗口时，窗口尺寸不变\n\n##最大化主窗口\n\n实例：function maximizeWindow()\n\n```js\nwindow.moveTo(0,0);\nwindow.resizeTo(screen.availWidth,screen.availHeight);\n```\n\n注意：XP真正最大化窗口并没有定位在（0，0）点。其实窗口的左上角位于（-4，-4）。没有真正最大化窗口的方法，也没有最小化窗口的实现方法。\n","slug":"JavaScript乱弹之（三）：管理浏览器窗口","published":1,"updated":"2017-12-22T14:34:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbi0v4en00013k95ypl9p4bs","content":"<p>曾几何时，弹出式窗口大行其道，随着浏览器的竞争态势愈演愈烈，虽然给开发者带来极大的不便，<br>但是浏览器的规范化已经成为了共识。</p>\n<p>如今弹出式窗口的局面已经有效地得到了控制，如果你要在页面中通过脚本打开一个新窗口，<br>那么许多<strong>“潜规则”</strong>你必须要有所了解。</p>\n<p>与窗口相关的绝大部分行为都涉及到window对象，window对象涉及大量的属性和方法，<br>但是在不同的浏览器之间确实千差万别。</p>\n<p>部分原因是由于window对象是脚本任务中最大的全局上下文。<br>IE利用这个上下文为window对象嵌入了许多与浏览器和操作系统相关的属性和方法，<br>而Mozilla却认为window对象的属性会威胁用户的隐私，因此只能通过被服务器打上电子标签的脚本来访问，<br>这些脚本的来源必须经过用户的明确允许（带有签名的脚本）。</p>\n<h2 id=\"八条”潜规则”\"><a href=\"#八条”潜规则”\" class=\"headerlink\" title=\"八条”潜规则”\"></a>八条”潜规则”</h2><h3 id=\"潜规则一：不要修改主窗口的界面元素（chrome）\"><a href=\"#潜规则一：不要修改主窗口的界面元素（chrome）\" class=\"headerlink\" title=\"潜规则一：不要修改主窗口的界面元素（chrome）\"></a>潜规则一：不要修改主窗口的界面元素（chrome）</h3><p>比如状态栏、菜单栏、滚动条、工具栏、标题栏等。唯一的定制窗口界面的方法是打开一个全新的窗口。</p>\n<h3 id=\"潜规则二：不要在子窗口中通过脚本关闭主窗口\"><a href=\"#潜规则二：不要在子窗口中通过脚本关闭主窗口\" class=\"headerlink\" title=\"潜规则二：不要在子窗口中通过脚本关闭主窗口\"></a>潜规则二：不要在子窗口中通过脚本关闭主窗口</h3><p>尽管可以使用opener.close()方法来实现。</p>\n<h3 id=\"潜规则三：不要试图替用户关闭主窗口之外的其他窗口\"><a href=\"#潜规则三：不要试图替用户关闭主窗口之外的其他窗口\" class=\"headerlink\" title=\"潜规则三：不要试图替用户关闭主窗口之外的其他窗口\"></a>潜规则三：不要试图替用户关闭主窗口之外的其他窗口</h3><p>因为通过脚本你无法得知用户打开了多少个窗口。</p>\n<h3 id=\"潜规则四：不要试图访问位于其他域的窗口的文档属性\"><a href=\"#潜规则四：不要试图访问位于其他域的窗口的文档属性\" class=\"headerlink\" title=\"潜规则四：不要试图访问位于其他域的窗口的文档属性\"></a>潜规则四：不要试图访问位于其他域的窗口的文档属性</h3><p>因为这会引发潜在的恶意时间，浏览器都实现了同源安全策略–除非两窗口来自于同一域中的同一服务器，且协议相同，否则不能通过脚本访问另一窗口的关键细节。</p>\n<h3 id=\"潜规则五：不要试图阻止或者激活浏览器的窗口按钮\"><a href=\"#潜规则五：不要试图阻止或者激活浏览器的窗口按钮\" class=\"headerlink\" title=\"潜规则五：不要试图阻止或者激活浏览器的窗口按钮\"></a>潜规则五：不要试图阻止或者激活浏览器的窗口按钮</h3><p>许多开发人员希望拦截后退和前进按钮来控制浏览器的导航，但是这些用户动作不会出现在window对象中。</p>\n<h3 id=\"潜规则六：不要试图改变地址栏的内容\"><a href=\"#潜规则六：不要试图改变地址栏的内容\" class=\"headerlink\" title=\"潜规则六：不要试图改变地址栏的内容\"></a>潜规则六：不要试图改变地址栏的内容</h3><p>脚本唯一能做的是通过location.href赋值使其渲染新页面。</p>\n<h3 id=\"潜规则七：不要试图添加或删除收藏夹的项目\"><a href=\"#潜规则七：不要试图添加或删除收藏夹的项目\" class=\"headerlink\" title=\"潜规则七：不要试图添加或删除收藏夹的项目\"></a>潜规则七：不要试图添加或删除收藏夹的项目</h3><p>在IE中window.external.AddFavorite(“URL”,”Title”)方法可以添加到收藏夹，即使是这个功能，添加之前也会询问用户是否允许。收藏夹是用户私有的，不应该暴露给脚本。</p>\n<h3 id=\"潜规则八：不要试图修改浏览器偏好设置\"><a href=\"#潜规则八：不要试图修改浏览器偏好设置\" class=\"headerlink\" title=\"潜规则八：不要试图修改浏览器偏好设置\"></a>潜规则八：不要试图修改浏览器偏好设置</h3><p>Mozilla允许带有签名的脚本应用程序的偏好设置，该功能是网络管理功能。</p>\n<h2 id=\"设置窗口的尺寸\"><a href=\"#设置窗口的尺寸\" class=\"headerlink\" title=\"设置窗口的尺寸\"></a>设置窗口的尺寸</h2><p>1.window.resizeTo(800,600);设置窗口为指定尺寸</p>\n<p>2.window.resizeBy(50,-10);按一定像素增大或缩小窗口</p>\n<p>调整窗口大小使其符合指定内容大小，并不简单。Mozilla，Opera和Safari提供了一对读写属性可以对窗口的内容区域进行特殊控制–innerHeight和innerwidth，而IE只提供了只读操作document.body.parentNode.clientHeight(clientWidth)。</p>\n<p>注意：设置窗口的外围尺寸来管理内容区域的思想是糟糕的，用户可能选择工具栏进行设置或者浏览器的操作询问都会影响到你精心设计的布局。</p>\n<h2 id=\"移动窗口\"><a href=\"#移动窗口\" class=\"headerlink\" title=\"移动窗口\"></a>移动窗口</h2><p>3.window.moveTo(10,20);移动窗口到指定坐标</p>\n<p>4.window.moveBy(0,10);按一定像素改变窗口的位置</p>\n<p>移动窗口时，窗口尺寸不变</p>\n<p>##最大化主窗口</p>\n<p>实例：function maximizeWindow()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.moveTo(<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.resizeTo(screen.availWidth,screen.availHeight);</span><br></pre></td></tr></table></figure>\n<p>注意：XP真正最大化窗口并没有定位在（0，0）点。其实窗口的左上角位于（-4，-4）。没有真正最大化窗口的方法，也没有最小化窗口的实现方法。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>曾几何时，弹出式窗口大行其道，随着浏览器的竞争态势愈演愈烈，虽然给开发者带来极大的不便，<br>但是浏览器的规范化已经成为了共识。</p>\n<p>如今弹出式窗口的局面已经有效地得到了控制，如果你要在页面中通过脚本打开一个新窗口，<br>那么许多<strong>“潜规则”</strong>你必须要有所了解。</p>\n<p>与窗口相关的绝大部分行为都涉及到window对象，window对象涉及大量的属性和方法，<br>但是在不同的浏览器之间确实千差万别。</p>\n<p>部分原因是由于window对象是脚本任务中最大的全局上下文。<br>IE利用这个上下文为window对象嵌入了许多与浏览器和操作系统相关的属性和方法，<br>而Mozilla却认为window对象的属性会威胁用户的隐私，因此只能通过被服务器打上电子标签的脚本来访问，<br>这些脚本的来源必须经过用户的明确允许（带有签名的脚本）。</p>\n<h2 id=\"八条”潜规则”\"><a href=\"#八条”潜规则”\" class=\"headerlink\" title=\"八条”潜规则”\"></a>八条”潜规则”</h2><h3 id=\"潜规则一：不要修改主窗口的界面元素（chrome）\"><a href=\"#潜规则一：不要修改主窗口的界面元素（chrome）\" class=\"headerlink\" title=\"潜规则一：不要修改主窗口的界面元素（chrome）\"></a>潜规则一：不要修改主窗口的界面元素（chrome）</h3><p>比如状态栏、菜单栏、滚动条、工具栏、标题栏等。唯一的定制窗口界面的方法是打开一个全新的窗口。</p>\n<h3 id=\"潜规则二：不要在子窗口中通过脚本关闭主窗口\"><a href=\"#潜规则二：不要在子窗口中通过脚本关闭主窗口\" class=\"headerlink\" title=\"潜规则二：不要在子窗口中通过脚本关闭主窗口\"></a>潜规则二：不要在子窗口中通过脚本关闭主窗口</h3><p>尽管可以使用opener.close()方法来实现。</p>\n<h3 id=\"潜规则三：不要试图替用户关闭主窗口之外的其他窗口\"><a href=\"#潜规则三：不要试图替用户关闭主窗口之外的其他窗口\" class=\"headerlink\" title=\"潜规则三：不要试图替用户关闭主窗口之外的其他窗口\"></a>潜规则三：不要试图替用户关闭主窗口之外的其他窗口</h3><p>因为通过脚本你无法得知用户打开了多少个窗口。</p>\n<h3 id=\"潜规则四：不要试图访问位于其他域的窗口的文档属性\"><a href=\"#潜规则四：不要试图访问位于其他域的窗口的文档属性\" class=\"headerlink\" title=\"潜规则四：不要试图访问位于其他域的窗口的文档属性\"></a>潜规则四：不要试图访问位于其他域的窗口的文档属性</h3><p>因为这会引发潜在的恶意时间，浏览器都实现了同源安全策略–除非两窗口来自于同一域中的同一服务器，且协议相同，否则不能通过脚本访问另一窗口的关键细节。</p>\n<h3 id=\"潜规则五：不要试图阻止或者激活浏览器的窗口按钮\"><a href=\"#潜规则五：不要试图阻止或者激活浏览器的窗口按钮\" class=\"headerlink\" title=\"潜规则五：不要试图阻止或者激活浏览器的窗口按钮\"></a>潜规则五：不要试图阻止或者激活浏览器的窗口按钮</h3><p>许多开发人员希望拦截后退和前进按钮来控制浏览器的导航，但是这些用户动作不会出现在window对象中。</p>\n<h3 id=\"潜规则六：不要试图改变地址栏的内容\"><a href=\"#潜规则六：不要试图改变地址栏的内容\" class=\"headerlink\" title=\"潜规则六：不要试图改变地址栏的内容\"></a>潜规则六：不要试图改变地址栏的内容</h3><p>脚本唯一能做的是通过location.href赋值使其渲染新页面。</p>\n<h3 id=\"潜规则七：不要试图添加或删除收藏夹的项目\"><a href=\"#潜规则七：不要试图添加或删除收藏夹的项目\" class=\"headerlink\" title=\"潜规则七：不要试图添加或删除收藏夹的项目\"></a>潜规则七：不要试图添加或删除收藏夹的项目</h3><p>在IE中window.external.AddFavorite(“URL”,”Title”)方法可以添加到收藏夹，即使是这个功能，添加之前也会询问用户是否允许。收藏夹是用户私有的，不应该暴露给脚本。</p>\n<h3 id=\"潜规则八：不要试图修改浏览器偏好设置\"><a href=\"#潜规则八：不要试图修改浏览器偏好设置\" class=\"headerlink\" title=\"潜规则八：不要试图修改浏览器偏好设置\"></a>潜规则八：不要试图修改浏览器偏好设置</h3><p>Mozilla允许带有签名的脚本应用程序的偏好设置，该功能是网络管理功能。</p>\n<h2 id=\"设置窗口的尺寸\"><a href=\"#设置窗口的尺寸\" class=\"headerlink\" title=\"设置窗口的尺寸\"></a>设置窗口的尺寸</h2><p>1.window.resizeTo(800,600);设置窗口为指定尺寸</p>\n<p>2.window.resizeBy(50,-10);按一定像素增大或缩小窗口</p>\n<p>调整窗口大小使其符合指定内容大小，并不简单。Mozilla，Opera和Safari提供了一对读写属性可以对窗口的内容区域进行特殊控制–innerHeight和innerwidth，而IE只提供了只读操作document.body.parentNode.clientHeight(clientWidth)。</p>\n<p>注意：设置窗口的外围尺寸来管理内容区域的思想是糟糕的，用户可能选择工具栏进行设置或者浏览器的操作询问都会影响到你精心设计的布局。</p>\n<h2 id=\"移动窗口\"><a href=\"#移动窗口\" class=\"headerlink\" title=\"移动窗口\"></a>移动窗口</h2><p>3.window.moveTo(10,20);移动窗口到指定坐标</p>\n<p>4.window.moveBy(0,10);按一定像素改变窗口的位置</p>\n<p>移动窗口时，窗口尺寸不变</p>\n<p>##最大化主窗口</p>\n<p>实例：function maximizeWindow()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.moveTo(<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.resizeTo(screen.availWidth,screen.availHeight);</span><br></pre></td></tr></table></figure>\n<p>注意：XP真正最大化窗口并没有定位在（0，0）点。其实窗口的左上角位于（-4，-4）。没有真正最大化窗口的方法，也没有最小化窗口的实现方法。</p>\n"},{"title":"JavaScript乱弹之（二）： String","date":"2010-01-25T16:00:00.000Z","_content":"\n## 单引号与双引号\n\n创建字符串的常用方法有以下两种。\n\n> * 方法一：var str1=\"i love javascript\";\n> * 方法二：var str2='i love javascript';\n\n单引号和双引号在JavaScript中的作用是等价的。但是一旦两者混用后就会引发一些麻烦，因此你需要妥善处理。\n\n```js\nvar mystring=\"i love winslet's sister and nancy's sister\";\n```\n\n这种情况你就必须使用转义字符，因为你需要输出单引号而单引号出现了不止一次。当单引号只出现一次时可以不使用转义字符。而当你仅希望将单引号之间的对象当作字符串处理时就不要使用转义字符。\n\n## 字符串对象与字符串值\n\n至此，我们需要区分字符串对象和字符串的值。通常来说我们都是只得字符串值。一个字符串对象是这样的：\n\n```js\nvar strobject=new String(\"i love javascript\");\n```\n\n测试一下你会发现strobject的数据类型是Object而不是String,但是他却继承了String所有的属性和方法。\n\n## 连接字符串\n连接较长的字符串时，你需要特别注意代码中的换行。JavaScript解释器的一个内置特性--在代码的逻辑终点加入分号，所以不能简单的使用回车换行，而应该在该行的最末尾加入“+”。\n\n### 错误的做法：\n\n```js\nvar strA=\"what i love is csharp ,javascript ,java,php\nAnd vb.net\";\n```\n\n### 正确的做法：\n\n```js\nvar strA=\"what i love is csharp ,javascript ,java,php\"+\n\"And vb.net\";\n```\n\n在合适的地方合理的使用+和;可以减少很多JavaScript代码发生的意外错误。\n\n## 提高字符串处理的性能\n以前我一致认为字符串这么简单的对象，不管是C#还是JavaScript处理几万个字符的简单累加应该是不需要什么时间的。但是后来发现我错了，当数量超过2万以上时根据机器的性能需要3-15秒的时间。令人诧异吧！\n\nC#中可以使用StringBuilder来提高字符串处理的性能，在JavaScript中我们有什么呢？Array！下面的例子一目了然。\n\n```js\nvar Txt=new Array();\n Txt.push(\"<tr>\");\n Txt.push(\"<td>\");\n Txt.push(\"</td>\");\n Txt.push(\"</tr>\");\ndocument.getElementById(\"tbody\").innerHTML=Txt.join(\"\");\nTxt=null;\n```\n这个join方法就是在字符串之间加入一个字符，本例是一个空字符，注意不是空白字符\" \"。Join方法和绝大多数的字符串处理的方法（如indexOf、toUpperCase。即使是replece也不例外）一样并不会改变原字符串（数组）的内容。最后一句让浏览器回收降低内存消耗。\n\n## 检验字符串的相等\nJavaScript的两种等号操作符：==和===。==完全向后兼容，当两边类型不同时会执行类型转换。例如下面\n\n两个对象\n\n```js\nvar obj=new String(\"123\");\nvar str=\"123\";\n```\n\n很明显obj==str将返回true，而===则是严格等号操作不会执行类型转换。类似的可以参见上一节的undefined和null的比较。\n\n## Unicode值和字符的互相转换\n对于字符串值和字符串对象，两者是不同的。前者使用charCodeAt(index)后者使用String.fromCharCode(index);\n\n另外不要简单的认为Unicode包含了全世界许多语言的文字和字符，就随意的断定知道字符的Unicode值就可以在警告框、文本框、或渲染页面中显示其他语言的特性字符，除非是浏览器和操作系统包含了这些语言。所以你经常在一些大型中文论坛发现很多留学生用英文回帖，其实不是他们不会中文，只是别人的系统和浏览器没有安装中文字体。\n\n## URL字符串的编码和解码\n常用的方法有escape和unescape、encodeURI和decodeURL、encodeURIComponent和decodeURIComponent，前者对应编码后者对应解码。\n\n编码时普通的字母和数字一般都不会被转换，中文字符以及其他的特殊符号都能被转换。\n\n注意：IE浏览器@不能通过escape方法转换。\n\n另外Mozilla的浏览器独有的atob（）和btoa（）方法将普通字符串在Base64字符串中相互转换。\n","source":"_posts/JavaScript乱弹之（二）： String.md","raw":"---\ntitle: JavaScript乱弹之（二）： String\ndate: 2010-01-26\ntags: JavaScript\n---\n\n## 单引号与双引号\n\n创建字符串的常用方法有以下两种。\n\n> * 方法一：var str1=\"i love javascript\";\n> * 方法二：var str2='i love javascript';\n\n单引号和双引号在JavaScript中的作用是等价的。但是一旦两者混用后就会引发一些麻烦，因此你需要妥善处理。\n\n```js\nvar mystring=\"i love winslet's sister and nancy's sister\";\n```\n\n这种情况你就必须使用转义字符，因为你需要输出单引号而单引号出现了不止一次。当单引号只出现一次时可以不使用转义字符。而当你仅希望将单引号之间的对象当作字符串处理时就不要使用转义字符。\n\n## 字符串对象与字符串值\n\n至此，我们需要区分字符串对象和字符串的值。通常来说我们都是只得字符串值。一个字符串对象是这样的：\n\n```js\nvar strobject=new String(\"i love javascript\");\n```\n\n测试一下你会发现strobject的数据类型是Object而不是String,但是他却继承了String所有的属性和方法。\n\n## 连接字符串\n连接较长的字符串时，你需要特别注意代码中的换行。JavaScript解释器的一个内置特性--在代码的逻辑终点加入分号，所以不能简单的使用回车换行，而应该在该行的最末尾加入“+”。\n\n### 错误的做法：\n\n```js\nvar strA=\"what i love is csharp ,javascript ,java,php\nAnd vb.net\";\n```\n\n### 正确的做法：\n\n```js\nvar strA=\"what i love is csharp ,javascript ,java,php\"+\n\"And vb.net\";\n```\n\n在合适的地方合理的使用+和;可以减少很多JavaScript代码发生的意外错误。\n\n## 提高字符串处理的性能\n以前我一致认为字符串这么简单的对象，不管是C#还是JavaScript处理几万个字符的简单累加应该是不需要什么时间的。但是后来发现我错了，当数量超过2万以上时根据机器的性能需要3-15秒的时间。令人诧异吧！\n\nC#中可以使用StringBuilder来提高字符串处理的性能，在JavaScript中我们有什么呢？Array！下面的例子一目了然。\n\n```js\nvar Txt=new Array();\n Txt.push(\"<tr>\");\n Txt.push(\"<td>\");\n Txt.push(\"</td>\");\n Txt.push(\"</tr>\");\ndocument.getElementById(\"tbody\").innerHTML=Txt.join(\"\");\nTxt=null;\n```\n这个join方法就是在字符串之间加入一个字符，本例是一个空字符，注意不是空白字符\" \"。Join方法和绝大多数的字符串处理的方法（如indexOf、toUpperCase。即使是replece也不例外）一样并不会改变原字符串（数组）的内容。最后一句让浏览器回收降低内存消耗。\n\n## 检验字符串的相等\nJavaScript的两种等号操作符：==和===。==完全向后兼容，当两边类型不同时会执行类型转换。例如下面\n\n两个对象\n\n```js\nvar obj=new String(\"123\");\nvar str=\"123\";\n```\n\n很明显obj==str将返回true，而===则是严格等号操作不会执行类型转换。类似的可以参见上一节的undefined和null的比较。\n\n## Unicode值和字符的互相转换\n对于字符串值和字符串对象，两者是不同的。前者使用charCodeAt(index)后者使用String.fromCharCode(index);\n\n另外不要简单的认为Unicode包含了全世界许多语言的文字和字符，就随意的断定知道字符的Unicode值就可以在警告框、文本框、或渲染页面中显示其他语言的特性字符，除非是浏览器和操作系统包含了这些语言。所以你经常在一些大型中文论坛发现很多留学生用英文回帖，其实不是他们不会中文，只是别人的系统和浏览器没有安装中文字体。\n\n## URL字符串的编码和解码\n常用的方法有escape和unescape、encodeURI和decodeURL、encodeURIComponent和decodeURIComponent，前者对应编码后者对应解码。\n\n编码时普通的字母和数字一般都不会被转换，中文字符以及其他的特殊符号都能被转换。\n\n注意：IE浏览器@不能通过escape方法转换。\n\n另外Mozilla的浏览器独有的atob（）和btoa（）方法将普通字符串在Base64字符串中相互转换。\n","slug":"JavaScript乱弹之（二）： String","published":1,"updated":"2017-12-22T14:34:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbi0v4er00033k95p9lsk94h","content":"<h2 id=\"单引号与双引号\"><a href=\"#单引号与双引号\" class=\"headerlink\" title=\"单引号与双引号\"></a>单引号与双引号</h2><p>创建字符串的常用方法有以下两种。</p>\n<blockquote>\n<ul>\n<li>方法一：var str1=”i love javascript”;</li>\n<li>方法二：var str2=’i love javascript’;</li>\n</ul>\n</blockquote>\n<p>单引号和双引号在JavaScript中的作用是等价的。但是一旦两者混用后就会引发一些麻烦，因此你需要妥善处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mystring=<span class=\"string\">\"i love winslet's sister and nancy's sister\"</span>;</span><br></pre></td></tr></table></figure>\n<p>这种情况你就必须使用转义字符，因为你需要输出单引号而单引号出现了不止一次。当单引号只出现一次时可以不使用转义字符。而当你仅希望将单引号之间的对象当作字符串处理时就不要使用转义字符。</p>\n<h2 id=\"字符串对象与字符串值\"><a href=\"#字符串对象与字符串值\" class=\"headerlink\" title=\"字符串对象与字符串值\"></a>字符串对象与字符串值</h2><p>至此，我们需要区分字符串对象和字符串的值。通常来说我们都是只得字符串值。一个字符串对象是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> strobject=<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">\"i love javascript\"</span>);</span><br></pre></td></tr></table></figure>\n<p>测试一下你会发现strobject的数据类型是Object而不是String,但是他却继承了String所有的属性和方法。</p>\n<h2 id=\"连接字符串\"><a href=\"#连接字符串\" class=\"headerlink\" title=\"连接字符串\"></a>连接字符串</h2><p>连接较长的字符串时，你需要特别注意代码中的换行。JavaScript解释器的一个内置特性–在代码的逻辑终点加入分号，所以不能简单的使用回车换行，而应该在该行的最末尾加入“+”。</p>\n<h3 id=\"错误的做法：\"><a href=\"#错误的做法：\" class=\"headerlink\" title=\"错误的做法：\"></a>错误的做法：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> strA=<span class=\"string\">\"what i love is csharp ,javascript ,java,php</span></span><br><span class=\"line\"><span class=\"string\">And vb.net\"</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"正确的做法：\"><a href=\"#正确的做法：\" class=\"headerlink\" title=\"正确的做法：\"></a>正确的做法：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> strA=<span class=\"string\">\"what i love is csharp ,javascript ,java,php\"</span>+</span><br><span class=\"line\"><span class=\"string\">\"And vb.net\"</span>;</span><br></pre></td></tr></table></figure>\n<p>在合适的地方合理的使用+和;可以减少很多JavaScript代码发生的意外错误。</p>\n<h2 id=\"提高字符串处理的性能\"><a href=\"#提高字符串处理的性能\" class=\"headerlink\" title=\"提高字符串处理的性能\"></a>提高字符串处理的性能</h2><p>以前我一致认为字符串这么简单的对象，不管是C#还是JavaScript处理几万个字符的简单累加应该是不需要什么时间的。但是后来发现我错了，当数量超过2万以上时根据机器的性能需要3-15秒的时间。令人诧异吧！</p>\n<p>C#中可以使用StringBuilder来提高字符串处理的性能，在JavaScript中我们有什么呢？Array！下面的例子一目了然。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Txt=<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\"> Txt.push(<span class=\"string\">\"&lt;tr&gt;\"</span>);</span><br><span class=\"line\"> Txt.push(<span class=\"string\">\"&lt;td&gt;\"</span>);</span><br><span class=\"line\"> Txt.push(<span class=\"string\">\"&lt;/td&gt;\"</span>);</span><br><span class=\"line\"> Txt.push(<span class=\"string\">\"&lt;/tr&gt;\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"tbody\"</span>).innerHTML=Txt.join(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">Txt=<span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>这个join方法就是在字符串之间加入一个字符，本例是一个空字符，注意不是空白字符” “。Join方法和绝大多数的字符串处理的方法（如indexOf、toUpperCase。即使是replece也不例外）一样并不会改变原字符串（数组）的内容。最后一句让浏览器回收降低内存消耗。</p>\n<h2 id=\"检验字符串的相等\"><a href=\"#检验字符串的相等\" class=\"headerlink\" title=\"检验字符串的相等\"></a>检验字符串的相等</h2><p>JavaScript的两种等号操作符：==和===。==完全向后兼容，当两边类型不同时会执行类型转换。例如下面</p>\n<p>两个对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj=<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">\"123\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">\"123\"</span>;</span><br></pre></td></tr></table></figure>\n<p>很明显obj==str将返回true，而===则是严格等号操作不会执行类型转换。类似的可以参见上一节的undefined和null的比较。</p>\n<h2 id=\"Unicode值和字符的互相转换\"><a href=\"#Unicode值和字符的互相转换\" class=\"headerlink\" title=\"Unicode值和字符的互相转换\"></a>Unicode值和字符的互相转换</h2><p>对于字符串值和字符串对象，两者是不同的。前者使用charCodeAt(index)后者使用String.fromCharCode(index);</p>\n<p>另外不要简单的认为Unicode包含了全世界许多语言的文字和字符，就随意的断定知道字符的Unicode值就可以在警告框、文本框、或渲染页面中显示其他语言的特性字符，除非是浏览器和操作系统包含了这些语言。所以你经常在一些大型中文论坛发现很多留学生用英文回帖，其实不是他们不会中文，只是别人的系统和浏览器没有安装中文字体。</p>\n<h2 id=\"URL字符串的编码和解码\"><a href=\"#URL字符串的编码和解码\" class=\"headerlink\" title=\"URL字符串的编码和解码\"></a>URL字符串的编码和解码</h2><p>常用的方法有escape和unescape、encodeURI和decodeURL、encodeURIComponent和decodeURIComponent，前者对应编码后者对应解码。</p>\n<p>编码时普通的字母和数字一般都不会被转换，中文字符以及其他的特殊符号都能被转换。</p>\n<p>注意：IE浏览器@不能通过escape方法转换。</p>\n<p>另外Mozilla的浏览器独有的atob（）和btoa（）方法将普通字符串在Base64字符串中相互转换。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"单引号与双引号\"><a href=\"#单引号与双引号\" class=\"headerlink\" title=\"单引号与双引号\"></a>单引号与双引号</h2><p>创建字符串的常用方法有以下两种。</p>\n<blockquote>\n<ul>\n<li>方法一：var str1=”i love javascript”;</li>\n<li>方法二：var str2=’i love javascript’;</li>\n</ul>\n</blockquote>\n<p>单引号和双引号在JavaScript中的作用是等价的。但是一旦两者混用后就会引发一些麻烦，因此你需要妥善处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mystring=<span class=\"string\">\"i love winslet's sister and nancy's sister\"</span>;</span><br></pre></td></tr></table></figure>\n<p>这种情况你就必须使用转义字符，因为你需要输出单引号而单引号出现了不止一次。当单引号只出现一次时可以不使用转义字符。而当你仅希望将单引号之间的对象当作字符串处理时就不要使用转义字符。</p>\n<h2 id=\"字符串对象与字符串值\"><a href=\"#字符串对象与字符串值\" class=\"headerlink\" title=\"字符串对象与字符串值\"></a>字符串对象与字符串值</h2><p>至此，我们需要区分字符串对象和字符串的值。通常来说我们都是只得字符串值。一个字符串对象是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> strobject=<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">\"i love javascript\"</span>);</span><br></pre></td></tr></table></figure>\n<p>测试一下你会发现strobject的数据类型是Object而不是String,但是他却继承了String所有的属性和方法。</p>\n<h2 id=\"连接字符串\"><a href=\"#连接字符串\" class=\"headerlink\" title=\"连接字符串\"></a>连接字符串</h2><p>连接较长的字符串时，你需要特别注意代码中的换行。JavaScript解释器的一个内置特性–在代码的逻辑终点加入分号，所以不能简单的使用回车换行，而应该在该行的最末尾加入“+”。</p>\n<h3 id=\"错误的做法：\"><a href=\"#错误的做法：\" class=\"headerlink\" title=\"错误的做法：\"></a>错误的做法：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> strA=<span class=\"string\">\"what i love is csharp ,javascript ,java,php</span></span><br><span class=\"line\"><span class=\"string\">And vb.net\"</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"正确的做法：\"><a href=\"#正确的做法：\" class=\"headerlink\" title=\"正确的做法：\"></a>正确的做法：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> strA=<span class=\"string\">\"what i love is csharp ,javascript ,java,php\"</span>+</span><br><span class=\"line\"><span class=\"string\">\"And vb.net\"</span>;</span><br></pre></td></tr></table></figure>\n<p>在合适的地方合理的使用+和;可以减少很多JavaScript代码发生的意外错误。</p>\n<h2 id=\"提高字符串处理的性能\"><a href=\"#提高字符串处理的性能\" class=\"headerlink\" title=\"提高字符串处理的性能\"></a>提高字符串处理的性能</h2><p>以前我一致认为字符串这么简单的对象，不管是C#还是JavaScript处理几万个字符的简单累加应该是不需要什么时间的。但是后来发现我错了，当数量超过2万以上时根据机器的性能需要3-15秒的时间。令人诧异吧！</p>\n<p>C#中可以使用StringBuilder来提高字符串处理的性能，在JavaScript中我们有什么呢？Array！下面的例子一目了然。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Txt=<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\"> Txt.push(<span class=\"string\">\"&lt;tr&gt;\"</span>);</span><br><span class=\"line\"> Txt.push(<span class=\"string\">\"&lt;td&gt;\"</span>);</span><br><span class=\"line\"> Txt.push(<span class=\"string\">\"&lt;/td&gt;\"</span>);</span><br><span class=\"line\"> Txt.push(<span class=\"string\">\"&lt;/tr&gt;\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"tbody\"</span>).innerHTML=Txt.join(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">Txt=<span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>这个join方法就是在字符串之间加入一个字符，本例是一个空字符，注意不是空白字符” “。Join方法和绝大多数的字符串处理的方法（如indexOf、toUpperCase。即使是replece也不例外）一样并不会改变原字符串（数组）的内容。最后一句让浏览器回收降低内存消耗。</p>\n<h2 id=\"检验字符串的相等\"><a href=\"#检验字符串的相等\" class=\"headerlink\" title=\"检验字符串的相等\"></a>检验字符串的相等</h2><p>JavaScript的两种等号操作符：==和===。==完全向后兼容，当两边类型不同时会执行类型转换。例如下面</p>\n<p>两个对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj=<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">\"123\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">\"123\"</span>;</span><br></pre></td></tr></table></figure>\n<p>很明显obj==str将返回true，而===则是严格等号操作不会执行类型转换。类似的可以参见上一节的undefined和null的比较。</p>\n<h2 id=\"Unicode值和字符的互相转换\"><a href=\"#Unicode值和字符的互相转换\" class=\"headerlink\" title=\"Unicode值和字符的互相转换\"></a>Unicode值和字符的互相转换</h2><p>对于字符串值和字符串对象，两者是不同的。前者使用charCodeAt(index)后者使用String.fromCharCode(index);</p>\n<p>另外不要简单的认为Unicode包含了全世界许多语言的文字和字符，就随意的断定知道字符的Unicode值就可以在警告框、文本框、或渲染页面中显示其他语言的特性字符，除非是浏览器和操作系统包含了这些语言。所以你经常在一些大型中文论坛发现很多留学生用英文回帖，其实不是他们不会中文，只是别人的系统和浏览器没有安装中文字体。</p>\n<h2 id=\"URL字符串的编码和解码\"><a href=\"#URL字符串的编码和解码\" class=\"headerlink\" title=\"URL字符串的编码和解码\"></a>URL字符串的编码和解码</h2><p>常用的方法有escape和unescape、encodeURI和decodeURL、encodeURIComponent和decodeURIComponent，前者对应编码后者对应解码。</p>\n<p>编码时普通的字母和数字一般都不会被转换，中文字符以及其他的特殊符号都能被转换。</p>\n<p>注意：IE浏览器@不能通过escape方法转换。</p>\n<p>另外Mozilla的浏览器独有的atob（）和btoa（）方法将普通字符串在Base64字符串中相互转换。</p>\n"},{"title":"JavaScript乱弹之（五）：使用脚本创建动态内容","date":"2010-01-28T16:00:00.000Z","_content":"\n## document.write()\n\n所有支持脚本的浏览器都可以在正文中嵌入document.write()语句。利用它你可以动态的创建内容，不过使用它你需要十分小心。最常见的错误就是在页面加载完毕以后调用，以修改或向页面添加内容。这样的结果只会是用你组装的脚本内容替换掉你的当前页。\n\n## 创建节点\n创建动态内容标准的方法是使用W3C的document对象的元素创建方法。\n\n```js\nvar elem=document.createElement(\"p\");\n//参数名可以是大写也可以是小写，但是元素elem.tagName的返回值永远是大写。\ncreateAttribute( attributeName )\ncreateComment( commentString )\ncreateDocumentFragment()\ncreateTextNode( textString )\n```\n\n以上方法全部返回一个节点对象（node object），在没有进行插入操作时，以上方法并不影响DOM的结构。\n\n## 插入和附加节点\n**insertBefore( newChildNode, referenceNode )**\n\n在现有的子节点前插入一个节点\n使用方法：parentnode.insertBefore(newNode,childnode)，当childnode为null时作用与appendChild相同。\n\n**appendChild( newChildNode )**\n\n将节点添加到指定的节点的最后一个子节点的后面\n使用方法：parentnode.appendChild(newNode);\n\n## 移除、替换和复制节点\n**removeChild( childNode )**\n\n**replaceChild( newNode, nodeToReplace )**\n\n**cloneNode( true/false)**\n\nTrue表示深克隆，所有子节点也被克隆；false表示浅克隆，不会复制子节点。\n设置节点的属性\n\n有两种常用的方式：\n\n```js\nvar elem=document.createElement(\"div\");\nelem.setAttribute(\"id\",\"testDIV\");\nelem[\"id\"]=\"testDIV\";\n```\n\n浏览器能够同等识别以上两种方法，W3C推荐第一种，但是由于第一种在IE经常无法改变属性的值，所以最好还是用第二种。\n\n**innerHTML**\n\nIE4引入了两个基于文本的元素对象属性：**innerText**和**innerHTML**，由于innerHTML的大量使用而且实用性很强，以至于原本那些许多以“标准”自居的浏览器在严格遵守\nW3C DOM戒律方面有所放宽，并实现了innerHTML。FireFox并不支持innerText。\n请你记住innerHTML的开创者是IE！\n\n节点的常用属性\n> * nodeName\n> * nodeValue\n> * nodeType\n> * parentNode\n> * childNodes\n> * Attributes\n> * firstChild\n> * lastChild\n> * ownerDocument\n> * previousSibling\n> * nextSibling\n> * tagName\n\n# nodeType对应值与类型\n\n> * 1 Element\n> * 2 Attribute\n> * 3 Text\n> * 8 Comment\n> * 9 Document\n> * 10 DocumentType\n\n自定义的insertAfter方法\n\n```js\nfunction insertAfter(newEl, targetEl){\n            var parentEl = targetEl.parentNode;\n                        if(parentEl.lastChild == targetEl)\n            {\n                parentEl.appendChild(newEl);\n            }else\n            {\n                parentEl.insertBefore(newEl,targetEl.nextSibling);\n            }            \n}\n```\n\n思路：首先找到目标节点的父节点，如果目标节点是父节点的最后一个子节点，则使用appendChild方法；如果不是最后一个节点则使用JavaScript内置的insertBefore方法插入到目标节点的下一个兄弟节点之前。\n\n使用方法：\n\n```js\nvar txtName = document.getElementById(\"txtName\");\nvar htmlSpan = document.createElement(\"span\");\nhtmlSpan.innerHTML = \"This is a test\";\ninsertAfter(htmlSpan,txtName);\n```\n将htmlSpan 作为txtName 的兄弟节点插入到txtName 节点之后\n","source":"_posts/JavaScript乱弹之（五）：使用脚本创建动态内容.md","raw":"---\ntitle: JavaScript乱弹之（五）：使用脚本创建动态内容\ndate: 2010-01-29\ntags: JavaScript\n---\n\n## document.write()\n\n所有支持脚本的浏览器都可以在正文中嵌入document.write()语句。利用它你可以动态的创建内容，不过使用它你需要十分小心。最常见的错误就是在页面加载完毕以后调用，以修改或向页面添加内容。这样的结果只会是用你组装的脚本内容替换掉你的当前页。\n\n## 创建节点\n创建动态内容标准的方法是使用W3C的document对象的元素创建方法。\n\n```js\nvar elem=document.createElement(\"p\");\n//参数名可以是大写也可以是小写，但是元素elem.tagName的返回值永远是大写。\ncreateAttribute( attributeName )\ncreateComment( commentString )\ncreateDocumentFragment()\ncreateTextNode( textString )\n```\n\n以上方法全部返回一个节点对象（node object），在没有进行插入操作时，以上方法并不影响DOM的结构。\n\n## 插入和附加节点\n**insertBefore( newChildNode, referenceNode )**\n\n在现有的子节点前插入一个节点\n使用方法：parentnode.insertBefore(newNode,childnode)，当childnode为null时作用与appendChild相同。\n\n**appendChild( newChildNode )**\n\n将节点添加到指定的节点的最后一个子节点的后面\n使用方法：parentnode.appendChild(newNode);\n\n## 移除、替换和复制节点\n**removeChild( childNode )**\n\n**replaceChild( newNode, nodeToReplace )**\n\n**cloneNode( true/false)**\n\nTrue表示深克隆，所有子节点也被克隆；false表示浅克隆，不会复制子节点。\n设置节点的属性\n\n有两种常用的方式：\n\n```js\nvar elem=document.createElement(\"div\");\nelem.setAttribute(\"id\",\"testDIV\");\nelem[\"id\"]=\"testDIV\";\n```\n\n浏览器能够同等识别以上两种方法，W3C推荐第一种，但是由于第一种在IE经常无法改变属性的值，所以最好还是用第二种。\n\n**innerHTML**\n\nIE4引入了两个基于文本的元素对象属性：**innerText**和**innerHTML**，由于innerHTML的大量使用而且实用性很强，以至于原本那些许多以“标准”自居的浏览器在严格遵守\nW3C DOM戒律方面有所放宽，并实现了innerHTML。FireFox并不支持innerText。\n请你记住innerHTML的开创者是IE！\n\n节点的常用属性\n> * nodeName\n> * nodeValue\n> * nodeType\n> * parentNode\n> * childNodes\n> * Attributes\n> * firstChild\n> * lastChild\n> * ownerDocument\n> * previousSibling\n> * nextSibling\n> * tagName\n\n# nodeType对应值与类型\n\n> * 1 Element\n> * 2 Attribute\n> * 3 Text\n> * 8 Comment\n> * 9 Document\n> * 10 DocumentType\n\n自定义的insertAfter方法\n\n```js\nfunction insertAfter(newEl, targetEl){\n            var parentEl = targetEl.parentNode;\n                        if(parentEl.lastChild == targetEl)\n            {\n                parentEl.appendChild(newEl);\n            }else\n            {\n                parentEl.insertBefore(newEl,targetEl.nextSibling);\n            }            \n}\n```\n\n思路：首先找到目标节点的父节点，如果目标节点是父节点的最后一个子节点，则使用appendChild方法；如果不是最后一个节点则使用JavaScript内置的insertBefore方法插入到目标节点的下一个兄弟节点之前。\n\n使用方法：\n\n```js\nvar txtName = document.getElementById(\"txtName\");\nvar htmlSpan = document.createElement(\"span\");\nhtmlSpan.innerHTML = \"This is a test\";\ninsertAfter(htmlSpan,txtName);\n```\n将htmlSpan 作为txtName 的兄弟节点插入到txtName 节点之后\n","slug":"JavaScript乱弹之（五）：使用脚本创建动态内容","published":1,"updated":"2017-12-22T14:35:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbi0v4et00053k95maz5s14f","content":"<h2 id=\"document-write\"><a href=\"#document-write\" class=\"headerlink\" title=\"document.write()\"></a>document.write()</h2><p>所有支持脚本的浏览器都可以在正文中嵌入document.write()语句。利用它你可以动态的创建内容，不过使用它你需要十分小心。最常见的错误就是在页面加载完毕以后调用，以修改或向页面添加内容。这样的结果只会是用你组装的脚本内容替换掉你的当前页。</p>\n<h2 id=\"创建节点\"><a href=\"#创建节点\" class=\"headerlink\" title=\"创建节点\"></a>创建节点</h2><p>创建动态内容标准的方法是使用W3C的document对象的元素创建方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> elem=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"p\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//参数名可以是大写也可以是小写，但是元素elem.tagName的返回值永远是大写。</span></span><br><span class=\"line\">createAttribute( attributeName )</span><br><span class=\"line\">createComment( commentString )</span><br><span class=\"line\">createDocumentFragment()</span><br><span class=\"line\">createTextNode( textString )</span><br></pre></td></tr></table></figure>\n<p>以上方法全部返回一个节点对象（node object），在没有进行插入操作时，以上方法并不影响DOM的结构。</p>\n<h2 id=\"插入和附加节点\"><a href=\"#插入和附加节点\" class=\"headerlink\" title=\"插入和附加节点\"></a>插入和附加节点</h2><p><strong>insertBefore( newChildNode, referenceNode )</strong></p>\n<p>在现有的子节点前插入一个节点<br>使用方法：parentnode.insertBefore(newNode,childnode)，当childnode为null时作用与appendChild相同。</p>\n<p><strong>appendChild( newChildNode )</strong></p>\n<p>将节点添加到指定的节点的最后一个子节点的后面<br>使用方法：parentnode.appendChild(newNode);</p>\n<h2 id=\"移除、替换和复制节点\"><a href=\"#移除、替换和复制节点\" class=\"headerlink\" title=\"移除、替换和复制节点\"></a>移除、替换和复制节点</h2><p><strong>removeChild( childNode )</strong></p>\n<p><strong>replaceChild( newNode, nodeToReplace )</strong></p>\n<p><strong>cloneNode( true/false)</strong></p>\n<p>True表示深克隆，所有子节点也被克隆；false表示浅克隆，不会复制子节点。<br>设置节点的属性</p>\n<p>有两种常用的方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> elem=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\">elem.setAttribute(<span class=\"string\">\"id\"</span>,<span class=\"string\">\"testDIV\"</span>);</span><br><span class=\"line\">elem[<span class=\"string\">\"id\"</span>]=<span class=\"string\">\"testDIV\"</span>;</span><br></pre></td></tr></table></figure>\n<p>浏览器能够同等识别以上两种方法，W3C推荐第一种，但是由于第一种在IE经常无法改变属性的值，所以最好还是用第二种。</p>\n<p><strong>innerHTML</strong></p>\n<p>IE4引入了两个基于文本的元素对象属性：<strong>innerText</strong>和<strong>innerHTML</strong>，由于innerHTML的大量使用而且实用性很强，以至于原本那些许多以“标准”自居的浏览器在严格遵守<br>W3C DOM戒律方面有所放宽，并实现了innerHTML。FireFox并不支持innerText。<br>请你记住innerHTML的开创者是IE！</p>\n<p>节点的常用属性</p>\n<blockquote>\n<ul>\n<li>nodeName</li>\n<li>nodeValue</li>\n<li>nodeType</li>\n<li>parentNode</li>\n<li>childNodes</li>\n<li>Attributes</li>\n<li>firstChild</li>\n<li>lastChild</li>\n<li>ownerDocument</li>\n<li>previousSibling</li>\n<li>nextSibling</li>\n<li>tagName</li>\n</ul>\n</blockquote>\n<h1 id=\"nodeType对应值与类型\"><a href=\"#nodeType对应值与类型\" class=\"headerlink\" title=\"nodeType对应值与类型\"></a>nodeType对应值与类型</h1><blockquote>\n<ul>\n<li>1 Element</li>\n<li>2 Attribute</li>\n<li>3 Text</li>\n<li>8 Comment</li>\n<li>9 Document</li>\n<li>10 DocumentType</li>\n</ul>\n</blockquote>\n<p>自定义的insertAfter方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertAfter</span>(<span class=\"params\">newEl, targetEl</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> parentEl = targetEl.parentNode;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(parentEl.lastChild == targetEl)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                parentEl.appendChild(newEl);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                parentEl.insertBefore(newEl,targetEl.nextSibling);</span><br><span class=\"line\">            &#125;            </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>思路：首先找到目标节点的父节点，如果目标节点是父节点的最后一个子节点，则使用appendChild方法；如果不是最后一个节点则使用JavaScript内置的insertBefore方法插入到目标节点的下一个兄弟节点之前。</p>\n<p>使用方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> txtName = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"txtName\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlSpan = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"span\"</span>);</span><br><span class=\"line\">htmlSpan.innerHTML = <span class=\"string\">\"This is a test\"</span>;</span><br><span class=\"line\">insertAfter(htmlSpan,txtName);</span><br></pre></td></tr></table></figure>\n<p>将htmlSpan 作为txtName 的兄弟节点插入到txtName 节点之后</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"document-write\"><a href=\"#document-write\" class=\"headerlink\" title=\"document.write()\"></a>document.write()</h2><p>所有支持脚本的浏览器都可以在正文中嵌入document.write()语句。利用它你可以动态的创建内容，不过使用它你需要十分小心。最常见的错误就是在页面加载完毕以后调用，以修改或向页面添加内容。这样的结果只会是用你组装的脚本内容替换掉你的当前页。</p>\n<h2 id=\"创建节点\"><a href=\"#创建节点\" class=\"headerlink\" title=\"创建节点\"></a>创建节点</h2><p>创建动态内容标准的方法是使用W3C的document对象的元素创建方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> elem=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"p\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//参数名可以是大写也可以是小写，但是元素elem.tagName的返回值永远是大写。</span></span><br><span class=\"line\">createAttribute( attributeName )</span><br><span class=\"line\">createComment( commentString )</span><br><span class=\"line\">createDocumentFragment()</span><br><span class=\"line\">createTextNode( textString )</span><br></pre></td></tr></table></figure>\n<p>以上方法全部返回一个节点对象（node object），在没有进行插入操作时，以上方法并不影响DOM的结构。</p>\n<h2 id=\"插入和附加节点\"><a href=\"#插入和附加节点\" class=\"headerlink\" title=\"插入和附加节点\"></a>插入和附加节点</h2><p><strong>insertBefore( newChildNode, referenceNode )</strong></p>\n<p>在现有的子节点前插入一个节点<br>使用方法：parentnode.insertBefore(newNode,childnode)，当childnode为null时作用与appendChild相同。</p>\n<p><strong>appendChild( newChildNode )</strong></p>\n<p>将节点添加到指定的节点的最后一个子节点的后面<br>使用方法：parentnode.appendChild(newNode);</p>\n<h2 id=\"移除、替换和复制节点\"><a href=\"#移除、替换和复制节点\" class=\"headerlink\" title=\"移除、替换和复制节点\"></a>移除、替换和复制节点</h2><p><strong>removeChild( childNode )</strong></p>\n<p><strong>replaceChild( newNode, nodeToReplace )</strong></p>\n<p><strong>cloneNode( true/false)</strong></p>\n<p>True表示深克隆，所有子节点也被克隆；false表示浅克隆，不会复制子节点。<br>设置节点的属性</p>\n<p>有两种常用的方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> elem=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\">elem.setAttribute(<span class=\"string\">\"id\"</span>,<span class=\"string\">\"testDIV\"</span>);</span><br><span class=\"line\">elem[<span class=\"string\">\"id\"</span>]=<span class=\"string\">\"testDIV\"</span>;</span><br></pre></td></tr></table></figure>\n<p>浏览器能够同等识别以上两种方法，W3C推荐第一种，但是由于第一种在IE经常无法改变属性的值，所以最好还是用第二种。</p>\n<p><strong>innerHTML</strong></p>\n<p>IE4引入了两个基于文本的元素对象属性：<strong>innerText</strong>和<strong>innerHTML</strong>，由于innerHTML的大量使用而且实用性很强，以至于原本那些许多以“标准”自居的浏览器在严格遵守<br>W3C DOM戒律方面有所放宽，并实现了innerHTML。FireFox并不支持innerText。<br>请你记住innerHTML的开创者是IE！</p>\n<p>节点的常用属性</p>\n<blockquote>\n<ul>\n<li>nodeName</li>\n<li>nodeValue</li>\n<li>nodeType</li>\n<li>parentNode</li>\n<li>childNodes</li>\n<li>Attributes</li>\n<li>firstChild</li>\n<li>lastChild</li>\n<li>ownerDocument</li>\n<li>previousSibling</li>\n<li>nextSibling</li>\n<li>tagName</li>\n</ul>\n</blockquote>\n<h1 id=\"nodeType对应值与类型\"><a href=\"#nodeType对应值与类型\" class=\"headerlink\" title=\"nodeType对应值与类型\"></a>nodeType对应值与类型</h1><blockquote>\n<ul>\n<li>1 Element</li>\n<li>2 Attribute</li>\n<li>3 Text</li>\n<li>8 Comment</li>\n<li>9 Document</li>\n<li>10 DocumentType</li>\n</ul>\n</blockquote>\n<p>自定义的insertAfter方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertAfter</span>(<span class=\"params\">newEl, targetEl</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> parentEl = targetEl.parentNode;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(parentEl.lastChild == targetEl)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                parentEl.appendChild(newEl);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                parentEl.insertBefore(newEl,targetEl.nextSibling);</span><br><span class=\"line\">            &#125;            </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>思路：首先找到目标节点的父节点，如果目标节点是父节点的最后一个子节点，则使用appendChild方法；如果不是最后一个节点则使用JavaScript内置的insertBefore方法插入到目标节点的下一个兄弟节点之前。</p>\n<p>使用方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> txtName = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"txtName\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlSpan = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"span\"</span>);</span><br><span class=\"line\">htmlSpan.innerHTML = <span class=\"string\">\"This is a test\"</span>;</span><br><span class=\"line\">insertAfter(htmlSpan,txtName);</span><br></pre></td></tr></table></figure>\n<p>将htmlSpan 作为txtName 的兄弟节点插入到txtName 节点之后</p>\n"},{"title":"JavaScript乱弹之（四）： 关于Form(ASPX)，你必须知道的","date":"2010-01-27T16:00:00.000Z","_content":"\n在aspx页面中，可以使用**Request.Form[\"controlname\"]**来得到控件value属性。\n\n那么这些控件必须是哪些类型的控件呢？\n\n所有HTML元素里面的input元素，但是还需要另外一个条件就是这个input元素必须要有name属性，id属性可有可无。\n\n可能你问如果多个元素的name属性相同怎么办？\n\n如果name相同则这些元素的value以逗号分隔，形如“value1,value2”。如果你使用的是服务器控件那么在生成的aspx页面中会自动给所有服务器控件加上name属性，这个name和id的值是相同的。不过当存在母板页时可能会要加上形如“ctl00_ContentPlaceHolder_”的标记，这些只要看看aspx源码就知道了。\n\n另外在Request.Form这是一个NameValueCollection，你可以使用如下代码看看本页面中的表单请求：\n\n```csharp\n   For(int i=0;i<Request.Form.Count;i++){\n\ttextbox1.Text+=Request.Form[i]+\",\";\n  }\n```\n\n你会发现多了最后textbox1呈现的结果比你vs编辑器里的input元素总是多2个，而且这两个都是很长的“乱码”。其实这些就是ViewState，你可以去MSDN查看相关介绍。\n另外所有的服务器控件最后都是转化为HTML控件的，这个转化因控件不同复杂性也不同，比如TreeView转化为HTML控件之后就是DIV嵌套TABLE形成的，这里不详述，自己拖一个看看就知道关系了。\n\n另外你有可能需要通过脚本来操作隐藏的控件，这个时候你需要注意这个控件是服务器控件还是HTML控件以及你如何隐藏这些控件。\n\n服务器控件可以简单的设置Visible=\"false\"来隐藏控件，但是一旦这样隐藏，在页面源码中你就找不到该控件的HTML代码了。也就是说，你通过脚本是无法找到该控件的，只有在后台编码中可以使用该控件。\n\n但是如果你是通过css来控制的，通过脚本就可以找到。虽然如此你仍然需要掌握css两种不同的隐藏元素的方法：display:none和visibility:hidden,区别在于后者在页面中仍然占据物理空间，前者则通过其他文本流或控件元素自动填补。你拖两个这样的控件，去尝试一下在页面上右键复制这两个控件。\n\nhtml控件的只能通过css来设置其显隐，虽然在vs编辑器里有一个visible属性但是那只有当该控件加上runat=\"server\"才有效。一旦如此它就是HTML服务器控件了。\n\n暂时到这吧，以后继续更新。\n","source":"_posts/JavaScript乱弹之（四）： 关于Form(ASPX)，你必须知道的.md","raw":"---\ntitle: JavaScript乱弹之（四）： 关于Form(ASPX)，你必须知道的\ndate: 2010-01-28\ntags: JavaScript\n---\n\n在aspx页面中，可以使用**Request.Form[\"controlname\"]**来得到控件value属性。\n\n那么这些控件必须是哪些类型的控件呢？\n\n所有HTML元素里面的input元素，但是还需要另外一个条件就是这个input元素必须要有name属性，id属性可有可无。\n\n可能你问如果多个元素的name属性相同怎么办？\n\n如果name相同则这些元素的value以逗号分隔，形如“value1,value2”。如果你使用的是服务器控件那么在生成的aspx页面中会自动给所有服务器控件加上name属性，这个name和id的值是相同的。不过当存在母板页时可能会要加上形如“ctl00_ContentPlaceHolder_”的标记，这些只要看看aspx源码就知道了。\n\n另外在Request.Form这是一个NameValueCollection，你可以使用如下代码看看本页面中的表单请求：\n\n```csharp\n   For(int i=0;i<Request.Form.Count;i++){\n\ttextbox1.Text+=Request.Form[i]+\",\";\n  }\n```\n\n你会发现多了最后textbox1呈现的结果比你vs编辑器里的input元素总是多2个，而且这两个都是很长的“乱码”。其实这些就是ViewState，你可以去MSDN查看相关介绍。\n另外所有的服务器控件最后都是转化为HTML控件的，这个转化因控件不同复杂性也不同，比如TreeView转化为HTML控件之后就是DIV嵌套TABLE形成的，这里不详述，自己拖一个看看就知道关系了。\n\n另外你有可能需要通过脚本来操作隐藏的控件，这个时候你需要注意这个控件是服务器控件还是HTML控件以及你如何隐藏这些控件。\n\n服务器控件可以简单的设置Visible=\"false\"来隐藏控件，但是一旦这样隐藏，在页面源码中你就找不到该控件的HTML代码了。也就是说，你通过脚本是无法找到该控件的，只有在后台编码中可以使用该控件。\n\n但是如果你是通过css来控制的，通过脚本就可以找到。虽然如此你仍然需要掌握css两种不同的隐藏元素的方法：display:none和visibility:hidden,区别在于后者在页面中仍然占据物理空间，前者则通过其他文本流或控件元素自动填补。你拖两个这样的控件，去尝试一下在页面上右键复制这两个控件。\n\nhtml控件的只能通过css来设置其显隐，虽然在vs编辑器里有一个visible属性但是那只有当该控件加上runat=\"server\"才有效。一旦如此它就是HTML服务器控件了。\n\n暂时到这吧，以后继续更新。\n","slug":"JavaScript乱弹之（四）： 关于Form(ASPX)，你必须知道的","published":1,"updated":"2017-12-22T14:34:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbi0v4ev00073k959d5ueom8","content":"<p>在aspx页面中，可以使用<strong>Request.Form[“controlname”]</strong>来得到控件value属性。</p>\n<p>那么这些控件必须是哪些类型的控件呢？</p>\n<p>所有HTML元素里面的input元素，但是还需要另外一个条件就是这个input元素必须要有name属性，id属性可有可无。</p>\n<p>可能你问如果多个元素的name属性相同怎么办？</p>\n<p>如果name相同则这些元素的value以逗号分隔，形如“value1,value2”。如果你使用的是服务器控件那么在生成的aspx页面中会自动给所有服务器控件加上name属性，这个name和id的值是相同的。不过当存在母板页时可能会要加上形如“ctl00<em>ContentPlaceHolder</em>”的标记，这些只要看看aspx源码就知道了。</p>\n<p>另外在Request.Form这是一个NameValueCollection，你可以使用如下代码看看本页面中的表单请求：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  For(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;Request.Form.Count;i++)&#123;</span><br><span class=\"line\">textbox1.Text+=Request.Form[i]+<span class=\"string\">\",\"</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>你会发现多了最后textbox1呈现的结果比你vs编辑器里的input元素总是多2个，而且这两个都是很长的“乱码”。其实这些就是ViewState，你可以去MSDN查看相关介绍。<br>另外所有的服务器控件最后都是转化为HTML控件的，这个转化因控件不同复杂性也不同，比如TreeView转化为HTML控件之后就是DIV嵌套TABLE形成的，这里不详述，自己拖一个看看就知道关系了。</p>\n<p>另外你有可能需要通过脚本来操作隐藏的控件，这个时候你需要注意这个控件是服务器控件还是HTML控件以及你如何隐藏这些控件。</p>\n<p>服务器控件可以简单的设置Visible=”false”来隐藏控件，但是一旦这样隐藏，在页面源码中你就找不到该控件的HTML代码了。也就是说，你通过脚本是无法找到该控件的，只有在后台编码中可以使用该控件。</p>\n<p>但是如果你是通过css来控制的，通过脚本就可以找到。虽然如此你仍然需要掌握css两种不同的隐藏元素的方法：display:none和visibility:hidden,区别在于后者在页面中仍然占据物理空间，前者则通过其他文本流或控件元素自动填补。你拖两个这样的控件，去尝试一下在页面上右键复制这两个控件。</p>\n<p>html控件的只能通过css来设置其显隐，虽然在vs编辑器里有一个visible属性但是那只有当该控件加上runat=”server”才有效。一旦如此它就是HTML服务器控件了。</p>\n<p>暂时到这吧，以后继续更新。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在aspx页面中，可以使用<strong>Request.Form[“controlname”]</strong>来得到控件value属性。</p>\n<p>那么这些控件必须是哪些类型的控件呢？</p>\n<p>所有HTML元素里面的input元素，但是还需要另外一个条件就是这个input元素必须要有name属性，id属性可有可无。</p>\n<p>可能你问如果多个元素的name属性相同怎么办？</p>\n<p>如果name相同则这些元素的value以逗号分隔，形如“value1,value2”。如果你使用的是服务器控件那么在生成的aspx页面中会自动给所有服务器控件加上name属性，这个name和id的值是相同的。不过当存在母板页时可能会要加上形如“ctl00<em>ContentPlaceHolder</em>”的标记，这些只要看看aspx源码就知道了。</p>\n<p>另外在Request.Form这是一个NameValueCollection，你可以使用如下代码看看本页面中的表单请求：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  For(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;Request.Form.Count;i++)&#123;</span><br><span class=\"line\">textbox1.Text+=Request.Form[i]+<span class=\"string\">\",\"</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>你会发现多了最后textbox1呈现的结果比你vs编辑器里的input元素总是多2个，而且这两个都是很长的“乱码”。其实这些就是ViewState，你可以去MSDN查看相关介绍。<br>另外所有的服务器控件最后都是转化为HTML控件的，这个转化因控件不同复杂性也不同，比如TreeView转化为HTML控件之后就是DIV嵌套TABLE形成的，这里不详述，自己拖一个看看就知道关系了。</p>\n<p>另外你有可能需要通过脚本来操作隐藏的控件，这个时候你需要注意这个控件是服务器控件还是HTML控件以及你如何隐藏这些控件。</p>\n<p>服务器控件可以简单的设置Visible=”false”来隐藏控件，但是一旦这样隐藏，在页面源码中你就找不到该控件的HTML代码了。也就是说，你通过脚本是无法找到该控件的，只有在后台编码中可以使用该控件。</p>\n<p>但是如果你是通过css来控制的，通过脚本就可以找到。虽然如此你仍然需要掌握css两种不同的隐藏元素的方法：display:none和visibility:hidden,区别在于后者在页面中仍然占据物理空间，前者则通过其他文本流或控件元素自动填补。你拖两个这样的控件，去尝试一下在页面上右键复制这两个控件。</p>\n<p>html控件的只能通过css来设置其显隐，虽然在vs编辑器里有一个visible属性但是那只有当该控件加上runat=”server”才有效。一旦如此它就是HTML服务器控件了。</p>\n<p>暂时到这吧，以后继续更新。</p>\n"},{"title":"Better React 后续","date":"2016-03-11T16:00:00.000Z","_content":"\n之前重构项目后根据个人实战经验写了一篇[《Better React》](http://zhuanlan.zhihu.com/reduixs/20554654)，总结在React中传递props应该注意的事项。\n在后来与网友的讨论中发现行文总结不太严谨，于是乎再度发文，争取纠正其中某些纰漏之处，不至于误导他人。\n如果你还没有阅读[《Better React》](http://zhuanlan.zhihu.com/reduixs/20554654)，推荐阅读之后再来阅读本文。\n\n## 缓存函数作为组件的prop传递不可取吗？\n\n之前的文章中不推荐缓存函数主要是因为下面这两个原因：\n- _类似的prop越多，外层缓存的函数越多，代码风格极其不自然_\n- _如果函数依赖于局部变量，缓存的方式异常麻烦甚至于无法解决_\n\n这里我们有必要再进行一些科普工作。 React组件可以接受函数作为prop，一般我们传递的时候有三种方式：\n1. 在组件当前作用域定义局部变量\n2. 在最外层的作用域定义全局变量\n3. 作为组件自身的实例方法定义\n\n第一种方式写法最自然，但是危害最大，因为函数引用在父组件render的时候会一直变化。 第二种方式写法最蛋疼，函数引用不会变化，但是可以解决一些问题。\n第三种方式则是前两种方法的一个比较完美结合。\n\n至此，第一个原因提及的问题通过第三种方式可以解决。至于代码风格问题，因人而异。\n第二个原因提到的问题可能描述的不太详细，以致于会有人疑惑：\n- 为什么不把依赖的变量作为prop一同传入给子组件，这样反而更符合React的思想\n\n传还是不传，怎么做才是最佳实践？且往下看。\n## 应该使用EventEmitter吗？\n\n依赖是否需要作为props传递给子组件？这个我只能无奈地说要结合实际需求决定。\n当我们不使用EventEmitter的时候，看看我们怎么处理下面三个比较复杂的场景：\n\n**_场景一**_\n_假设多个父组件引用了同一子组件，父组件的依赖又各不相同，这种方式需要将依赖全部加入到子组件的props里，必然引起子组件props爆炸。_\n_props爆炸带来的就是一堆无谓的propType约束定义以及执行时的非空判断，代码臭味非常明显。_\n_倘若子组件未来再增加一些函数类型的props，这种方式简直就是灾难！_\n而EventEmitter只需要给子组件绑定所需的事件交给子组件自己在合适的时机触发就可以了。\n\n**_场景二**_\n少数情况我们要考虑事件解绑，而置空函数类型的props必然导致rerender。\n当然你也可以通过设置开关变量来解决，但原本简单的逻辑变得更复杂了。\n如果函数类型的props很多，开关变量的数目也不会少，徒增很多无意义的代码。\n而EventEmitter只需要简单的解绑事件，也不会引起rerender。\n\n**_场景三**_\n在场景一的情况下，假设现在需要把子组件的事件处理结果同步到父组件的上级。\n在我们重构代码的时候，这种方式需要修改所有的父组件的代码才能满足需求。\n而EventEmitter只需要在最外层的组件给子组件绑定一个事件即可。\n\n更多的例子我就不一一列举了，相信真实世界的案例会更加多变和复杂。不过我们基本可以看出，场景越复杂EventEmitter的优势越明显。\nEventEmitter能够将组件之间的依赖层层解耦，从而能够从容的应对需求的不断变化。\n## 什么情况下不应该使用EventEmitter？\n\n首先我们必须承认，在开源的React组件中，使用EventEmitter非常少见。\n为什么呢？我个人认为主要是以下几个原因：\n- 浏览器不像Node.js，没有原生的EventEmitter实现，需要引入额外的库来支持；\n- 开源组件一般功能和需求规划较为明确，变化相对较少，使用EventEmitter收益非常有限。\n\n所以我推荐在功能通用或逻辑相对简单的组件中不必使用EventEmitter，而在功能复杂需求变化频繁的业务组件中优先使用EventEmitter。\n","source":"_posts/better-react-2.md","raw":"---\ntitle: Better React 后续\ndate: 2016-03-12\ntags: React\n---\n\n之前重构项目后根据个人实战经验写了一篇[《Better React》](http://zhuanlan.zhihu.com/reduixs/20554654)，总结在React中传递props应该注意的事项。\n在后来与网友的讨论中发现行文总结不太严谨，于是乎再度发文，争取纠正其中某些纰漏之处，不至于误导他人。\n如果你还没有阅读[《Better React》](http://zhuanlan.zhihu.com/reduixs/20554654)，推荐阅读之后再来阅读本文。\n\n## 缓存函数作为组件的prop传递不可取吗？\n\n之前的文章中不推荐缓存函数主要是因为下面这两个原因：\n- _类似的prop越多，外层缓存的函数越多，代码风格极其不自然_\n- _如果函数依赖于局部变量，缓存的方式异常麻烦甚至于无法解决_\n\n这里我们有必要再进行一些科普工作。 React组件可以接受函数作为prop，一般我们传递的时候有三种方式：\n1. 在组件当前作用域定义局部变量\n2. 在最外层的作用域定义全局变量\n3. 作为组件自身的实例方法定义\n\n第一种方式写法最自然，但是危害最大，因为函数引用在父组件render的时候会一直变化。 第二种方式写法最蛋疼，函数引用不会变化，但是可以解决一些问题。\n第三种方式则是前两种方法的一个比较完美结合。\n\n至此，第一个原因提及的问题通过第三种方式可以解决。至于代码风格问题，因人而异。\n第二个原因提到的问题可能描述的不太详细，以致于会有人疑惑：\n- 为什么不把依赖的变量作为prop一同传入给子组件，这样反而更符合React的思想\n\n传还是不传，怎么做才是最佳实践？且往下看。\n## 应该使用EventEmitter吗？\n\n依赖是否需要作为props传递给子组件？这个我只能无奈地说要结合实际需求决定。\n当我们不使用EventEmitter的时候，看看我们怎么处理下面三个比较复杂的场景：\n\n**_场景一**_\n_假设多个父组件引用了同一子组件，父组件的依赖又各不相同，这种方式需要将依赖全部加入到子组件的props里，必然引起子组件props爆炸。_\n_props爆炸带来的就是一堆无谓的propType约束定义以及执行时的非空判断，代码臭味非常明显。_\n_倘若子组件未来再增加一些函数类型的props，这种方式简直就是灾难！_\n而EventEmitter只需要给子组件绑定所需的事件交给子组件自己在合适的时机触发就可以了。\n\n**_场景二**_\n少数情况我们要考虑事件解绑，而置空函数类型的props必然导致rerender。\n当然你也可以通过设置开关变量来解决，但原本简单的逻辑变得更复杂了。\n如果函数类型的props很多，开关变量的数目也不会少，徒增很多无意义的代码。\n而EventEmitter只需要简单的解绑事件，也不会引起rerender。\n\n**_场景三**_\n在场景一的情况下，假设现在需要把子组件的事件处理结果同步到父组件的上级。\n在我们重构代码的时候，这种方式需要修改所有的父组件的代码才能满足需求。\n而EventEmitter只需要在最外层的组件给子组件绑定一个事件即可。\n\n更多的例子我就不一一列举了，相信真实世界的案例会更加多变和复杂。不过我们基本可以看出，场景越复杂EventEmitter的优势越明显。\nEventEmitter能够将组件之间的依赖层层解耦，从而能够从容的应对需求的不断变化。\n## 什么情况下不应该使用EventEmitter？\n\n首先我们必须承认，在开源的React组件中，使用EventEmitter非常少见。\n为什么呢？我个人认为主要是以下几个原因：\n- 浏览器不像Node.js，没有原生的EventEmitter实现，需要引入额外的库来支持；\n- 开源组件一般功能和需求规划较为明确，变化相对较少，使用EventEmitter收益非常有限。\n\n所以我推荐在功能通用或逻辑相对简单的组件中不必使用EventEmitter，而在功能复杂需求变化频繁的业务组件中优先使用EventEmitter。\n","slug":"better-react-2","published":1,"updated":"2017-12-22T15:10:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbi2gsxa0000ov95lhi40mzt","content":"<p>之前重构项目后根据个人实战经验写了一篇<a href=\"http://zhuanlan.zhihu.com/reduixs/20554654\" target=\"_blank\" rel=\"noopener\">《Better React》</a>，总结在React中传递props应该注意的事项。<br>在后来与网友的讨论中发现行文总结不太严谨，于是乎再度发文，争取纠正其中某些纰漏之处，不至于误导他人。<br>如果你还没有阅读<a href=\"http://zhuanlan.zhihu.com/reduixs/20554654\" target=\"_blank\" rel=\"noopener\">《Better React》</a>，推荐阅读之后再来阅读本文。</p>\n<h2 id=\"缓存函数作为组件的prop传递不可取吗？\"><a href=\"#缓存函数作为组件的prop传递不可取吗？\" class=\"headerlink\" title=\"缓存函数作为组件的prop传递不可取吗？\"></a>缓存函数作为组件的prop传递不可取吗？</h2><p>之前的文章中不推荐缓存函数主要是因为下面这两个原因：</p>\n<ul>\n<li><em>类似的prop越多，外层缓存的函数越多，代码风格极其不自然</em></li>\n<li><em>如果函数依赖于局部变量，缓存的方式异常麻烦甚至于无法解决</em></li>\n</ul>\n<p>这里我们有必要再进行一些科普工作。 React组件可以接受函数作为prop，一般我们传递的时候有三种方式：</p>\n<ol>\n<li>在组件当前作用域定义局部变量</li>\n<li>在最外层的作用域定义全局变量</li>\n<li>作为组件自身的实例方法定义</li>\n</ol>\n<p>第一种方式写法最自然，但是危害最大，因为函数引用在父组件render的时候会一直变化。 第二种方式写法最蛋疼，函数引用不会变化，但是可以解决一些问题。<br>第三种方式则是前两种方法的一个比较完美结合。</p>\n<p>至此，第一个原因提及的问题通过第三种方式可以解决。至于代码风格问题，因人而异。<br>第二个原因提到的问题可能描述的不太详细，以致于会有人疑惑：</p>\n<ul>\n<li>为什么不把依赖的变量作为prop一同传入给子组件，这样反而更符合React的思想</li>\n</ul>\n<p>传还是不传，怎么做才是最佳实践？且往下看。</p>\n<h2 id=\"应该使用EventEmitter吗？\"><a href=\"#应该使用EventEmitter吗？\" class=\"headerlink\" title=\"应该使用EventEmitter吗？\"></a>应该使用EventEmitter吗？</h2><p>依赖是否需要作为props传递给子组件？这个我只能无奈地说要结合实际需求决定。<br>当我们不使用EventEmitter的时候，看看我们怎么处理下面三个比较复杂的场景：</p>\n<p><strong>_场景一</strong><em>\n</em>假设多个父组件引用了同一子组件，父组件的依赖又各不相同，这种方式需要将依赖全部加入到子组件的props里，必然引起子组件props爆炸。_<br><em>props爆炸带来的就是一堆无谓的propType约束定义以及执行时的非空判断，代码臭味非常明显。</em><br><em>倘若子组件未来再增加一些函数类型的props，这种方式简直就是灾难！</em><br>而EventEmitter只需要给子组件绑定所需的事件交给子组件自己在合适的时机触发就可以了。</p>\n<p><strong>_场景二</strong>_<br>少数情况我们要考虑事件解绑，而置空函数类型的props必然导致rerender。<br>当然你也可以通过设置开关变量来解决，但原本简单的逻辑变得更复杂了。<br>如果函数类型的props很多，开关变量的数目也不会少，徒增很多无意义的代码。<br>而EventEmitter只需要简单的解绑事件，也不会引起rerender。</p>\n<p><strong>_场景三</strong>_<br>在场景一的情况下，假设现在需要把子组件的事件处理结果同步到父组件的上级。<br>在我们重构代码的时候，这种方式需要修改所有的父组件的代码才能满足需求。<br>而EventEmitter只需要在最外层的组件给子组件绑定一个事件即可。</p>\n<p>更多的例子我就不一一列举了，相信真实世界的案例会更加多变和复杂。不过我们基本可以看出，场景越复杂EventEmitter的优势越明显。<br>EventEmitter能够将组件之间的依赖层层解耦，从而能够从容的应对需求的不断变化。</p>\n<h2 id=\"什么情况下不应该使用EventEmitter？\"><a href=\"#什么情况下不应该使用EventEmitter？\" class=\"headerlink\" title=\"什么情况下不应该使用EventEmitter？\"></a>什么情况下不应该使用EventEmitter？</h2><p>首先我们必须承认，在开源的React组件中，使用EventEmitter非常少见。<br>为什么呢？我个人认为主要是以下几个原因：</p>\n<ul>\n<li>浏览器不像Node.js，没有原生的EventEmitter实现，需要引入额外的库来支持；</li>\n<li>开源组件一般功能和需求规划较为明确，变化相对较少，使用EventEmitter收益非常有限。</li>\n</ul>\n<p>所以我推荐在功能通用或逻辑相对简单的组件中不必使用EventEmitter，而在功能复杂需求变化频繁的业务组件中优先使用EventEmitter。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前重构项目后根据个人实战经验写了一篇<a href=\"http://zhuanlan.zhihu.com/reduixs/20554654\" target=\"_blank\" rel=\"noopener\">《Better React》</a>，总结在React中传递props应该注意的事项。<br>在后来与网友的讨论中发现行文总结不太严谨，于是乎再度发文，争取纠正其中某些纰漏之处，不至于误导他人。<br>如果你还没有阅读<a href=\"http://zhuanlan.zhihu.com/reduixs/20554654\" target=\"_blank\" rel=\"noopener\">《Better React》</a>，推荐阅读之后再来阅读本文。</p>\n<h2 id=\"缓存函数作为组件的prop传递不可取吗？\"><a href=\"#缓存函数作为组件的prop传递不可取吗？\" class=\"headerlink\" title=\"缓存函数作为组件的prop传递不可取吗？\"></a>缓存函数作为组件的prop传递不可取吗？</h2><p>之前的文章中不推荐缓存函数主要是因为下面这两个原因：</p>\n<ul>\n<li><em>类似的prop越多，外层缓存的函数越多，代码风格极其不自然</em></li>\n<li><em>如果函数依赖于局部变量，缓存的方式异常麻烦甚至于无法解决</em></li>\n</ul>\n<p>这里我们有必要再进行一些科普工作。 React组件可以接受函数作为prop，一般我们传递的时候有三种方式：</p>\n<ol>\n<li>在组件当前作用域定义局部变量</li>\n<li>在最外层的作用域定义全局变量</li>\n<li>作为组件自身的实例方法定义</li>\n</ol>\n<p>第一种方式写法最自然，但是危害最大，因为函数引用在父组件render的时候会一直变化。 第二种方式写法最蛋疼，函数引用不会变化，但是可以解决一些问题。<br>第三种方式则是前两种方法的一个比较完美结合。</p>\n<p>至此，第一个原因提及的问题通过第三种方式可以解决。至于代码风格问题，因人而异。<br>第二个原因提到的问题可能描述的不太详细，以致于会有人疑惑：</p>\n<ul>\n<li>为什么不把依赖的变量作为prop一同传入给子组件，这样反而更符合React的思想</li>\n</ul>\n<p>传还是不传，怎么做才是最佳实践？且往下看。</p>\n<h2 id=\"应该使用EventEmitter吗？\"><a href=\"#应该使用EventEmitter吗？\" class=\"headerlink\" title=\"应该使用EventEmitter吗？\"></a>应该使用EventEmitter吗？</h2><p>依赖是否需要作为props传递给子组件？这个我只能无奈地说要结合实际需求决定。<br>当我们不使用EventEmitter的时候，看看我们怎么处理下面三个比较复杂的场景：</p>\n<p><strong>_场景一</strong><em>\n</em>假设多个父组件引用了同一子组件，父组件的依赖又各不相同，这种方式需要将依赖全部加入到子组件的props里，必然引起子组件props爆炸。_<br><em>props爆炸带来的就是一堆无谓的propType约束定义以及执行时的非空判断，代码臭味非常明显。</em><br><em>倘若子组件未来再增加一些函数类型的props，这种方式简直就是灾难！</em><br>而EventEmitter只需要给子组件绑定所需的事件交给子组件自己在合适的时机触发就可以了。</p>\n<p><strong>_场景二</strong>_<br>少数情况我们要考虑事件解绑，而置空函数类型的props必然导致rerender。<br>当然你也可以通过设置开关变量来解决，但原本简单的逻辑变得更复杂了。<br>如果函数类型的props很多，开关变量的数目也不会少，徒增很多无意义的代码。<br>而EventEmitter只需要简单的解绑事件，也不会引起rerender。</p>\n<p><strong>_场景三</strong>_<br>在场景一的情况下，假设现在需要把子组件的事件处理结果同步到父组件的上级。<br>在我们重构代码的时候，这种方式需要修改所有的父组件的代码才能满足需求。<br>而EventEmitter只需要在最外层的组件给子组件绑定一个事件即可。</p>\n<p>更多的例子我就不一一列举了，相信真实世界的案例会更加多变和复杂。不过我们基本可以看出，场景越复杂EventEmitter的优势越明显。<br>EventEmitter能够将组件之间的依赖层层解耦，从而能够从容的应对需求的不断变化。</p>\n<h2 id=\"什么情况下不应该使用EventEmitter？\"><a href=\"#什么情况下不应该使用EventEmitter？\" class=\"headerlink\" title=\"什么情况下不应该使用EventEmitter？\"></a>什么情况下不应该使用EventEmitter？</h2><p>首先我们必须承认，在开源的React组件中，使用EventEmitter非常少见。<br>为什么呢？我个人认为主要是以下几个原因：</p>\n<ul>\n<li>浏览器不像Node.js，没有原生的EventEmitter实现，需要引入额外的库来支持；</li>\n<li>开源组件一般功能和需求规划较为明确，变化相对较少，使用EventEmitter收益非常有限。</li>\n</ul>\n<p>所以我推荐在功能通用或逻辑相对简单的组件中不必使用EventEmitter，而在功能复杂需求变化频繁的业务组件中优先使用EventEmitter。</p>\n"},{"title":"Better React","date":"2016-02-03T16:00:00.000Z","_content":"\n# Better React\n\n使用Ractive（一个MVVM框架）编写组件的时候，我就经常想获取用户当前传入的attributes。\n很无奈，Ractive并不支持此功能。为此我还专门提过一个[issue](https://github.com/ractivejs/ractive/issues/2059)。\nReact开始流行的时候，作为MVVM的爱好者我其实是比较抵触的。\n后来发现势头不太对，感觉还是有必要了解下。\n于是就抱着试一试的心理，开始了React的学习历程。\n依稀记得当我首次接触props和state这对兄弟的时候，我的内心是十分激动的。\n\n随着React学习的愈发深入，就愈发觉得掌握props和state的使用，对于掌握React整个基础体系是有多么重要。\n今天本文就结合我自己的开发实践，讲讲使用props的一个基本原则。当然如果有更好的实践方法，烦请多交流。\n## 一个典型\n\n``` js\nlet Component = React.createClass({\n  render() {\n    let handleClick = () => {\n      console.log('click handled')\n    }\n    return (\n      <SubComponent onClick={handleClick} />\n    )\n  }\n})\n```\n\n通常来说，子组件依赖父组件的某些变量、状态，或者需要更新父组件的UI这种需求还是很普遍的。\n上例中父组件将一个handleClick函数作为prop传入给子组件，handleClick由于其作用域的天然优势可以将子组件的依赖问题层层化解，异常的简单方便。\n这种将函数作为props传入子组件解决依赖问题的处理方式，也是目前React父子组件通信处理中一种非常普遍且流行的方式。\n\n但是既然以此为例，那它肯定是反面典型了！\n## 思考\n\n下面我们以一个稍微复杂点的例子来看看这种处理方式的缺陷， [查看演示效果](http://codepen.io/simongfxu/pen/rxZBNz?editors=0010)。\n试试点击演示中的Add按钮，然后查看控制台输出。\n\n你会发现每点一次，底层的DumbCompoent的render都会触发一次。\n照理说DumbComponent没有任何的props的变更应该不会rerender，为什么呢？\n因为SmartComponent中传递prop的时候传递的是一个匿名函数，\nDumbComponent在shouldComponentUpdate判断的时候由于onClick的引用不同而返回true。\n\n如何修复呢？\n很自然的你可能会想到将onClick这个函数缓存起来，这样引用就不会一直变了。\n仔细思考一番其实这个方式并不可取，主要是因为：\n\n> - 类似的prop越多，外层缓存的函数越多，代码风格极其不自然\n> - 如果prop依赖于局部变量，缓存的方式异常麻烦甚至于无法解决\n## 解决方案\n\n避免将函数作为props传递，使用EventEmitter来对父子组件的依赖解耦。\n\n如果不了解EventEmitter，可以看看这篇[文章](http://www.html-js.com/article/1649)。\n浏览器端的实现我推荐[EventEmitter3](https://github.com/primus/eventemitter3)。\n## 总结\n\n为了避免不必要的麻烦，请不要将函数传入props中，取而代之使用EventEmitter。\n遵循此原则，props始终传递基本类型或者只包含基本类型的对象。\n在今后的React学习之路上，当你了解[ImmutableJS](https://github.com/camsong/blog/issues/3)时，这个原则将会让你深深受益。\n","source":"_posts/better-react.md","raw":"---\ntitle: Better React\ndate: 2016-02-04\ntags: React\n---\n\n# Better React\n\n使用Ractive（一个MVVM框架）编写组件的时候，我就经常想获取用户当前传入的attributes。\n很无奈，Ractive并不支持此功能。为此我还专门提过一个[issue](https://github.com/ractivejs/ractive/issues/2059)。\nReact开始流行的时候，作为MVVM的爱好者我其实是比较抵触的。\n后来发现势头不太对，感觉还是有必要了解下。\n于是就抱着试一试的心理，开始了React的学习历程。\n依稀记得当我首次接触props和state这对兄弟的时候，我的内心是十分激动的。\n\n随着React学习的愈发深入，就愈发觉得掌握props和state的使用，对于掌握React整个基础体系是有多么重要。\n今天本文就结合我自己的开发实践，讲讲使用props的一个基本原则。当然如果有更好的实践方法，烦请多交流。\n## 一个典型\n\n``` js\nlet Component = React.createClass({\n  render() {\n    let handleClick = () => {\n      console.log('click handled')\n    }\n    return (\n      <SubComponent onClick={handleClick} />\n    )\n  }\n})\n```\n\n通常来说，子组件依赖父组件的某些变量、状态，或者需要更新父组件的UI这种需求还是很普遍的。\n上例中父组件将一个handleClick函数作为prop传入给子组件，handleClick由于其作用域的天然优势可以将子组件的依赖问题层层化解，异常的简单方便。\n这种将函数作为props传入子组件解决依赖问题的处理方式，也是目前React父子组件通信处理中一种非常普遍且流行的方式。\n\n但是既然以此为例，那它肯定是反面典型了！\n## 思考\n\n下面我们以一个稍微复杂点的例子来看看这种处理方式的缺陷， [查看演示效果](http://codepen.io/simongfxu/pen/rxZBNz?editors=0010)。\n试试点击演示中的Add按钮，然后查看控制台输出。\n\n你会发现每点一次，底层的DumbCompoent的render都会触发一次。\n照理说DumbComponent没有任何的props的变更应该不会rerender，为什么呢？\n因为SmartComponent中传递prop的时候传递的是一个匿名函数，\nDumbComponent在shouldComponentUpdate判断的时候由于onClick的引用不同而返回true。\n\n如何修复呢？\n很自然的你可能会想到将onClick这个函数缓存起来，这样引用就不会一直变了。\n仔细思考一番其实这个方式并不可取，主要是因为：\n\n> - 类似的prop越多，外层缓存的函数越多，代码风格极其不自然\n> - 如果prop依赖于局部变量，缓存的方式异常麻烦甚至于无法解决\n## 解决方案\n\n避免将函数作为props传递，使用EventEmitter来对父子组件的依赖解耦。\n\n如果不了解EventEmitter，可以看看这篇[文章](http://www.html-js.com/article/1649)。\n浏览器端的实现我推荐[EventEmitter3](https://github.com/primus/eventemitter3)。\n## 总结\n\n为了避免不必要的麻烦，请不要将函数传入props中，取而代之使用EventEmitter。\n遵循此原则，props始终传递基本类型或者只包含基本类型的对象。\n在今后的React学习之路上，当你了解[ImmutableJS](https://github.com/camsong/blog/issues/3)时，这个原则将会让你深深受益。\n","slug":"better-react","published":1,"updated":"2017-12-22T15:07:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbi2gsxl0001ov958pbwxh8c","content":"<h1 id=\"Better-React\"><a href=\"#Better-React\" class=\"headerlink\" title=\"Better React\"></a>Better React</h1><p>使用Ractive（一个MVVM框架）编写组件的时候，我就经常想获取用户当前传入的attributes。<br>很无奈，Ractive并不支持此功能。为此我还专门提过一个<a href=\"https://github.com/ractivejs/ractive/issues/2059\" target=\"_blank\" rel=\"noopener\">issue</a>。<br>React开始流行的时候，作为MVVM的爱好者我其实是比较抵触的。<br>后来发现势头不太对，感觉还是有必要了解下。<br>于是就抱着试一试的心理，开始了React的学习历程。<br>依稀记得当我首次接触props和state这对兄弟的时候，我的内心是十分激动的。</p>\n<p>随着React学习的愈发深入，就愈发觉得掌握props和state的使用，对于掌握React整个基础体系是有多么重要。<br>今天本文就结合我自己的开发实践，讲讲使用props的一个基本原则。当然如果有更好的实践方法，烦请多交流。</p>\n<h2 id=\"一个典型\"><a href=\"#一个典型\" class=\"headerlink\" title=\"一个典型\"></a>一个典型</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> Component = React.createClass(&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'click handled'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;SubComponent onClick=&#123;handleClick&#125; /&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>通常来说，子组件依赖父组件的某些变量、状态，或者需要更新父组件的UI这种需求还是很普遍的。<br>上例中父组件将一个handleClick函数作为prop传入给子组件，handleClick由于其作用域的天然优势可以将子组件的依赖问题层层化解，异常的简单方便。<br>这种将函数作为props传入子组件解决依赖问题的处理方式，也是目前React父子组件通信处理中一种非常普遍且流行的方式。</p>\n<p>但是既然以此为例，那它肯定是反面典型了！</p>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>下面我们以一个稍微复杂点的例子来看看这种处理方式的缺陷， <a href=\"http://codepen.io/simongfxu/pen/rxZBNz?editors=0010\" target=\"_blank\" rel=\"noopener\">查看演示效果</a>。<br>试试点击演示中的Add按钮，然后查看控制台输出。</p>\n<p>你会发现每点一次，底层的DumbCompoent的render都会触发一次。<br>照理说DumbComponent没有任何的props的变更应该不会rerender，为什么呢？<br>因为SmartComponent中传递prop的时候传递的是一个匿名函数，<br>DumbComponent在shouldComponentUpdate判断的时候由于onClick的引用不同而返回true。</p>\n<p>如何修复呢？<br>很自然的你可能会想到将onClick这个函数缓存起来，这样引用就不会一直变了。<br>仔细思考一番其实这个方式并不可取，主要是因为：</p>\n<blockquote>\n<ul>\n<li>类似的prop越多，外层缓存的函数越多，代码风格极其不自然</li>\n<li>如果prop依赖于局部变量，缓存的方式异常麻烦甚至于无法解决<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2></li>\n</ul>\n</blockquote>\n<p>避免将函数作为props传递，使用EventEmitter来对父子组件的依赖解耦。</p>\n<p>如果不了解EventEmitter，可以看看这篇<a href=\"http://www.html-js.com/article/1649\" target=\"_blank\" rel=\"noopener\">文章</a>。<br>浏览器端的实现我推荐<a href=\"https://github.com/primus/eventemitter3\" target=\"_blank\" rel=\"noopener\">EventEmitter3</a>。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>为了避免不必要的麻烦，请不要将函数传入props中，取而代之使用EventEmitter。<br>遵循此原则，props始终传递基本类型或者只包含基本类型的对象。<br>在今后的React学习之路上，当你了解<a href=\"https://github.com/camsong/blog/issues/3\" target=\"_blank\" rel=\"noopener\">ImmutableJS</a>时，这个原则将会让你深深受益。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Better-React\"><a href=\"#Better-React\" class=\"headerlink\" title=\"Better React\"></a>Better React</h1><p>使用Ractive（一个MVVM框架）编写组件的时候，我就经常想获取用户当前传入的attributes。<br>很无奈，Ractive并不支持此功能。为此我还专门提过一个<a href=\"https://github.com/ractivejs/ractive/issues/2059\" target=\"_blank\" rel=\"noopener\">issue</a>。<br>React开始流行的时候，作为MVVM的爱好者我其实是比较抵触的。<br>后来发现势头不太对，感觉还是有必要了解下。<br>于是就抱着试一试的心理，开始了React的学习历程。<br>依稀记得当我首次接触props和state这对兄弟的时候，我的内心是十分激动的。</p>\n<p>随着React学习的愈发深入，就愈发觉得掌握props和state的使用，对于掌握React整个基础体系是有多么重要。<br>今天本文就结合我自己的开发实践，讲讲使用props的一个基本原则。当然如果有更好的实践方法，烦请多交流。</p>\n<h2 id=\"一个典型\"><a href=\"#一个典型\" class=\"headerlink\" title=\"一个典型\"></a>一个典型</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> Component = React.createClass(&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'click handled'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;SubComponent onClick=&#123;handleClick&#125; /&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>通常来说，子组件依赖父组件的某些变量、状态，或者需要更新父组件的UI这种需求还是很普遍的。<br>上例中父组件将一个handleClick函数作为prop传入给子组件，handleClick由于其作用域的天然优势可以将子组件的依赖问题层层化解，异常的简单方便。<br>这种将函数作为props传入子组件解决依赖问题的处理方式，也是目前React父子组件通信处理中一种非常普遍且流行的方式。</p>\n<p>但是既然以此为例，那它肯定是反面典型了！</p>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>下面我们以一个稍微复杂点的例子来看看这种处理方式的缺陷， <a href=\"http://codepen.io/simongfxu/pen/rxZBNz?editors=0010\" target=\"_blank\" rel=\"noopener\">查看演示效果</a>。<br>试试点击演示中的Add按钮，然后查看控制台输出。</p>\n<p>你会发现每点一次，底层的DumbCompoent的render都会触发一次。<br>照理说DumbComponent没有任何的props的变更应该不会rerender，为什么呢？<br>因为SmartComponent中传递prop的时候传递的是一个匿名函数，<br>DumbComponent在shouldComponentUpdate判断的时候由于onClick的引用不同而返回true。</p>\n<p>如何修复呢？<br>很自然的你可能会想到将onClick这个函数缓存起来，这样引用就不会一直变了。<br>仔细思考一番其实这个方式并不可取，主要是因为：</p>\n<blockquote>\n<ul>\n<li>类似的prop越多，外层缓存的函数越多，代码风格极其不自然</li>\n<li>如果prop依赖于局部变量，缓存的方式异常麻烦甚至于无法解决<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2></li>\n</ul>\n</blockquote>\n<p>避免将函数作为props传递，使用EventEmitter来对父子组件的依赖解耦。</p>\n<p>如果不了解EventEmitter，可以看看这篇<a href=\"http://www.html-js.com/article/1649\" target=\"_blank\" rel=\"noopener\">文章</a>。<br>浏览器端的实现我推荐<a href=\"https://github.com/primus/eventemitter3\" target=\"_blank\" rel=\"noopener\">EventEmitter3</a>。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>为了避免不必要的麻烦，请不要将函数传入props中，取而代之使用EventEmitter。<br>遵循此原则，props始终传递基本类型或者只包含基本类型的对象。<br>在今后的React学习之路上，当你了解<a href=\"https://github.com/camsong/blog/issues/3\" target=\"_blank\" rel=\"noopener\">ImmutableJS</a>时，这个原则将会让你深深受益。</p>\n"},{"title":"【读书笔记】持续集成（软件质量改进和风险降低之道）之一","date":"2015-12-09T16:00:00.000Z","_content":"\n# 持续集成（软件质量改进和风险降低之道）\n## 第一章 启程\n\n_每天吃一个苹果和实际去做是两码事。 by Kathy Sierra_\n\n**1.1 针对每次变更构建软件**\n\n_一次构建不止是一次编译。它可能包含编译、测试、代码审查和部署以及其它一些事情。一次构建是将源代码放在一起，并验证软件可以作为一个一致的单元运行的过程。_\n\nCI场景中的步骤通常是这样的：\n1. 开发者提交代码到版本控制库，CI服务器轮询检查代码变更；\n2. CI服务器取出最新的源代码执行构建脚本，对软件进行集成；\n3. CI服务器向指定的成员发出电子邮件，提供构建结果的反馈信息；\n4. CI服务器继续轮询检查代码变更。\n\n通过一次构建，开发团队可以回答以下问题：\n- 软件组成部分是否能协同工作？\n- 代码复杂度如何？\n- 是否坚持了制定的编码标准？\n- 自动测试覆盖了多少代码？\n- 是否成功的通过了所有测试？\n- 应用程序是否满足性能要求？\n- 最近的开发是否存在问题\n\n你之所以希望“持续”地构建，就是为了得到快速的反馈。这样能在开发生命周期找到并修正问题。\n\n**1.2 CI的特征**\n\nCI需要具备的特征\n- 与版本控制库连接\n- 构建脚本\n- 某种类型的反馈机制（通常是邮件）\n- 集成源代码变更的过程（CI服务器）\n\nCI的子过程：\n- 源代码编译\n- 数据库集成\n- 测试 _（没有自动化的、持续的测试的CI不能算是CI）_\n- 审查 _（自动化代码审查通过强制遵守规则来增加软件品质）_\n- 部署 _（任何时候都可以拿出能工作、可部署的软件）_\n- 文档与反馈\n\n一个好的CI系统的关键特征就是“速度”。CI系统的本质是及时向开发者和项目风险承担着提供反馈信息。\n## 第二章 引入持续集成\n\n_假定是所有麻烦之母_\n- 假定一个方法会得到正确的调用参数\n- 假定开发者会坚持编码标准\n- 假定配置文件不会被覆盖或者修改\n\n持续集成在每次版本控制系统发生变化时就执行构建，这有助于减少项目中的假定。\nCI是一些基本实践。它不是软件开发中最炫目的工作，不会有用户说“哇，我真的喜欢你们上一个版本的集成方式”。它是软件开发的幕后工作，只有使用过CI的人才能体会到一致的、可重复的构建过程所带来的好处。\n\n检查软件的品质就是检查最新的集成构建，就这么简单！\n\n**2.1 CI生活中的一天**\n\n无\n\n**2.2 CI的价值是什么**\n- 减少风险\n- 减少重复过程\n- 在任何时间地点生成可部署的软件\n- 增强项目的可见性\n- 对开发团队的软件建立起更强大的产品信心\n\n减少风险\n- 缺陷的检测和修复变得更快\n- 软件的健康程度可以测量\n- 减少假定\n\n增强项目的可见性\n- 对当前构建状态和品质指标提供及时的信息\n- 观察到一些项目相关的趋势\n\n建立更强大的产品信心\n- 如果没有频繁的集成，团队成员会感到压抑，因为他不知道代码的修改所造成的影响。比如罚款！\n\n**2.3 什么阻碍了团队使用CI**\n- 增加了维护CI系统的开销（项目太复杂、额外工作太多）\n- 变化太大（增量实现，从日构建开始）\n- 失败的构建太多\n- 额外的硬件/软件成本\n\n**2.4 如何进行持续集成**\n- 确定：确定需要自动化的过程（编译、审查、测试、部署、数据库集成）\n- 构建：创建构建脚本\n- 分享：利用版本控制库让其它人用起来\n- 持续：在变更之后执行自动化的过程\n\n**2.5 项目应该再何时以何种方式实现CI**\n- 越早越好，越晚越拒绝改变。\n- CI最终希望是在每次代码库变更时就执行构建，但是也可以从每日构建开始。\n- 早起可以不加入某些功能，比如自动化的回归测试\n\n**2.6 集成的演进**\n\n它不是突然冒出来的软件开发方法，是集成软件演进的成功。\n\n**2.7 如何与其它开发实践配合**\n- 单元测试\n- 编码标准\n- 重构\n- 小发行版本\n- 共同拥有代码，避免知识孤岛\n\n**2.8 CI需要多少时间架设**\n\n**2.9 CI与您**\n\n七项最佳实践：\n- 经常提交代码（每天至少一次）\n- 不要提交无法构建的代码（不能编译、无法通过测试、代码审查失败）\n- 立即修复无法构建的代码（优先级最高）\n- 编写自动化的单元测试\n- 必须通过所有测试和审查（不是90%或者99%，而是100%）\n- 执行私有构建（先在本地构建成功）\n- 避免签出无法构建的代码（等待新的变更或者帮助修复无法集成的构建）\n","source":"_posts/ci-1.md","raw":"---\ntitle: 【读书笔记】持续集成（软件质量改进和风险降低之道）之一\ndate: 2015-12-10\ntags: 持续集成\n---\n\n# 持续集成（软件质量改进和风险降低之道）\n## 第一章 启程\n\n_每天吃一个苹果和实际去做是两码事。 by Kathy Sierra_\n\n**1.1 针对每次变更构建软件**\n\n_一次构建不止是一次编译。它可能包含编译、测试、代码审查和部署以及其它一些事情。一次构建是将源代码放在一起，并验证软件可以作为一个一致的单元运行的过程。_\n\nCI场景中的步骤通常是这样的：\n1. 开发者提交代码到版本控制库，CI服务器轮询检查代码变更；\n2. CI服务器取出最新的源代码执行构建脚本，对软件进行集成；\n3. CI服务器向指定的成员发出电子邮件，提供构建结果的反馈信息；\n4. CI服务器继续轮询检查代码变更。\n\n通过一次构建，开发团队可以回答以下问题：\n- 软件组成部分是否能协同工作？\n- 代码复杂度如何？\n- 是否坚持了制定的编码标准？\n- 自动测试覆盖了多少代码？\n- 是否成功的通过了所有测试？\n- 应用程序是否满足性能要求？\n- 最近的开发是否存在问题\n\n你之所以希望“持续”地构建，就是为了得到快速的反馈。这样能在开发生命周期找到并修正问题。\n\n**1.2 CI的特征**\n\nCI需要具备的特征\n- 与版本控制库连接\n- 构建脚本\n- 某种类型的反馈机制（通常是邮件）\n- 集成源代码变更的过程（CI服务器）\n\nCI的子过程：\n- 源代码编译\n- 数据库集成\n- 测试 _（没有自动化的、持续的测试的CI不能算是CI）_\n- 审查 _（自动化代码审查通过强制遵守规则来增加软件品质）_\n- 部署 _（任何时候都可以拿出能工作、可部署的软件）_\n- 文档与反馈\n\n一个好的CI系统的关键特征就是“速度”。CI系统的本质是及时向开发者和项目风险承担着提供反馈信息。\n## 第二章 引入持续集成\n\n_假定是所有麻烦之母_\n- 假定一个方法会得到正确的调用参数\n- 假定开发者会坚持编码标准\n- 假定配置文件不会被覆盖或者修改\n\n持续集成在每次版本控制系统发生变化时就执行构建，这有助于减少项目中的假定。\nCI是一些基本实践。它不是软件开发中最炫目的工作，不会有用户说“哇，我真的喜欢你们上一个版本的集成方式”。它是软件开发的幕后工作，只有使用过CI的人才能体会到一致的、可重复的构建过程所带来的好处。\n\n检查软件的品质就是检查最新的集成构建，就这么简单！\n\n**2.1 CI生活中的一天**\n\n无\n\n**2.2 CI的价值是什么**\n- 减少风险\n- 减少重复过程\n- 在任何时间地点生成可部署的软件\n- 增强项目的可见性\n- 对开发团队的软件建立起更强大的产品信心\n\n减少风险\n- 缺陷的检测和修复变得更快\n- 软件的健康程度可以测量\n- 减少假定\n\n增强项目的可见性\n- 对当前构建状态和品质指标提供及时的信息\n- 观察到一些项目相关的趋势\n\n建立更强大的产品信心\n- 如果没有频繁的集成，团队成员会感到压抑，因为他不知道代码的修改所造成的影响。比如罚款！\n\n**2.3 什么阻碍了团队使用CI**\n- 增加了维护CI系统的开销（项目太复杂、额外工作太多）\n- 变化太大（增量实现，从日构建开始）\n- 失败的构建太多\n- 额外的硬件/软件成本\n\n**2.4 如何进行持续集成**\n- 确定：确定需要自动化的过程（编译、审查、测试、部署、数据库集成）\n- 构建：创建构建脚本\n- 分享：利用版本控制库让其它人用起来\n- 持续：在变更之后执行自动化的过程\n\n**2.5 项目应该再何时以何种方式实现CI**\n- 越早越好，越晚越拒绝改变。\n- CI最终希望是在每次代码库变更时就执行构建，但是也可以从每日构建开始。\n- 早起可以不加入某些功能，比如自动化的回归测试\n\n**2.6 集成的演进**\n\n它不是突然冒出来的软件开发方法，是集成软件演进的成功。\n\n**2.7 如何与其它开发实践配合**\n- 单元测试\n- 编码标准\n- 重构\n- 小发行版本\n- 共同拥有代码，避免知识孤岛\n\n**2.8 CI需要多少时间架设**\n\n**2.9 CI与您**\n\n七项最佳实践：\n- 经常提交代码（每天至少一次）\n- 不要提交无法构建的代码（不能编译、无法通过测试、代码审查失败）\n- 立即修复无法构建的代码（优先级最高）\n- 编写自动化的单元测试\n- 必须通过所有测试和审查（不是90%或者99%，而是100%）\n- 执行私有构建（先在本地构建成功）\n- 避免签出无法构建的代码（等待新的变更或者帮助修复无法集成的构建）\n","slug":"ci-1","published":1,"updated":"2017-12-22T15:04:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbi2gsxw0003ov95gkwsyd89","content":"<h1 id=\"持续集成（软件质量改进和风险降低之道）\"><a href=\"#持续集成（软件质量改进和风险降低之道）\" class=\"headerlink\" title=\"持续集成（软件质量改进和风险降低之道）\"></a>持续集成（软件质量改进和风险降低之道）</h1><h2 id=\"第一章-启程\"><a href=\"#第一章-启程\" class=\"headerlink\" title=\"第一章 启程\"></a>第一章 启程</h2><p><em>每天吃一个苹果和实际去做是两码事。 by Kathy Sierra</em></p>\n<p><strong>1.1 针对每次变更构建软件</strong></p>\n<p><em>一次构建不止是一次编译。它可能包含编译、测试、代码审查和部署以及其它一些事情。一次构建是将源代码放在一起，并验证软件可以作为一个一致的单元运行的过程。</em></p>\n<p>CI场景中的步骤通常是这样的：</p>\n<ol>\n<li>开发者提交代码到版本控制库，CI服务器轮询检查代码变更；</li>\n<li>CI服务器取出最新的源代码执行构建脚本，对软件进行集成；</li>\n<li>CI服务器向指定的成员发出电子邮件，提供构建结果的反馈信息；</li>\n<li>CI服务器继续轮询检查代码变更。</li>\n</ol>\n<p>通过一次构建，开发团队可以回答以下问题：</p>\n<ul>\n<li>软件组成部分是否能协同工作？</li>\n<li>代码复杂度如何？</li>\n<li>是否坚持了制定的编码标准？</li>\n<li>自动测试覆盖了多少代码？</li>\n<li>是否成功的通过了所有测试？</li>\n<li>应用程序是否满足性能要求？</li>\n<li>最近的开发是否存在问题</li>\n</ul>\n<p>你之所以希望“持续”地构建，就是为了得到快速的反馈。这样能在开发生命周期找到并修正问题。</p>\n<p><strong>1.2 CI的特征</strong></p>\n<p>CI需要具备的特征</p>\n<ul>\n<li>与版本控制库连接</li>\n<li>构建脚本</li>\n<li>某种类型的反馈机制（通常是邮件）</li>\n<li>集成源代码变更的过程（CI服务器）</li>\n</ul>\n<p>CI的子过程：</p>\n<ul>\n<li>源代码编译</li>\n<li>数据库集成</li>\n<li>测试 <em>（没有自动化的、持续的测试的CI不能算是CI）</em></li>\n<li>审查 <em>（自动化代码审查通过强制遵守规则来增加软件品质）</em></li>\n<li>部署 <em>（任何时候都可以拿出能工作、可部署的软件）</em></li>\n<li>文档与反馈</li>\n</ul>\n<p>一个好的CI系统的关键特征就是“速度”。CI系统的本质是及时向开发者和项目风险承担着提供反馈信息。</p>\n<h2 id=\"第二章-引入持续集成\"><a href=\"#第二章-引入持续集成\" class=\"headerlink\" title=\"第二章 引入持续集成\"></a>第二章 引入持续集成</h2><p><em>假定是所有麻烦之母</em></p>\n<ul>\n<li>假定一个方法会得到正确的调用参数</li>\n<li>假定开发者会坚持编码标准</li>\n<li>假定配置文件不会被覆盖或者修改</li>\n</ul>\n<p>持续集成在每次版本控制系统发生变化时就执行构建，这有助于减少项目中的假定。<br>CI是一些基本实践。它不是软件开发中最炫目的工作，不会有用户说“哇，我真的喜欢你们上一个版本的集成方式”。它是软件开发的幕后工作，只有使用过CI的人才能体会到一致的、可重复的构建过程所带来的好处。</p>\n<p>检查软件的品质就是检查最新的集成构建，就这么简单！</p>\n<p><strong>2.1 CI生活中的一天</strong></p>\n<p>无</p>\n<p><strong>2.2 CI的价值是什么</strong></p>\n<ul>\n<li>减少风险</li>\n<li>减少重复过程</li>\n<li>在任何时间地点生成可部署的软件</li>\n<li>增强项目的可见性</li>\n<li>对开发团队的软件建立起更强大的产品信心</li>\n</ul>\n<p>减少风险</p>\n<ul>\n<li>缺陷的检测和修复变得更快</li>\n<li>软件的健康程度可以测量</li>\n<li>减少假定</li>\n</ul>\n<p>增强项目的可见性</p>\n<ul>\n<li>对当前构建状态和品质指标提供及时的信息</li>\n<li>观察到一些项目相关的趋势</li>\n</ul>\n<p>建立更强大的产品信心</p>\n<ul>\n<li>如果没有频繁的集成，团队成员会感到压抑，因为他不知道代码的修改所造成的影响。比如罚款！</li>\n</ul>\n<p><strong>2.3 什么阻碍了团队使用CI</strong></p>\n<ul>\n<li>增加了维护CI系统的开销（项目太复杂、额外工作太多）</li>\n<li>变化太大（增量实现，从日构建开始）</li>\n<li>失败的构建太多</li>\n<li>额外的硬件/软件成本</li>\n</ul>\n<p><strong>2.4 如何进行持续集成</strong></p>\n<ul>\n<li>确定：确定需要自动化的过程（编译、审查、测试、部署、数据库集成）</li>\n<li>构建：创建构建脚本</li>\n<li>分享：利用版本控制库让其它人用起来</li>\n<li>持续：在变更之后执行自动化的过程</li>\n</ul>\n<p><strong>2.5 项目应该再何时以何种方式实现CI</strong></p>\n<ul>\n<li>越早越好，越晚越拒绝改变。</li>\n<li>CI最终希望是在每次代码库变更时就执行构建，但是也可以从每日构建开始。</li>\n<li>早起可以不加入某些功能，比如自动化的回归测试</li>\n</ul>\n<p><strong>2.6 集成的演进</strong></p>\n<p>它不是突然冒出来的软件开发方法，是集成软件演进的成功。</p>\n<p><strong>2.7 如何与其它开发实践配合</strong></p>\n<ul>\n<li>单元测试</li>\n<li>编码标准</li>\n<li>重构</li>\n<li>小发行版本</li>\n<li>共同拥有代码，避免知识孤岛</li>\n</ul>\n<p><strong>2.8 CI需要多少时间架设</strong></p>\n<p><strong>2.9 CI与您</strong></p>\n<p>七项最佳实践：</p>\n<ul>\n<li>经常提交代码（每天至少一次）</li>\n<li>不要提交无法构建的代码（不能编译、无法通过测试、代码审查失败）</li>\n<li>立即修复无法构建的代码（优先级最高）</li>\n<li>编写自动化的单元测试</li>\n<li>必须通过所有测试和审查（不是90%或者99%，而是100%）</li>\n<li>执行私有构建（先在本地构建成功）</li>\n<li>避免签出无法构建的代码（等待新的变更或者帮助修复无法集成的构建）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"持续集成（软件质量改进和风险降低之道）\"><a href=\"#持续集成（软件质量改进和风险降低之道）\" class=\"headerlink\" title=\"持续集成（软件质量改进和风险降低之道）\"></a>持续集成（软件质量改进和风险降低之道）</h1><h2 id=\"第一章-启程\"><a href=\"#第一章-启程\" class=\"headerlink\" title=\"第一章 启程\"></a>第一章 启程</h2><p><em>每天吃一个苹果和实际去做是两码事。 by Kathy Sierra</em></p>\n<p><strong>1.1 针对每次变更构建软件</strong></p>\n<p><em>一次构建不止是一次编译。它可能包含编译、测试、代码审查和部署以及其它一些事情。一次构建是将源代码放在一起，并验证软件可以作为一个一致的单元运行的过程。</em></p>\n<p>CI场景中的步骤通常是这样的：</p>\n<ol>\n<li>开发者提交代码到版本控制库，CI服务器轮询检查代码变更；</li>\n<li>CI服务器取出最新的源代码执行构建脚本，对软件进行集成；</li>\n<li>CI服务器向指定的成员发出电子邮件，提供构建结果的反馈信息；</li>\n<li>CI服务器继续轮询检查代码变更。</li>\n</ol>\n<p>通过一次构建，开发团队可以回答以下问题：</p>\n<ul>\n<li>软件组成部分是否能协同工作？</li>\n<li>代码复杂度如何？</li>\n<li>是否坚持了制定的编码标准？</li>\n<li>自动测试覆盖了多少代码？</li>\n<li>是否成功的通过了所有测试？</li>\n<li>应用程序是否满足性能要求？</li>\n<li>最近的开发是否存在问题</li>\n</ul>\n<p>你之所以希望“持续”地构建，就是为了得到快速的反馈。这样能在开发生命周期找到并修正问题。</p>\n<p><strong>1.2 CI的特征</strong></p>\n<p>CI需要具备的特征</p>\n<ul>\n<li>与版本控制库连接</li>\n<li>构建脚本</li>\n<li>某种类型的反馈机制（通常是邮件）</li>\n<li>集成源代码变更的过程（CI服务器）</li>\n</ul>\n<p>CI的子过程：</p>\n<ul>\n<li>源代码编译</li>\n<li>数据库集成</li>\n<li>测试 <em>（没有自动化的、持续的测试的CI不能算是CI）</em></li>\n<li>审查 <em>（自动化代码审查通过强制遵守规则来增加软件品质）</em></li>\n<li>部署 <em>（任何时候都可以拿出能工作、可部署的软件）</em></li>\n<li>文档与反馈</li>\n</ul>\n<p>一个好的CI系统的关键特征就是“速度”。CI系统的本质是及时向开发者和项目风险承担着提供反馈信息。</p>\n<h2 id=\"第二章-引入持续集成\"><a href=\"#第二章-引入持续集成\" class=\"headerlink\" title=\"第二章 引入持续集成\"></a>第二章 引入持续集成</h2><p><em>假定是所有麻烦之母</em></p>\n<ul>\n<li>假定一个方法会得到正确的调用参数</li>\n<li>假定开发者会坚持编码标准</li>\n<li>假定配置文件不会被覆盖或者修改</li>\n</ul>\n<p>持续集成在每次版本控制系统发生变化时就执行构建，这有助于减少项目中的假定。<br>CI是一些基本实践。它不是软件开发中最炫目的工作，不会有用户说“哇，我真的喜欢你们上一个版本的集成方式”。它是软件开发的幕后工作，只有使用过CI的人才能体会到一致的、可重复的构建过程所带来的好处。</p>\n<p>检查软件的品质就是检查最新的集成构建，就这么简单！</p>\n<p><strong>2.1 CI生活中的一天</strong></p>\n<p>无</p>\n<p><strong>2.2 CI的价值是什么</strong></p>\n<ul>\n<li>减少风险</li>\n<li>减少重复过程</li>\n<li>在任何时间地点生成可部署的软件</li>\n<li>增强项目的可见性</li>\n<li>对开发团队的软件建立起更强大的产品信心</li>\n</ul>\n<p>减少风险</p>\n<ul>\n<li>缺陷的检测和修复变得更快</li>\n<li>软件的健康程度可以测量</li>\n<li>减少假定</li>\n</ul>\n<p>增强项目的可见性</p>\n<ul>\n<li>对当前构建状态和品质指标提供及时的信息</li>\n<li>观察到一些项目相关的趋势</li>\n</ul>\n<p>建立更强大的产品信心</p>\n<ul>\n<li>如果没有频繁的集成，团队成员会感到压抑，因为他不知道代码的修改所造成的影响。比如罚款！</li>\n</ul>\n<p><strong>2.3 什么阻碍了团队使用CI</strong></p>\n<ul>\n<li>增加了维护CI系统的开销（项目太复杂、额外工作太多）</li>\n<li>变化太大（增量实现，从日构建开始）</li>\n<li>失败的构建太多</li>\n<li>额外的硬件/软件成本</li>\n</ul>\n<p><strong>2.4 如何进行持续集成</strong></p>\n<ul>\n<li>确定：确定需要自动化的过程（编译、审查、测试、部署、数据库集成）</li>\n<li>构建：创建构建脚本</li>\n<li>分享：利用版本控制库让其它人用起来</li>\n<li>持续：在变更之后执行自动化的过程</li>\n</ul>\n<p><strong>2.5 项目应该再何时以何种方式实现CI</strong></p>\n<ul>\n<li>越早越好，越晚越拒绝改变。</li>\n<li>CI最终希望是在每次代码库变更时就执行构建，但是也可以从每日构建开始。</li>\n<li>早起可以不加入某些功能，比如自动化的回归测试</li>\n</ul>\n<p><strong>2.6 集成的演进</strong></p>\n<p>它不是突然冒出来的软件开发方法，是集成软件演进的成功。</p>\n<p><strong>2.7 如何与其它开发实践配合</strong></p>\n<ul>\n<li>单元测试</li>\n<li>编码标准</li>\n<li>重构</li>\n<li>小发行版本</li>\n<li>共同拥有代码，避免知识孤岛</li>\n</ul>\n<p><strong>2.8 CI需要多少时间架设</strong></p>\n<p><strong>2.9 CI与您</strong></p>\n<p>七项最佳实践：</p>\n<ul>\n<li>经常提交代码（每天至少一次）</li>\n<li>不要提交无法构建的代码（不能编译、无法通过测试、代码审查失败）</li>\n<li>立即修复无法构建的代码（优先级最高）</li>\n<li>编写自动化的单元测试</li>\n<li>必须通过所有测试和审查（不是90%或者99%，而是100%）</li>\n<li>执行私有构建（先在本地构建成功）</li>\n<li>避免签出无法构建的代码（等待新的变更或者帮助修复无法集成的构建）</li>\n</ul>\n"},{"title":"【读书笔记】持续集成（软件质量改进和风险降低之道）之二","date":"2015-12-16T16:00:00.000Z","_content":"\n# 持续集成（软件质量改进和风险降低之道）\n## 第三章 利用CI减少风险\n\n_品质意味着在没人看的时候也把事情做对。 by 亨利 福特_\n- 我们的任务进度怎么样了？请查看最后一次构建\n- 测试覆盖率达到多少？请查看最后一次构建\n- 谁最后签入了代码？请查看最后一次构建\n\n利用CI，对每次变更建立一张“品质安全网”，更快地交付软件产品。当你在每次变更时按下“集成按钮”时，你就为尽早发现风险、经常发现风险奠定了基础。\n\n**3.1 风险：没有可部署的软件**\n\n场景：“在我的机器上是可行的”\n解决方案：消除IDE与构建过程的耦合，使用自动化构建脚本\n\n场景：与数据库同步（害怕修改或重构数据库和源代码、很难用不同的测试数据填充数据库、很难维护开发和测试环境）\n解决方案：将数据库相关融入到开发过程中，对数据库进行审查和测试\n\n**3.2 风险：很晚才发现缺陷**\n\n场景：对错误的修复导致了其它无关的错误浮现出来。我们对变更没有信心，因为我们不知道变更对其它部分的影响。\n解决方案：为变更的代码编写单元测试。\n\n**3.3 风险：缺少项目可见性**\n\n场景：没有工具显示整个项目的总体设计情况，没有类和关系的模型。\n解决方案：使用自动化文档生成工具。\n\n**3.4 风险：低品质的软件**\n\n场景：坚持编码标准\n场景：维持架构标准\n场景：重复的代码\n解决方案：使用相关的开发工具:Checkstyle / PMD / jDepend / Simian\n## 第四章 针对每次变更构建软件\n\n_整个该死的宇宙必须被分解为一小块一小块，然后重新构造。 by 亨利 米勒_\n\n有时候开发者就像鞋匠，为他的所有客户提供了鞋子，却忘记为他自己的孩子做鞋。\n\n**4.1 自动化构建**\n\n 要记住，构建应该是按一下按钮的事。\n\n**4.2 执行单命令构建**\n\n构建脚本的逻辑过程：\n1. 清理\n2. 编译\n3. 集成数据库\n4. 测试\n5. 审查\n6. 部署\n\n**4.3 将构建脚本从IDE分离**\n\n无\n\n**4.4 集中放置软件资产**\n\n使用版本库来存放所有文件。\n\n**4.5 创建一致的目录结构**\n\n基于软件开发过程中的活动创建一致的、有逻辑的目录结构。\n构建过程中只需取出包含这个任务所需的源码和相关脚本，而不是所有的东西。\n\n**4.6 让构建快速失败**\n\n越有可能失败的的任务，应该越早在构建脚本中执行。\n\n**4.7 针对所有环境构建**\n\n改进构建脚本的可配置项，将构建脚本参数化。\n\n**4.8 构建的类型和触发机制**\n\n三个层次：个人、团队、客户。分别对应私有构建、集成构建、发布构建。\n触发机制：手工、定期执行、轮询变更、事件驱动。\n\n**4.9 使用专门的集成构建计算机**\n\n无\n\n**4.10 使用CI服务器**\n\n典型的CI服务器包含如下功能：\n- 以特定的时间间隔轮询版本库变更\n- 定期执行某种操作\n- 标识出安静期，在这段时间内部进行集成构建\n- 支持不同的构建脚本\n- 向相关人员发送电子邮件\n- 显示构建历史\n- 信息面板查看集成构建的信息\n- 为不同的项目支持多个版本控制系统\n\n**4.11 执行手工集成构建**\n\n使用手工集成构建不能保证坚持持续集成的实践。不利于提高品质的、更小、更频繁的集成。\n\n**4.12 执行快速构建**\n\n保持构建不超过10分钟；收集、分析构建测量数据；改进测试性能。\n\n**4.13 分阶段构建**\n\n减少构建时间的一种方式。先执行轻量级构建并对软件进行单元测试，然后执行重量级构建。\n\n**4.14 这对您如何生效**\n\n_我的项目有七十亿行代码，怎么可能用这种方式？_\n\n大项目主要考虑让构建保持迅速，定期执行而不是持续执行。将代码分解为独立的子项目。\n\n_我们的软件太复杂了。我们 必须手工做一些事 或 “我们一切进行的的很好”_\n\n这正是创建CI系统的理由，因为你可能在执行重复过程上花了很多时间。如果软件复杂，有很多依赖，那么持续集成就更有必要，需要创建一个系统将所有的部件组装在一起，执行测试和审查，确保所有部分运行正常。\n当然，这并不是说创建一个可重复的构建过程会很容易。将过程分解，而不是一次加入所有CI包含的东西。\n\n还有一点：CI是针对主线执行，分支必须在适当的时候合并到主线。\n","source":"_posts/ci-2.md","raw":"---\ntitle: 【读书笔记】持续集成（软件质量改进和风险降低之道）之二\ndate: 2015-12-17\ntags: 持续集成\n---\n\n# 持续集成（软件质量改进和风险降低之道）\n## 第三章 利用CI减少风险\n\n_品质意味着在没人看的时候也把事情做对。 by 亨利 福特_\n- 我们的任务进度怎么样了？请查看最后一次构建\n- 测试覆盖率达到多少？请查看最后一次构建\n- 谁最后签入了代码？请查看最后一次构建\n\n利用CI，对每次变更建立一张“品质安全网”，更快地交付软件产品。当你在每次变更时按下“集成按钮”时，你就为尽早发现风险、经常发现风险奠定了基础。\n\n**3.1 风险：没有可部署的软件**\n\n场景：“在我的机器上是可行的”\n解决方案：消除IDE与构建过程的耦合，使用自动化构建脚本\n\n场景：与数据库同步（害怕修改或重构数据库和源代码、很难用不同的测试数据填充数据库、很难维护开发和测试环境）\n解决方案：将数据库相关融入到开发过程中，对数据库进行审查和测试\n\n**3.2 风险：很晚才发现缺陷**\n\n场景：对错误的修复导致了其它无关的错误浮现出来。我们对变更没有信心，因为我们不知道变更对其它部分的影响。\n解决方案：为变更的代码编写单元测试。\n\n**3.3 风险：缺少项目可见性**\n\n场景：没有工具显示整个项目的总体设计情况，没有类和关系的模型。\n解决方案：使用自动化文档生成工具。\n\n**3.4 风险：低品质的软件**\n\n场景：坚持编码标准\n场景：维持架构标准\n场景：重复的代码\n解决方案：使用相关的开发工具:Checkstyle / PMD / jDepend / Simian\n## 第四章 针对每次变更构建软件\n\n_整个该死的宇宙必须被分解为一小块一小块，然后重新构造。 by 亨利 米勒_\n\n有时候开发者就像鞋匠，为他的所有客户提供了鞋子，却忘记为他自己的孩子做鞋。\n\n**4.1 自动化构建**\n\n 要记住，构建应该是按一下按钮的事。\n\n**4.2 执行单命令构建**\n\n构建脚本的逻辑过程：\n1. 清理\n2. 编译\n3. 集成数据库\n4. 测试\n5. 审查\n6. 部署\n\n**4.3 将构建脚本从IDE分离**\n\n无\n\n**4.4 集中放置软件资产**\n\n使用版本库来存放所有文件。\n\n**4.5 创建一致的目录结构**\n\n基于软件开发过程中的活动创建一致的、有逻辑的目录结构。\n构建过程中只需取出包含这个任务所需的源码和相关脚本，而不是所有的东西。\n\n**4.6 让构建快速失败**\n\n越有可能失败的的任务，应该越早在构建脚本中执行。\n\n**4.7 针对所有环境构建**\n\n改进构建脚本的可配置项，将构建脚本参数化。\n\n**4.8 构建的类型和触发机制**\n\n三个层次：个人、团队、客户。分别对应私有构建、集成构建、发布构建。\n触发机制：手工、定期执行、轮询变更、事件驱动。\n\n**4.9 使用专门的集成构建计算机**\n\n无\n\n**4.10 使用CI服务器**\n\n典型的CI服务器包含如下功能：\n- 以特定的时间间隔轮询版本库变更\n- 定期执行某种操作\n- 标识出安静期，在这段时间内部进行集成构建\n- 支持不同的构建脚本\n- 向相关人员发送电子邮件\n- 显示构建历史\n- 信息面板查看集成构建的信息\n- 为不同的项目支持多个版本控制系统\n\n**4.11 执行手工集成构建**\n\n使用手工集成构建不能保证坚持持续集成的实践。不利于提高品质的、更小、更频繁的集成。\n\n**4.12 执行快速构建**\n\n保持构建不超过10分钟；收集、分析构建测量数据；改进测试性能。\n\n**4.13 分阶段构建**\n\n减少构建时间的一种方式。先执行轻量级构建并对软件进行单元测试，然后执行重量级构建。\n\n**4.14 这对您如何生效**\n\n_我的项目有七十亿行代码，怎么可能用这种方式？_\n\n大项目主要考虑让构建保持迅速，定期执行而不是持续执行。将代码分解为独立的子项目。\n\n_我们的软件太复杂了。我们 必须手工做一些事 或 “我们一切进行的的很好”_\n\n这正是创建CI系统的理由，因为你可能在执行重复过程上花了很多时间。如果软件复杂，有很多依赖，那么持续集成就更有必要，需要创建一个系统将所有的部件组装在一起，执行测试和审查，确保所有部分运行正常。\n当然，这并不是说创建一个可重复的构建过程会很容易。将过程分解，而不是一次加入所有CI包含的东西。\n\n还有一点：CI是针对主线执行，分支必须在适当的时候合并到主线。\n","slug":"ci-2","published":1,"updated":"2017-12-22T15:05:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbi2gsxy0004ov95drujokrw","content":"<h1 id=\"持续集成（软件质量改进和风险降低之道）\"><a href=\"#持续集成（软件质量改进和风险降低之道）\" class=\"headerlink\" title=\"持续集成（软件质量改进和风险降低之道）\"></a>持续集成（软件质量改进和风险降低之道）</h1><h2 id=\"第三章-利用CI减少风险\"><a href=\"#第三章-利用CI减少风险\" class=\"headerlink\" title=\"第三章 利用CI减少风险\"></a>第三章 利用CI减少风险</h2><p><em>品质意味着在没人看的时候也把事情做对。 by 亨利 福特</em></p>\n<ul>\n<li>我们的任务进度怎么样了？请查看最后一次构建</li>\n<li>测试覆盖率达到多少？请查看最后一次构建</li>\n<li>谁最后签入了代码？请查看最后一次构建</li>\n</ul>\n<p>利用CI，对每次变更建立一张“品质安全网”，更快地交付软件产品。当你在每次变更时按下“集成按钮”时，你就为尽早发现风险、经常发现风险奠定了基础。</p>\n<p><strong>3.1 风险：没有可部署的软件</strong></p>\n<p>场景：“在我的机器上是可行的”<br>解决方案：消除IDE与构建过程的耦合，使用自动化构建脚本</p>\n<p>场景：与数据库同步（害怕修改或重构数据库和源代码、很难用不同的测试数据填充数据库、很难维护开发和测试环境）<br>解决方案：将数据库相关融入到开发过程中，对数据库进行审查和测试</p>\n<p><strong>3.2 风险：很晚才发现缺陷</strong></p>\n<p>场景：对错误的修复导致了其它无关的错误浮现出来。我们对变更没有信心，因为我们不知道变更对其它部分的影响。<br>解决方案：为变更的代码编写单元测试。</p>\n<p><strong>3.3 风险：缺少项目可见性</strong></p>\n<p>场景：没有工具显示整个项目的总体设计情况，没有类和关系的模型。<br>解决方案：使用自动化文档生成工具。</p>\n<p><strong>3.4 风险：低品质的软件</strong></p>\n<p>场景：坚持编码标准<br>场景：维持架构标准<br>场景：重复的代码<br>解决方案：使用相关的开发工具:Checkstyle / PMD / jDepend / Simian</p>\n<h2 id=\"第四章-针对每次变更构建软件\"><a href=\"#第四章-针对每次变更构建软件\" class=\"headerlink\" title=\"第四章 针对每次变更构建软件\"></a>第四章 针对每次变更构建软件</h2><p><em>整个该死的宇宙必须被分解为一小块一小块，然后重新构造。 by 亨利 米勒</em></p>\n<p>有时候开发者就像鞋匠，为他的所有客户提供了鞋子，却忘记为他自己的孩子做鞋。</p>\n<p><strong>4.1 自动化构建</strong></p>\n<p> 要记住，构建应该是按一下按钮的事。</p>\n<p><strong>4.2 执行单命令构建</strong></p>\n<p>构建脚本的逻辑过程：</p>\n<ol>\n<li>清理</li>\n<li>编译</li>\n<li>集成数据库</li>\n<li>测试</li>\n<li>审查</li>\n<li>部署</li>\n</ol>\n<p><strong>4.3 将构建脚本从IDE分离</strong></p>\n<p>无</p>\n<p><strong>4.4 集中放置软件资产</strong></p>\n<p>使用版本库来存放所有文件。</p>\n<p><strong>4.5 创建一致的目录结构</strong></p>\n<p>基于软件开发过程中的活动创建一致的、有逻辑的目录结构。<br>构建过程中只需取出包含这个任务所需的源码和相关脚本，而不是所有的东西。</p>\n<p><strong>4.6 让构建快速失败</strong></p>\n<p>越有可能失败的的任务，应该越早在构建脚本中执行。</p>\n<p><strong>4.7 针对所有环境构建</strong></p>\n<p>改进构建脚本的可配置项，将构建脚本参数化。</p>\n<p><strong>4.8 构建的类型和触发机制</strong></p>\n<p>三个层次：个人、团队、客户。分别对应私有构建、集成构建、发布构建。<br>触发机制：手工、定期执行、轮询变更、事件驱动。</p>\n<p><strong>4.9 使用专门的集成构建计算机</strong></p>\n<p>无</p>\n<p><strong>4.10 使用CI服务器</strong></p>\n<p>典型的CI服务器包含如下功能：</p>\n<ul>\n<li>以特定的时间间隔轮询版本库变更</li>\n<li>定期执行某种操作</li>\n<li>标识出安静期，在这段时间内部进行集成构建</li>\n<li>支持不同的构建脚本</li>\n<li>向相关人员发送电子邮件</li>\n<li>显示构建历史</li>\n<li>信息面板查看集成构建的信息</li>\n<li>为不同的项目支持多个版本控制系统</li>\n</ul>\n<p><strong>4.11 执行手工集成构建</strong></p>\n<p>使用手工集成构建不能保证坚持持续集成的实践。不利于提高品质的、更小、更频繁的集成。</p>\n<p><strong>4.12 执行快速构建</strong></p>\n<p>保持构建不超过10分钟；收集、分析构建测量数据；改进测试性能。</p>\n<p><strong>4.13 分阶段构建</strong></p>\n<p>减少构建时间的一种方式。先执行轻量级构建并对软件进行单元测试，然后执行重量级构建。</p>\n<p><strong>4.14 这对您如何生效</strong></p>\n<p><em>我的项目有七十亿行代码，怎么可能用这种方式？</em></p>\n<p>大项目主要考虑让构建保持迅速，定期执行而不是持续执行。将代码分解为独立的子项目。</p>\n<p><em>我们的软件太复杂了。我们 必须手工做一些事 或 “我们一切进行的的很好”</em></p>\n<p>这正是创建CI系统的理由，因为你可能在执行重复过程上花了很多时间。如果软件复杂，有很多依赖，那么持续集成就更有必要，需要创建一个系统将所有的部件组装在一起，执行测试和审查，确保所有部分运行正常。<br>当然，这并不是说创建一个可重复的构建过程会很容易。将过程分解，而不是一次加入所有CI包含的东西。</p>\n<p>还有一点：CI是针对主线执行，分支必须在适当的时候合并到主线。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"持续集成（软件质量改进和风险降低之道）\"><a href=\"#持续集成（软件质量改进和风险降低之道）\" class=\"headerlink\" title=\"持续集成（软件质量改进和风险降低之道）\"></a>持续集成（软件质量改进和风险降低之道）</h1><h2 id=\"第三章-利用CI减少风险\"><a href=\"#第三章-利用CI减少风险\" class=\"headerlink\" title=\"第三章 利用CI减少风险\"></a>第三章 利用CI减少风险</h2><p><em>品质意味着在没人看的时候也把事情做对。 by 亨利 福特</em></p>\n<ul>\n<li>我们的任务进度怎么样了？请查看最后一次构建</li>\n<li>测试覆盖率达到多少？请查看最后一次构建</li>\n<li>谁最后签入了代码？请查看最后一次构建</li>\n</ul>\n<p>利用CI，对每次变更建立一张“品质安全网”，更快地交付软件产品。当你在每次变更时按下“集成按钮”时，你就为尽早发现风险、经常发现风险奠定了基础。</p>\n<p><strong>3.1 风险：没有可部署的软件</strong></p>\n<p>场景：“在我的机器上是可行的”<br>解决方案：消除IDE与构建过程的耦合，使用自动化构建脚本</p>\n<p>场景：与数据库同步（害怕修改或重构数据库和源代码、很难用不同的测试数据填充数据库、很难维护开发和测试环境）<br>解决方案：将数据库相关融入到开发过程中，对数据库进行审查和测试</p>\n<p><strong>3.2 风险：很晚才发现缺陷</strong></p>\n<p>场景：对错误的修复导致了其它无关的错误浮现出来。我们对变更没有信心，因为我们不知道变更对其它部分的影响。<br>解决方案：为变更的代码编写单元测试。</p>\n<p><strong>3.3 风险：缺少项目可见性</strong></p>\n<p>场景：没有工具显示整个项目的总体设计情况，没有类和关系的模型。<br>解决方案：使用自动化文档生成工具。</p>\n<p><strong>3.4 风险：低品质的软件</strong></p>\n<p>场景：坚持编码标准<br>场景：维持架构标准<br>场景：重复的代码<br>解决方案：使用相关的开发工具:Checkstyle / PMD / jDepend / Simian</p>\n<h2 id=\"第四章-针对每次变更构建软件\"><a href=\"#第四章-针对每次变更构建软件\" class=\"headerlink\" title=\"第四章 针对每次变更构建软件\"></a>第四章 针对每次变更构建软件</h2><p><em>整个该死的宇宙必须被分解为一小块一小块，然后重新构造。 by 亨利 米勒</em></p>\n<p>有时候开发者就像鞋匠，为他的所有客户提供了鞋子，却忘记为他自己的孩子做鞋。</p>\n<p><strong>4.1 自动化构建</strong></p>\n<p> 要记住，构建应该是按一下按钮的事。</p>\n<p><strong>4.2 执行单命令构建</strong></p>\n<p>构建脚本的逻辑过程：</p>\n<ol>\n<li>清理</li>\n<li>编译</li>\n<li>集成数据库</li>\n<li>测试</li>\n<li>审查</li>\n<li>部署</li>\n</ol>\n<p><strong>4.3 将构建脚本从IDE分离</strong></p>\n<p>无</p>\n<p><strong>4.4 集中放置软件资产</strong></p>\n<p>使用版本库来存放所有文件。</p>\n<p><strong>4.5 创建一致的目录结构</strong></p>\n<p>基于软件开发过程中的活动创建一致的、有逻辑的目录结构。<br>构建过程中只需取出包含这个任务所需的源码和相关脚本，而不是所有的东西。</p>\n<p><strong>4.6 让构建快速失败</strong></p>\n<p>越有可能失败的的任务，应该越早在构建脚本中执行。</p>\n<p><strong>4.7 针对所有环境构建</strong></p>\n<p>改进构建脚本的可配置项，将构建脚本参数化。</p>\n<p><strong>4.8 构建的类型和触发机制</strong></p>\n<p>三个层次：个人、团队、客户。分别对应私有构建、集成构建、发布构建。<br>触发机制：手工、定期执行、轮询变更、事件驱动。</p>\n<p><strong>4.9 使用专门的集成构建计算机</strong></p>\n<p>无</p>\n<p><strong>4.10 使用CI服务器</strong></p>\n<p>典型的CI服务器包含如下功能：</p>\n<ul>\n<li>以特定的时间间隔轮询版本库变更</li>\n<li>定期执行某种操作</li>\n<li>标识出安静期，在这段时间内部进行集成构建</li>\n<li>支持不同的构建脚本</li>\n<li>向相关人员发送电子邮件</li>\n<li>显示构建历史</li>\n<li>信息面板查看集成构建的信息</li>\n<li>为不同的项目支持多个版本控制系统</li>\n</ul>\n<p><strong>4.11 执行手工集成构建</strong></p>\n<p>使用手工集成构建不能保证坚持持续集成的实践。不利于提高品质的、更小、更频繁的集成。</p>\n<p><strong>4.12 执行快速构建</strong></p>\n<p>保持构建不超过10分钟；收集、分析构建测量数据；改进测试性能。</p>\n<p><strong>4.13 分阶段构建</strong></p>\n<p>减少构建时间的一种方式。先执行轻量级构建并对软件进行单元测试，然后执行重量级构建。</p>\n<p><strong>4.14 这对您如何生效</strong></p>\n<p><em>我的项目有七十亿行代码，怎么可能用这种方式？</em></p>\n<p>大项目主要考虑让构建保持迅速，定期执行而不是持续执行。将代码分解为独立的子项目。</p>\n<p><em>我们的软件太复杂了。我们 必须手工做一些事 或 “我们一切进行的的很好”</em></p>\n<p>这正是创建CI系统的理由，因为你可能在执行重复过程上花了很多时间。如果软件复杂，有很多依赖，那么持续集成就更有必要，需要创建一个系统将所有的部件组装在一起，执行测试和审查，确保所有部分运行正常。<br>当然，这并不是说创建一个可重复的构建过程会很容易。将过程分解，而不是一次加入所有CI包含的东西。</p>\n<p>还有一点：CI是针对主线执行，分支必须在适当的时候合并到主线。</p>\n"},{"title":"代码管理","date":"2016-06-25T16:00:00.000Z","_content":"\n> 本文基本总结了我在DataEye前端项目代码管理方面的一些尝试。分享PPT在 [slides.com](http://slides.com/reduxis/deck-1/fullscreen) 可能需要翻墙。\n## Virtuality & Reality\n\n> 借助于当下流行的VR，代码管理也从两个方面来讲解：虚（文件内容相关的管理）/实（文件的物理存储相关的管理）\n## Version Control\n\n> Git与SVN：Git是分布式版本管理，SVN是中心化。\n\n无需中心服务器，本地自用\n\n> git init\n## Multiple Projects\n\n> 实际工作中开发人员每天都要与多个项目打交道，如何在多项目中开发中提高工作效率值得思考与学习\n>\n> 20,0000,0000\n## All in one\n\n> 和Windows的基础代码很像，Google的20亿行代码是用来驱动整个Google服务的，他们是一个整体！\n\n[谷歌代码库已超过 20 亿行代码，他们是如何管理的？](http://blog.jobbole.com/91648/)\n## All in two indeed\n\n> 将业务代码(static)和可复用的代码(DataEye/dejs)分离\n## Static\n\n> 所有的前端业务代码\n## DataEye/dejs\n\n> 所有复用的组件代码，基于npm进行包管理\n## npm\n\n> node package manager  → package manager for javascript\n>\n> 30,1298\n## Branches\n\n> 分支管理已经成为日常工作的一部分（迭代新特性开发/临时BUG修复等）\n## Under Control\n\n> 分支管理不是复制粘贴，需要微观宏观同时把控。\n>\n> 提交/文件/修改历史都需要记录在案\n## SVN\n\n> 你打算签出十个分支的所有代码吗？\n## Workflow\n\n> 工作流管理将版本库分为稳定分支和临时分支\n## Stable Branches\n\n> master用于管理已发布的线上代码，development用于日常开发\n## Temporary Branches\n\n> feature / bug / release\n\n临时分支需要在适当的时机合并到所有稳定分支。\n## Code Review\n\n> 发现BUG，提高代码质量，促进知识共享，提升团队技术水平\n## Continuous Integration\n\n> 提高软件质量，降低项目风险\n## Unit Test\n\n> 隔离程序最小单元对其进行正确性测试，避免意外惊喜\n\n单元测试能够反哺程序自身的架构和设计。\n## Coverage\n\n> 没有明显错误的代码 vs 明显没有错误的代码\n\n难以想象一行完全没有运行过的代码发布到生产环境会造成什么后果。\n## Advice on Commits\n\n> 尽快提交/尽早提交/经常提交\n## Advice on Coding\n\n> Be social and better\n- GitHub\n- npm\n- Upsource\n- codecov\n- Semaphoreci\n\n---\n\n本文使用软件 [violet](https://github.com/simongfxu/violet)一键发布到知乎/简书/Medium/GitHub等多个平台。\n","source":"_posts/code-management.md","raw":"---\ntitle: 代码管理\ndate: 2016-06-26\ntags: 代码管理\n---\n\n> 本文基本总结了我在DataEye前端项目代码管理方面的一些尝试。分享PPT在 [slides.com](http://slides.com/reduxis/deck-1/fullscreen) 可能需要翻墙。\n## Virtuality & Reality\n\n> 借助于当下流行的VR，代码管理也从两个方面来讲解：虚（文件内容相关的管理）/实（文件的物理存储相关的管理）\n## Version Control\n\n> Git与SVN：Git是分布式版本管理，SVN是中心化。\n\n无需中心服务器，本地自用\n\n> git init\n## Multiple Projects\n\n> 实际工作中开发人员每天都要与多个项目打交道，如何在多项目中开发中提高工作效率值得思考与学习\n>\n> 20,0000,0000\n## All in one\n\n> 和Windows的基础代码很像，Google的20亿行代码是用来驱动整个Google服务的，他们是一个整体！\n\n[谷歌代码库已超过 20 亿行代码，他们是如何管理的？](http://blog.jobbole.com/91648/)\n## All in two indeed\n\n> 将业务代码(static)和可复用的代码(DataEye/dejs)分离\n## Static\n\n> 所有的前端业务代码\n## DataEye/dejs\n\n> 所有复用的组件代码，基于npm进行包管理\n## npm\n\n> node package manager  → package manager for javascript\n>\n> 30,1298\n## Branches\n\n> 分支管理已经成为日常工作的一部分（迭代新特性开发/临时BUG修复等）\n## Under Control\n\n> 分支管理不是复制粘贴，需要微观宏观同时把控。\n>\n> 提交/文件/修改历史都需要记录在案\n## SVN\n\n> 你打算签出十个分支的所有代码吗？\n## Workflow\n\n> 工作流管理将版本库分为稳定分支和临时分支\n## Stable Branches\n\n> master用于管理已发布的线上代码，development用于日常开发\n## Temporary Branches\n\n> feature / bug / release\n\n临时分支需要在适当的时机合并到所有稳定分支。\n## Code Review\n\n> 发现BUG，提高代码质量，促进知识共享，提升团队技术水平\n## Continuous Integration\n\n> 提高软件质量，降低项目风险\n## Unit Test\n\n> 隔离程序最小单元对其进行正确性测试，避免意外惊喜\n\n单元测试能够反哺程序自身的架构和设计。\n## Coverage\n\n> 没有明显错误的代码 vs 明显没有错误的代码\n\n难以想象一行完全没有运行过的代码发布到生产环境会造成什么后果。\n## Advice on Commits\n\n> 尽快提交/尽早提交/经常提交\n## Advice on Coding\n\n> Be social and better\n- GitHub\n- npm\n- Upsource\n- codecov\n- Semaphoreci\n\n---\n\n本文使用软件 [violet](https://github.com/simongfxu/violet)一键发布到知乎/简书/Medium/GitHub等多个平台。\n","slug":"code-management","published":1,"updated":"2017-12-22T15:23:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbi2gsxz0005ov95j5xu2how","content":"<blockquote>\n<p>本文基本总结了我在DataEye前端项目代码管理方面的一些尝试。分享PPT在 <a href=\"http://slides.com/reduxis/deck-1/fullscreen\" target=\"_blank\" rel=\"noopener\">slides.com</a> 可能需要翻墙。</p>\n<h2 id=\"Virtuality-amp-Reality\"><a href=\"#Virtuality-amp-Reality\" class=\"headerlink\" title=\"Virtuality &amp; Reality\"></a>Virtuality &amp; Reality</h2><p>借助于当下流行的VR，代码管理也从两个方面来讲解：虚（文件内容相关的管理）/实（文件的物理存储相关的管理）</p>\n<h2 id=\"Version-Control\"><a href=\"#Version-Control\" class=\"headerlink\" title=\"Version Control\"></a>Version Control</h2><p>Git与SVN：Git是分布式版本管理，SVN是中心化。</p>\n</blockquote>\n<p>无需中心服务器，本地自用</p>\n<blockquote>\n<p>git init</p>\n<h2 id=\"Multiple-Projects\"><a href=\"#Multiple-Projects\" class=\"headerlink\" title=\"Multiple Projects\"></a>Multiple Projects</h2><p>实际工作中开发人员每天都要与多个项目打交道，如何在多项目中开发中提高工作效率值得思考与学习</p>\n<p>20,0000,0000</p>\n<h2 id=\"All-in-one\"><a href=\"#All-in-one\" class=\"headerlink\" title=\"All in one\"></a>All in one</h2><p>和Windows的基础代码很像，Google的20亿行代码是用来驱动整个Google服务的，他们是一个整体！</p>\n</blockquote>\n<p><a href=\"http://blog.jobbole.com/91648/\" target=\"_blank\" rel=\"noopener\">谷歌代码库已超过 20 亿行代码，他们是如何管理的？</a></p>\n<h2 id=\"All-in-two-indeed\"><a href=\"#All-in-two-indeed\" class=\"headerlink\" title=\"All in two indeed\"></a>All in two indeed</h2><blockquote>\n<p>将业务代码(static)和可复用的代码(DataEye/dejs)分离</p>\n<h2 id=\"Static\"><a href=\"#Static\" class=\"headerlink\" title=\"Static\"></a>Static</h2><p>所有的前端业务代码</p>\n<h2 id=\"DataEye-dejs\"><a href=\"#DataEye-dejs\" class=\"headerlink\" title=\"DataEye/dejs\"></a>DataEye/dejs</h2><p>所有复用的组件代码，基于npm进行包管理</p>\n<h2 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h2><p>node package manager  → package manager for javascript</p>\n<p>30,1298</p>\n<h2 id=\"Branches\"><a href=\"#Branches\" class=\"headerlink\" title=\"Branches\"></a>Branches</h2><p>分支管理已经成为日常工作的一部分（迭代新特性开发/临时BUG修复等）</p>\n<h2 id=\"Under-Control\"><a href=\"#Under-Control\" class=\"headerlink\" title=\"Under Control\"></a>Under Control</h2><p>分支管理不是复制粘贴，需要微观宏观同时把控。</p>\n<p>提交/文件/修改历史都需要记录在案</p>\n<h2 id=\"SVN\"><a href=\"#SVN\" class=\"headerlink\" title=\"SVN\"></a>SVN</h2><p>你打算签出十个分支的所有代码吗？</p>\n<h2 id=\"Workflow\"><a href=\"#Workflow\" class=\"headerlink\" title=\"Workflow\"></a>Workflow</h2><p>工作流管理将版本库分为稳定分支和临时分支</p>\n<h2 id=\"Stable-Branches\"><a href=\"#Stable-Branches\" class=\"headerlink\" title=\"Stable Branches\"></a>Stable Branches</h2><p>master用于管理已发布的线上代码，development用于日常开发</p>\n<h2 id=\"Temporary-Branches\"><a href=\"#Temporary-Branches\" class=\"headerlink\" title=\"Temporary Branches\"></a>Temporary Branches</h2><p>feature / bug / release</p>\n</blockquote>\n<p>临时分支需要在适当的时机合并到所有稳定分支。</p>\n<h2 id=\"Code-Review\"><a href=\"#Code-Review\" class=\"headerlink\" title=\"Code Review\"></a>Code Review</h2><blockquote>\n<p>发现BUG，提高代码质量，促进知识共享，提升团队技术水平</p>\n<h2 id=\"Continuous-Integration\"><a href=\"#Continuous-Integration\" class=\"headerlink\" title=\"Continuous Integration\"></a>Continuous Integration</h2><p>提高软件质量，降低项目风险</p>\n<h2 id=\"Unit-Test\"><a href=\"#Unit-Test\" class=\"headerlink\" title=\"Unit Test\"></a>Unit Test</h2><p>隔离程序最小单元对其进行正确性测试，避免意外惊喜</p>\n</blockquote>\n<p>单元测试能够反哺程序自身的架构和设计。</p>\n<h2 id=\"Coverage\"><a href=\"#Coverage\" class=\"headerlink\" title=\"Coverage\"></a>Coverage</h2><blockquote>\n<p>没有明显错误的代码 vs 明显没有错误的代码</p>\n</blockquote>\n<p>难以想象一行完全没有运行过的代码发布到生产环境会造成什么后果。</p>\n<h2 id=\"Advice-on-Commits\"><a href=\"#Advice-on-Commits\" class=\"headerlink\" title=\"Advice on Commits\"></a>Advice on Commits</h2><blockquote>\n<p>尽快提交/尽早提交/经常提交</p>\n<h2 id=\"Advice-on-Coding\"><a href=\"#Advice-on-Coding\" class=\"headerlink\" title=\"Advice on Coding\"></a>Advice on Coding</h2><p>Be social and better</p>\n<ul>\n<li>GitHub</li>\n<li>npm</li>\n<li>Upsource</li>\n<li>codecov</li>\n<li>Semaphoreci</li>\n</ul>\n</blockquote>\n<hr>\n<p>本文使用软件 <a href=\"https://github.com/simongfxu/violet\" target=\"_blank\" rel=\"noopener\">violet</a>一键发布到知乎/简书/Medium/GitHub等多个平台。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文基本总结了我在DataEye前端项目代码管理方面的一些尝试。分享PPT在 <a href=\"http://slides.com/reduxis/deck-1/fullscreen\" target=\"_blank\" rel=\"noopener\">slides.com</a> 可能需要翻墙。</p>\n<h2 id=\"Virtuality-amp-Reality\"><a href=\"#Virtuality-amp-Reality\" class=\"headerlink\" title=\"Virtuality &amp; Reality\"></a>Virtuality &amp; Reality</h2><p>借助于当下流行的VR，代码管理也从两个方面来讲解：虚（文件内容相关的管理）/实（文件的物理存储相关的管理）</p>\n<h2 id=\"Version-Control\"><a href=\"#Version-Control\" class=\"headerlink\" title=\"Version Control\"></a>Version Control</h2><p>Git与SVN：Git是分布式版本管理，SVN是中心化。</p>\n</blockquote>\n<p>无需中心服务器，本地自用</p>\n<blockquote>\n<p>git init</p>\n<h2 id=\"Multiple-Projects\"><a href=\"#Multiple-Projects\" class=\"headerlink\" title=\"Multiple Projects\"></a>Multiple Projects</h2><p>实际工作中开发人员每天都要与多个项目打交道，如何在多项目中开发中提高工作效率值得思考与学习</p>\n<p>20,0000,0000</p>\n<h2 id=\"All-in-one\"><a href=\"#All-in-one\" class=\"headerlink\" title=\"All in one\"></a>All in one</h2><p>和Windows的基础代码很像，Google的20亿行代码是用来驱动整个Google服务的，他们是一个整体！</p>\n</blockquote>\n<p><a href=\"http://blog.jobbole.com/91648/\" target=\"_blank\" rel=\"noopener\">谷歌代码库已超过 20 亿行代码，他们是如何管理的？</a></p>\n<h2 id=\"All-in-two-indeed\"><a href=\"#All-in-two-indeed\" class=\"headerlink\" title=\"All in two indeed\"></a>All in two indeed</h2><blockquote>\n<p>将业务代码(static)和可复用的代码(DataEye/dejs)分离</p>\n<h2 id=\"Static\"><a href=\"#Static\" class=\"headerlink\" title=\"Static\"></a>Static</h2><p>所有的前端业务代码</p>\n<h2 id=\"DataEye-dejs\"><a href=\"#DataEye-dejs\" class=\"headerlink\" title=\"DataEye/dejs\"></a>DataEye/dejs</h2><p>所有复用的组件代码，基于npm进行包管理</p>\n<h2 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h2><p>node package manager  → package manager for javascript</p>\n<p>30,1298</p>\n<h2 id=\"Branches\"><a href=\"#Branches\" class=\"headerlink\" title=\"Branches\"></a>Branches</h2><p>分支管理已经成为日常工作的一部分（迭代新特性开发/临时BUG修复等）</p>\n<h2 id=\"Under-Control\"><a href=\"#Under-Control\" class=\"headerlink\" title=\"Under Control\"></a>Under Control</h2><p>分支管理不是复制粘贴，需要微观宏观同时把控。</p>\n<p>提交/文件/修改历史都需要记录在案</p>\n<h2 id=\"SVN\"><a href=\"#SVN\" class=\"headerlink\" title=\"SVN\"></a>SVN</h2><p>你打算签出十个分支的所有代码吗？</p>\n<h2 id=\"Workflow\"><a href=\"#Workflow\" class=\"headerlink\" title=\"Workflow\"></a>Workflow</h2><p>工作流管理将版本库分为稳定分支和临时分支</p>\n<h2 id=\"Stable-Branches\"><a href=\"#Stable-Branches\" class=\"headerlink\" title=\"Stable Branches\"></a>Stable Branches</h2><p>master用于管理已发布的线上代码，development用于日常开发</p>\n<h2 id=\"Temporary-Branches\"><a href=\"#Temporary-Branches\" class=\"headerlink\" title=\"Temporary Branches\"></a>Temporary Branches</h2><p>feature / bug / release</p>\n</blockquote>\n<p>临时分支需要在适当的时机合并到所有稳定分支。</p>\n<h2 id=\"Code-Review\"><a href=\"#Code-Review\" class=\"headerlink\" title=\"Code Review\"></a>Code Review</h2><blockquote>\n<p>发现BUG，提高代码质量，促进知识共享，提升团队技术水平</p>\n<h2 id=\"Continuous-Integration\"><a href=\"#Continuous-Integration\" class=\"headerlink\" title=\"Continuous Integration\"></a>Continuous Integration</h2><p>提高软件质量，降低项目风险</p>\n<h2 id=\"Unit-Test\"><a href=\"#Unit-Test\" class=\"headerlink\" title=\"Unit Test\"></a>Unit Test</h2><p>隔离程序最小单元对其进行正确性测试，避免意外惊喜</p>\n</blockquote>\n<p>单元测试能够反哺程序自身的架构和设计。</p>\n<h2 id=\"Coverage\"><a href=\"#Coverage\" class=\"headerlink\" title=\"Coverage\"></a>Coverage</h2><blockquote>\n<p>没有明显错误的代码 vs 明显没有错误的代码</p>\n</blockquote>\n<p>难以想象一行完全没有运行过的代码发布到生产环境会造成什么后果。</p>\n<h2 id=\"Advice-on-Commits\"><a href=\"#Advice-on-Commits\" class=\"headerlink\" title=\"Advice on Commits\"></a>Advice on Commits</h2><blockquote>\n<p>尽快提交/尽早提交/经常提交</p>\n<h2 id=\"Advice-on-Coding\"><a href=\"#Advice-on-Coding\" class=\"headerlink\" title=\"Advice on Coding\"></a>Advice on Coding</h2><p>Be social and better</p>\n<ul>\n<li>GitHub</li>\n<li>npm</li>\n<li>Upsource</li>\n<li>codecov</li>\n<li>Semaphoreci</li>\n</ul>\n</blockquote>\n<hr>\n<p>本文使用软件 <a href=\"https://github.com/simongfxu/violet\" target=\"_blank\" rel=\"noopener\">violet</a>一键发布到知乎/简书/Medium/GitHub等多个平台。</p>\n"},{"title":"捉虫记之decodeURIComponent","date":"2015-06-29T16:00:00.000Z","_content":"\nDataEye游戏分析平台有个实时日志功能，用于展示接收来自游戏客户端SDK上报数据以及游戏开发商使用HTTP接口发送的数据。\n## 第一版\n\n数据库收到什么样的JSON数据就直接返回给前端展示，终于有一天客户反馈页面脚本报错。\n\n一番调查，原来是数据库中存在特殊字符，于是要求后台全部url encode一次，前端decode就可以了。验证OK，于是测试发布。直到有一天用户反馈部分数据没有decode，还是类似%25XX的字符。\n## 第二版\n\n一番调查，原来是用户使用的是HTTP接口发送数据而不是SDK，所以部分数据自己encode了一次。然后服务器返回给前端页面的就是encode两次的数据。\n\n不就encode两次的问题嘛，页面decode两次就可以了嘛！于是无脑地吧decodeURIComponent(str)全部替换成了decodeURIComponent(decodeURIComponent(str))，发现问题居然解决了，找了另外的客户数据测试了下，验证也OK，于是发布。直到有一天某个另外的客户反馈页面脚本报错。\n## 第三版\n\n一番调查，根据URI Malformed Error这个罪证google得知，原来是源字符串不是合法的URL编码的字符串。虽然提示已经相当的明确了，但由于JSON数据量不少，字段较多，而且有些地方只需要decode一次，有些地方又需要decode两次，定位问题还是花了一些时间。最后发现罪魁祸首居然是用户输入的内容`14%`。\n## 解决方法\n\n``` javascript\nfunction safeDecodeURIComponent(str) {\n    if (!str || typeof str !== 'string') return String(str)\n\n    // encodeURIComponent不编码字符有71个：!， '，(，)，*，-，.，_，~，0-9，a-z，A-Z\n    var twiceEncodedReg = /^(%\\w{4,4}|[!'()*\\-._~0-9a-z])+$/gi\n    var encodedReg = /^(%\\w{2,2}|[!'()*\\-._~0-9a-z])+$/gi\n\n    // 这里用try catch是因为即使正则匹配也有可能解码异常，异常或者不匹配时返回源字符串即可\n    try {\n        if (twiceEncodedReg.test(str)) return decodeURIComponent(decodeURIComponent(str))\n        if (encodedReg.test(str)) return decodeURIComponent(str)\n    } catch(e) {\n    }\n\n    return str\n}\n```\n## 相关链接\n\n> - [Comparing escape(), encodeURI(), and encodeURIComponent()](http://xkr.us/articles/javascript/encode-compare/)\n> - [http://www.cnblogs.com/jhxk/articles/1634359.html](http://www.cnblogs.com/jhxk/articles/1634359.html)\n## 最后的总结\n\n基础知识不扎实导致无法深入剖析问题所在，解决方案自以为然也就不足为怪了。\n\n----7-21更新----\n## 后续\n\n果然还是有后续！昨天突然一个客户又反馈有乱码，一番研究发现用户输入部分编码，部分未编码。上面的方法就不凑效了，于是花了几分钟做了如下改进：\n\n``` js\nfunction safeDecodeURIComponent(str) {\n    var lastResult = str, current\n    try {\n        while((current = decodeURIComponent(lastResult)) != lastResult) {\n            lastResult = current\n        }\n    } catch(e) {}\n\n    return lastResult\n}\n```\n","source":"_posts/decodeURIComponent.md","raw":"---\ntitle: 捉虫记之decodeURIComponent\ndate: 2015-06-30\ntags: JavaScript\n---\n\nDataEye游戏分析平台有个实时日志功能，用于展示接收来自游戏客户端SDK上报数据以及游戏开发商使用HTTP接口发送的数据。\n## 第一版\n\n数据库收到什么样的JSON数据就直接返回给前端展示，终于有一天客户反馈页面脚本报错。\n\n一番调查，原来是数据库中存在特殊字符，于是要求后台全部url encode一次，前端decode就可以了。验证OK，于是测试发布。直到有一天用户反馈部分数据没有decode，还是类似%25XX的字符。\n## 第二版\n\n一番调查，原来是用户使用的是HTTP接口发送数据而不是SDK，所以部分数据自己encode了一次。然后服务器返回给前端页面的就是encode两次的数据。\n\n不就encode两次的问题嘛，页面decode两次就可以了嘛！于是无脑地吧decodeURIComponent(str)全部替换成了decodeURIComponent(decodeURIComponent(str))，发现问题居然解决了，找了另外的客户数据测试了下，验证也OK，于是发布。直到有一天某个另外的客户反馈页面脚本报错。\n## 第三版\n\n一番调查，根据URI Malformed Error这个罪证google得知，原来是源字符串不是合法的URL编码的字符串。虽然提示已经相当的明确了，但由于JSON数据量不少，字段较多，而且有些地方只需要decode一次，有些地方又需要decode两次，定位问题还是花了一些时间。最后发现罪魁祸首居然是用户输入的内容`14%`。\n## 解决方法\n\n``` javascript\nfunction safeDecodeURIComponent(str) {\n    if (!str || typeof str !== 'string') return String(str)\n\n    // encodeURIComponent不编码字符有71个：!， '，(，)，*，-，.，_，~，0-9，a-z，A-Z\n    var twiceEncodedReg = /^(%\\w{4,4}|[!'()*\\-._~0-9a-z])+$/gi\n    var encodedReg = /^(%\\w{2,2}|[!'()*\\-._~0-9a-z])+$/gi\n\n    // 这里用try catch是因为即使正则匹配也有可能解码异常，异常或者不匹配时返回源字符串即可\n    try {\n        if (twiceEncodedReg.test(str)) return decodeURIComponent(decodeURIComponent(str))\n        if (encodedReg.test(str)) return decodeURIComponent(str)\n    } catch(e) {\n    }\n\n    return str\n}\n```\n## 相关链接\n\n> - [Comparing escape(), encodeURI(), and encodeURIComponent()](http://xkr.us/articles/javascript/encode-compare/)\n> - [http://www.cnblogs.com/jhxk/articles/1634359.html](http://www.cnblogs.com/jhxk/articles/1634359.html)\n## 最后的总结\n\n基础知识不扎实导致无法深入剖析问题所在，解决方案自以为然也就不足为怪了。\n\n----7-21更新----\n## 后续\n\n果然还是有后续！昨天突然一个客户又反馈有乱码，一番研究发现用户输入部分编码，部分未编码。上面的方法就不凑效了，于是花了几分钟做了如下改进：\n\n``` js\nfunction safeDecodeURIComponent(str) {\n    var lastResult = str, current\n    try {\n        while((current = decodeURIComponent(lastResult)) != lastResult) {\n            lastResult = current\n        }\n    } catch(e) {}\n\n    return lastResult\n}\n```\n","slug":"decodeURIComponent","published":1,"updated":"2017-12-22T15:02:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbi2gsy40008ov954aksqwsb","content":"<p>DataEye游戏分析平台有个实时日志功能，用于展示接收来自游戏客户端SDK上报数据以及游戏开发商使用HTTP接口发送的数据。</p>\n<h2 id=\"第一版\"><a href=\"#第一版\" class=\"headerlink\" title=\"第一版\"></a>第一版</h2><p>数据库收到什么样的JSON数据就直接返回给前端展示，终于有一天客户反馈页面脚本报错。</p>\n<p>一番调查，原来是数据库中存在特殊字符，于是要求后台全部url encode一次，前端decode就可以了。验证OK，于是测试发布。直到有一天用户反馈部分数据没有decode，还是类似%25XX的字符。</p>\n<h2 id=\"第二版\"><a href=\"#第二版\" class=\"headerlink\" title=\"第二版\"></a>第二版</h2><p>一番调查，原来是用户使用的是HTTP接口发送数据而不是SDK，所以部分数据自己encode了一次。然后服务器返回给前端页面的就是encode两次的数据。</p>\n<p>不就encode两次的问题嘛，页面decode两次就可以了嘛！于是无脑地吧decodeURIComponent(str)全部替换成了decodeURIComponent(decodeURIComponent(str))，发现问题居然解决了，找了另外的客户数据测试了下，验证也OK，于是发布。直到有一天某个另外的客户反馈页面脚本报错。</p>\n<h2 id=\"第三版\"><a href=\"#第三版\" class=\"headerlink\" title=\"第三版\"></a>第三版</h2><p>一番调查，根据URI Malformed Error这个罪证google得知，原来是源字符串不是合法的URL编码的字符串。虽然提示已经相当的明确了，但由于JSON数据量不少，字段较多，而且有些地方只需要decode一次，有些地方又需要decode两次，定位问题还是花了一些时间。最后发现罪魁祸首居然是用户输入的内容<code>14%</code>。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">safeDecodeURIComponent</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!str || <span class=\"keyword\">typeof</span> str !== <span class=\"string\">'string'</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">String</span>(str)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// encodeURIComponent不编码字符有71个：!， '，(，)，*，-，.，_，~，0-9，a-z，A-Z</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> twiceEncodedReg = <span class=\"regexp\">/^(%\\w&#123;4,4&#125;|[!'()*\\-._~0-9a-z])+$/gi</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> encodedReg = <span class=\"regexp\">/^(%\\w&#123;2,2&#125;|[!'()*\\-._~0-9a-z])+$/gi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里用try catch是因为即使正则匹配也有可能解码异常，异常或者不匹配时返回源字符串即可</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (twiceEncodedReg.test(str)) <span class=\"keyword\">return</span> <span class=\"built_in\">decodeURIComponent</span>(<span class=\"built_in\">decodeURIComponent</span>(str))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (encodedReg.test(str)) <span class=\"keyword\">return</span> <span class=\"built_in\">decodeURIComponent</span>(str)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> str</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><blockquote>\n<ul>\n<li><a href=\"http://xkr.us/articles/javascript/encode-compare/\" target=\"_blank\" rel=\"noopener\">Comparing escape(), encodeURI(), and encodeURIComponent()</a></li>\n<li><a href=\"http://www.cnblogs.com/jhxk/articles/1634359.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/jhxk/articles/1634359.html</a><h2 id=\"最后的总结\"><a href=\"#最后的总结\" class=\"headerlink\" title=\"最后的总结\"></a>最后的总结</h2></li>\n</ul>\n</blockquote>\n<p>基础知识不扎实导致无法深入剖析问题所在，解决方案自以为然也就不足为怪了。</p>\n<p>—-7-21更新—-</p>\n<h2 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h2><p>果然还是有后续！昨天突然一个客户又反馈有乱码，一番研究发现用户输入部分编码，部分未编码。上面的方法就不凑效了，于是花了几分钟做了如下改进：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">safeDecodeURIComponent</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastResult = str, current</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((current = <span class=\"built_in\">decodeURIComponent</span>(lastResult)) != lastResult) &#123;</span><br><span class=\"line\">            lastResult = current</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> lastResult</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>DataEye游戏分析平台有个实时日志功能，用于展示接收来自游戏客户端SDK上报数据以及游戏开发商使用HTTP接口发送的数据。</p>\n<h2 id=\"第一版\"><a href=\"#第一版\" class=\"headerlink\" title=\"第一版\"></a>第一版</h2><p>数据库收到什么样的JSON数据就直接返回给前端展示，终于有一天客户反馈页面脚本报错。</p>\n<p>一番调查，原来是数据库中存在特殊字符，于是要求后台全部url encode一次，前端decode就可以了。验证OK，于是测试发布。直到有一天用户反馈部分数据没有decode，还是类似%25XX的字符。</p>\n<h2 id=\"第二版\"><a href=\"#第二版\" class=\"headerlink\" title=\"第二版\"></a>第二版</h2><p>一番调查，原来是用户使用的是HTTP接口发送数据而不是SDK，所以部分数据自己encode了一次。然后服务器返回给前端页面的就是encode两次的数据。</p>\n<p>不就encode两次的问题嘛，页面decode两次就可以了嘛！于是无脑地吧decodeURIComponent(str)全部替换成了decodeURIComponent(decodeURIComponent(str))，发现问题居然解决了，找了另外的客户数据测试了下，验证也OK，于是发布。直到有一天某个另外的客户反馈页面脚本报错。</p>\n<h2 id=\"第三版\"><a href=\"#第三版\" class=\"headerlink\" title=\"第三版\"></a>第三版</h2><p>一番调查，根据URI Malformed Error这个罪证google得知，原来是源字符串不是合法的URL编码的字符串。虽然提示已经相当的明确了，但由于JSON数据量不少，字段较多，而且有些地方只需要decode一次，有些地方又需要decode两次，定位问题还是花了一些时间。最后发现罪魁祸首居然是用户输入的内容<code>14%</code>。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">safeDecodeURIComponent</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!str || <span class=\"keyword\">typeof</span> str !== <span class=\"string\">'string'</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">String</span>(str)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// encodeURIComponent不编码字符有71个：!， '，(，)，*，-，.，_，~，0-9，a-z，A-Z</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> twiceEncodedReg = <span class=\"regexp\">/^(%\\w&#123;4,4&#125;|[!'()*\\-._~0-9a-z])+$/gi</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> encodedReg = <span class=\"regexp\">/^(%\\w&#123;2,2&#125;|[!'()*\\-._~0-9a-z])+$/gi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里用try catch是因为即使正则匹配也有可能解码异常，异常或者不匹配时返回源字符串即可</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (twiceEncodedReg.test(str)) <span class=\"keyword\">return</span> <span class=\"built_in\">decodeURIComponent</span>(<span class=\"built_in\">decodeURIComponent</span>(str))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (encodedReg.test(str)) <span class=\"keyword\">return</span> <span class=\"built_in\">decodeURIComponent</span>(str)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> str</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><blockquote>\n<ul>\n<li><a href=\"http://xkr.us/articles/javascript/encode-compare/\" target=\"_blank\" rel=\"noopener\">Comparing escape(), encodeURI(), and encodeURIComponent()</a></li>\n<li><a href=\"http://www.cnblogs.com/jhxk/articles/1634359.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/jhxk/articles/1634359.html</a><h2 id=\"最后的总结\"><a href=\"#最后的总结\" class=\"headerlink\" title=\"最后的总结\"></a>最后的总结</h2></li>\n</ul>\n</blockquote>\n<p>基础知识不扎实导致无法深入剖析问题所在，解决方案自以为然也就不足为怪了。</p>\n<p>—-7-21更新—-</p>\n<h2 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h2><p>果然还是有后续！昨天突然一个客户又反馈有乱码，一番研究发现用户输入部分编码，部分未编码。上面的方法就不凑效了，于是花了几分钟做了如下改进：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">safeDecodeURIComponent</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastResult = str, current</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((current = <span class=\"built_in\">decodeURIComponent</span>(lastResult)) != lastResult) &#123;</span><br><span class=\"line\">            lastResult = current</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> lastResult</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"JavaScript Parser资源总结","date":"2016-07-16T16:00:00.000Z","_content":"\n## 理解抽象语法树(AST)\n\n[Abstract syntax tree - 维基百科](https://en.wikipedia.org/wiki/Abstract_syntax_tree)\n\n[抽象语法树在 JavaScript 中的应用 - 美团点评技术团队](http://tech.meituan.com/abstract-syntax-tree.html)\n\n[JavaScript的抽象语法树与语法解析](http://wwsun.github.io/posts/javascript-ast-tutorial.html)\n\n[通过开发 Babel 插件理解抽象语法树](http://www.zcfy.cc/article/347)\n## JavaScript Parser\n- [Esprima](http://esprima.org/)\n- [Acorn](https://github.com/ternjs/acorn)\n- [Babylon](https://github.com/babel/babylon)\n\nParser建议从Esprima开始学习，相比较于其它Parser文档和示例更加丰富和形象。\n\nAcorn的性能和效率比Esprima更胜一筹，但是文档比较匮乏。\n\nBabylon是Babel的JavaScript Parser，早期也是fork的Acorn，目前关注度不及其它Parser。\n\n推荐一种比较好的实践方式：从npm中的找出几个[依赖于这些Parser](https://www.npmjs.com/browse/depended/acorn)的项目直接学习源代码。比如[amd2cmd](https://www.npmjs.com/package/amd2cmd)这个项目就是使用acorn将amd代码转换为cmd代码。\n## 周边工具\n\n[AST explorer](https://astexplorer.net/)\n\n更直观的理解各个Parser生成的AST。\n\n[ECMAScript Tooling](https://github.com/estools)\n\n各种用于AST以及辅助的相关工具，比如[estraverse](https://github.com/estools/estraverse)用于遍历AST，[escodegen](https://github.com/estools/escodegen)用于从AST生成源代码。\n\n[Babel 插件手册](https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md)\n","source":"_posts/parser.md","raw":"---\ntitle: JavaScript Parser资源总结\ndate: 2016-07-17\ntags: JavaScript,解析器\n---\n\n## 理解抽象语法树(AST)\n\n[Abstract syntax tree - 维基百科](https://en.wikipedia.org/wiki/Abstract_syntax_tree)\n\n[抽象语法树在 JavaScript 中的应用 - 美团点评技术团队](http://tech.meituan.com/abstract-syntax-tree.html)\n\n[JavaScript的抽象语法树与语法解析](http://wwsun.github.io/posts/javascript-ast-tutorial.html)\n\n[通过开发 Babel 插件理解抽象语法树](http://www.zcfy.cc/article/347)\n## JavaScript Parser\n- [Esprima](http://esprima.org/)\n- [Acorn](https://github.com/ternjs/acorn)\n- [Babylon](https://github.com/babel/babylon)\n\nParser建议从Esprima开始学习，相比较于其它Parser文档和示例更加丰富和形象。\n\nAcorn的性能和效率比Esprima更胜一筹，但是文档比较匮乏。\n\nBabylon是Babel的JavaScript Parser，早期也是fork的Acorn，目前关注度不及其它Parser。\n\n推荐一种比较好的实践方式：从npm中的找出几个[依赖于这些Parser](https://www.npmjs.com/browse/depended/acorn)的项目直接学习源代码。比如[amd2cmd](https://www.npmjs.com/package/amd2cmd)这个项目就是使用acorn将amd代码转换为cmd代码。\n## 周边工具\n\n[AST explorer](https://astexplorer.net/)\n\n更直观的理解各个Parser生成的AST。\n\n[ECMAScript Tooling](https://github.com/estools)\n\n各种用于AST以及辅助的相关工具，比如[estraverse](https://github.com/estools/estraverse)用于遍历AST，[escodegen](https://github.com/estools/escodegen)用于从AST生成源代码。\n\n[Babel 插件手册](https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md)\n","slug":"parser","published":1,"updated":"2017-12-22T15:14:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbi2gsy80009ov951r44fhqe","content":"<h2 id=\"理解抽象语法树-AST\"><a href=\"#理解抽象语法树-AST\" class=\"headerlink\" title=\"理解抽象语法树(AST)\"></a>理解抽象语法树(AST)</h2><p><a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\" target=\"_blank\" rel=\"noopener\">Abstract syntax tree - 维基百科</a></p>\n<p><a href=\"http://tech.meituan.com/abstract-syntax-tree.html\" target=\"_blank\" rel=\"noopener\">抽象语法树在 JavaScript 中的应用 - 美团点评技术团队</a></p>\n<p><a href=\"http://wwsun.github.io/posts/javascript-ast-tutorial.html\" target=\"_blank\" rel=\"noopener\">JavaScript的抽象语法树与语法解析</a></p>\n<p><a href=\"http://www.zcfy.cc/article/347\" target=\"_blank\" rel=\"noopener\">通过开发 Babel 插件理解抽象语法树</a></p>\n<h2 id=\"JavaScript-Parser\"><a href=\"#JavaScript-Parser\" class=\"headerlink\" title=\"JavaScript Parser\"></a>JavaScript Parser</h2><ul>\n<li><a href=\"http://esprima.org/\" target=\"_blank\" rel=\"noopener\">Esprima</a></li>\n<li><a href=\"https://github.com/ternjs/acorn\" target=\"_blank\" rel=\"noopener\">Acorn</a></li>\n<li><a href=\"https://github.com/babel/babylon\" target=\"_blank\" rel=\"noopener\">Babylon</a></li>\n</ul>\n<p>Parser建议从Esprima开始学习，相比较于其它Parser文档和示例更加丰富和形象。</p>\n<p>Acorn的性能和效率比Esprima更胜一筹，但是文档比较匮乏。</p>\n<p>Babylon是Babel的JavaScript Parser，早期也是fork的Acorn，目前关注度不及其它Parser。</p>\n<p>推荐一种比较好的实践方式：从npm中的找出几个<a href=\"https://www.npmjs.com/browse/depended/acorn\" target=\"_blank\" rel=\"noopener\">依赖于这些Parser</a>的项目直接学习源代码。比如<a href=\"https://www.npmjs.com/package/amd2cmd\" target=\"_blank\" rel=\"noopener\">amd2cmd</a>这个项目就是使用acorn将amd代码转换为cmd代码。</p>\n<h2 id=\"周边工具\"><a href=\"#周边工具\" class=\"headerlink\" title=\"周边工具\"></a>周边工具</h2><p><a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"noopener\">AST explorer</a></p>\n<p>更直观的理解各个Parser生成的AST。</p>\n<p><a href=\"https://github.com/estools\" target=\"_blank\" rel=\"noopener\">ECMAScript Tooling</a></p>\n<p>各种用于AST以及辅助的相关工具，比如<a href=\"https://github.com/estools/estraverse\" target=\"_blank\" rel=\"noopener\">estraverse</a>用于遍历AST，<a href=\"https://github.com/estools/escodegen\" target=\"_blank\" rel=\"noopener\">escodegen</a>用于从AST生成源代码。</p>\n<p><a href=\"https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md\" target=\"_blank\" rel=\"noopener\">Babel 插件手册</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"理解抽象语法树-AST\"><a href=\"#理解抽象语法树-AST\" class=\"headerlink\" title=\"理解抽象语法树(AST)\"></a>理解抽象语法树(AST)</h2><p><a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\" target=\"_blank\" rel=\"noopener\">Abstract syntax tree - 维基百科</a></p>\n<p><a href=\"http://tech.meituan.com/abstract-syntax-tree.html\" target=\"_blank\" rel=\"noopener\">抽象语法树在 JavaScript 中的应用 - 美团点评技术团队</a></p>\n<p><a href=\"http://wwsun.github.io/posts/javascript-ast-tutorial.html\" target=\"_blank\" rel=\"noopener\">JavaScript的抽象语法树与语法解析</a></p>\n<p><a href=\"http://www.zcfy.cc/article/347\" target=\"_blank\" rel=\"noopener\">通过开发 Babel 插件理解抽象语法树</a></p>\n<h2 id=\"JavaScript-Parser\"><a href=\"#JavaScript-Parser\" class=\"headerlink\" title=\"JavaScript Parser\"></a>JavaScript Parser</h2><ul>\n<li><a href=\"http://esprima.org/\" target=\"_blank\" rel=\"noopener\">Esprima</a></li>\n<li><a href=\"https://github.com/ternjs/acorn\" target=\"_blank\" rel=\"noopener\">Acorn</a></li>\n<li><a href=\"https://github.com/babel/babylon\" target=\"_blank\" rel=\"noopener\">Babylon</a></li>\n</ul>\n<p>Parser建议从Esprima开始学习，相比较于其它Parser文档和示例更加丰富和形象。</p>\n<p>Acorn的性能和效率比Esprima更胜一筹，但是文档比较匮乏。</p>\n<p>Babylon是Babel的JavaScript Parser，早期也是fork的Acorn，目前关注度不及其它Parser。</p>\n<p>推荐一种比较好的实践方式：从npm中的找出几个<a href=\"https://www.npmjs.com/browse/depended/acorn\" target=\"_blank\" rel=\"noopener\">依赖于这些Parser</a>的项目直接学习源代码。比如<a href=\"https://www.npmjs.com/package/amd2cmd\" target=\"_blank\" rel=\"noopener\">amd2cmd</a>这个项目就是使用acorn将amd代码转换为cmd代码。</p>\n<h2 id=\"周边工具\"><a href=\"#周边工具\" class=\"headerlink\" title=\"周边工具\"></a>周边工具</h2><p><a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"noopener\">AST explorer</a></p>\n<p>更直观的理解各个Parser生成的AST。</p>\n<p><a href=\"https://github.com/estools\" target=\"_blank\" rel=\"noopener\">ECMAScript Tooling</a></p>\n<p>各种用于AST以及辅助的相关工具，比如<a href=\"https://github.com/estools/estraverse\" target=\"_blank\" rel=\"noopener\">estraverse</a>用于遍历AST，<a href=\"https://github.com/estools/escodegen\" target=\"_blank\" rel=\"noopener\">escodegen</a>用于从AST生成源代码。</p>\n<p><a href=\"https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md\" target=\"_blank\" rel=\"noopener\">Babel 插件手册</a></p>\n"},{"title":"Redux三分钟入门","date":"2016-02-20T16:00:00.000Z","_content":"\n# Redux三分钟入门\n## 什么是Redux？\n\n对于前端页面，从数据层面来说，无非就是一系列的状态组合。\n在传统的前端开发中，尤其是jQuery横行的年代，状态管理相关的理念一直没有什么起色。\n自Flux横空出世以来，各种解决方案层出不穷，百花齐放，Redux也是在这种环境下诞生的。\n如何描述Redux呢？\n简而言之，它就是一个状态容器，里面存储了整个应用的所有状态。\n\n> Redux的核心思想就是要提供**_可预测**_的状态管理，这对日益膨胀的大型应用来说尤其重要。\n\n原谅我有一点标题党，因为对于从来没有听说过Redux的人来说，三分钟入门可能真的不够。\n## 预备知识\n\nRedux中有三个基本概念非常重要：store / reducer / action。\nStore顾名思义就是状态容器，Redux使用**_createStore**_这个API来创建一个全局的状态容器。这里有一点比较重要的就是：\n\n> Redux应用只能有一个单一的Store\n\n我们暂时不用深究Redux为何如此设计。\nReducer是一个纯函数，它的职责就是用来更新状态容器中的状态，**_这也是Redux中更新状态的唯一途径**_。\nAction是一个普通JavaScript对象，它是把数据从应用传递到状态容器的载体。\n将action传递到store中很简单，使用store.dispatch(action)就可以了。\n\n> 为了区分不同的数据来源，我们一般约定每个action都必须要有一个type字段。\n\n这样我们的reducer函数就能根据这个type字段来决定如何修改状态容器。\n掌握了上面的一些基本概念以后，我们就可以进入正题了，先上一段代码：\n## DEMO\n\n```\n/**\n * Redux的两个核心API\n * createStore用于创建状态容器\n * combineReducers用于将多个reducers合并成一个Reducer\n */\nlet {createStore, combineReducers} = Redux\n\n/**\n * 状态容器的初始状态\n * 一般用于同构应用，服务器端返回相关数据\n */\nlet INITIAL_STATE = {\n  counter: {\n    count: 0\n  }\n}\n\n/**\n * reducer函数，用于变更状态容器中的状态\n * 如果action未知，则原样返回\n * 永远不要修改state，返回一个全新的state\n */\nfunction counter(state = INITIAL_STATE.counter, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return {count: state.count + 1}\n    case 'DECREMENT':\n      return {count: state.count - 1}\n    default:\n      return state\n  }\n}\n\n/**\n * 状态容器三个核心方法：\n * subscribe用于监听事件，每当dispatch的时候会执行\n * dispatch用于分发action，这是改变状态容器中state的唯一途径\n * getState获取当前state\n */\nlet store = createStore(combineReducers({counter}), INITIAL_STATE)\n\nstore.subscribe(() =>\n  console.log('获取当前状态容器：', store.getState())\n)\n\nstore.dispatch({ type: 'INCREMENT' }) // count = 1\nstore.dispatch({ type: 'DECREMENT' }) // count = 0\n```\n\n[在线查看DEMO](http://codepen.io/simongfxu/pen/eJLwMb?editors=0012)\n上面的DEMO代码逻辑大致如下：\n1. 先定义reducer\n2. 调用createStore创建store\n3. 最后dispatch相关的action\n\n对应到具体业务中的过程可能是这样：\n1. 用户点击某个按钮\n2. 然后状态容器dispatch这个action\n3. action最后传达到reducer中\n4. reducer根据action的内容来修改状态\n5. 状态容器状态发生改变后触发视图更新\n\n理解了上面的DEMO代码之后，Redux基本上就算入门啦！\n## 后续深入\n\n学习完上面的DEMO后，推荐你先看下Redux的一些[基本理念](http://camsong.github.io/redux-in-chinese/docs/introduction/ThreePrinciples.html)，了解Redux背后设计的前因后果，然后再针对性地围绕[Redux官网中文版](http://camsong.github.io/redux-in-chinese/index.html)学习（个人不太推荐从头到尾的精读，时间充裕的话请自便）。\n","source":"_posts/redux.md","raw":"---\ntitle: Redux三分钟入门\ndate: 2016-02-21\ntags: Redux\n---\n\n# Redux三分钟入门\n## 什么是Redux？\n\n对于前端页面，从数据层面来说，无非就是一系列的状态组合。\n在传统的前端开发中，尤其是jQuery横行的年代，状态管理相关的理念一直没有什么起色。\n自Flux横空出世以来，各种解决方案层出不穷，百花齐放，Redux也是在这种环境下诞生的。\n如何描述Redux呢？\n简而言之，它就是一个状态容器，里面存储了整个应用的所有状态。\n\n> Redux的核心思想就是要提供**_可预测**_的状态管理，这对日益膨胀的大型应用来说尤其重要。\n\n原谅我有一点标题党，因为对于从来没有听说过Redux的人来说，三分钟入门可能真的不够。\n## 预备知识\n\nRedux中有三个基本概念非常重要：store / reducer / action。\nStore顾名思义就是状态容器，Redux使用**_createStore**_这个API来创建一个全局的状态容器。这里有一点比较重要的就是：\n\n> Redux应用只能有一个单一的Store\n\n我们暂时不用深究Redux为何如此设计。\nReducer是一个纯函数，它的职责就是用来更新状态容器中的状态，**_这也是Redux中更新状态的唯一途径**_。\nAction是一个普通JavaScript对象，它是把数据从应用传递到状态容器的载体。\n将action传递到store中很简单，使用store.dispatch(action)就可以了。\n\n> 为了区分不同的数据来源，我们一般约定每个action都必须要有一个type字段。\n\n这样我们的reducer函数就能根据这个type字段来决定如何修改状态容器。\n掌握了上面的一些基本概念以后，我们就可以进入正题了，先上一段代码：\n## DEMO\n\n```\n/**\n * Redux的两个核心API\n * createStore用于创建状态容器\n * combineReducers用于将多个reducers合并成一个Reducer\n */\nlet {createStore, combineReducers} = Redux\n\n/**\n * 状态容器的初始状态\n * 一般用于同构应用，服务器端返回相关数据\n */\nlet INITIAL_STATE = {\n  counter: {\n    count: 0\n  }\n}\n\n/**\n * reducer函数，用于变更状态容器中的状态\n * 如果action未知，则原样返回\n * 永远不要修改state，返回一个全新的state\n */\nfunction counter(state = INITIAL_STATE.counter, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return {count: state.count + 1}\n    case 'DECREMENT':\n      return {count: state.count - 1}\n    default:\n      return state\n  }\n}\n\n/**\n * 状态容器三个核心方法：\n * subscribe用于监听事件，每当dispatch的时候会执行\n * dispatch用于分发action，这是改变状态容器中state的唯一途径\n * getState获取当前state\n */\nlet store = createStore(combineReducers({counter}), INITIAL_STATE)\n\nstore.subscribe(() =>\n  console.log('获取当前状态容器：', store.getState())\n)\n\nstore.dispatch({ type: 'INCREMENT' }) // count = 1\nstore.dispatch({ type: 'DECREMENT' }) // count = 0\n```\n\n[在线查看DEMO](http://codepen.io/simongfxu/pen/eJLwMb?editors=0012)\n上面的DEMO代码逻辑大致如下：\n1. 先定义reducer\n2. 调用createStore创建store\n3. 最后dispatch相关的action\n\n对应到具体业务中的过程可能是这样：\n1. 用户点击某个按钮\n2. 然后状态容器dispatch这个action\n3. action最后传达到reducer中\n4. reducer根据action的内容来修改状态\n5. 状态容器状态发生改变后触发视图更新\n\n理解了上面的DEMO代码之后，Redux基本上就算入门啦！\n## 后续深入\n\n学习完上面的DEMO后，推荐你先看下Redux的一些[基本理念](http://camsong.github.io/redux-in-chinese/docs/introduction/ThreePrinciples.html)，了解Redux背后设计的前因后果，然后再针对性地围绕[Redux官网中文版](http://camsong.github.io/redux-in-chinese/index.html)学习（个人不太推荐从头到尾的精读，时间充裕的话请自便）。\n","slug":"redux","published":1,"updated":"2017-12-22T15:09:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbi2gsyd000cov95dltsa6fk","content":"<h1 id=\"Redux三分钟入门\"><a href=\"#Redux三分钟入门\" class=\"headerlink\" title=\"Redux三分钟入门\"></a>Redux三分钟入门</h1><h2 id=\"什么是Redux？\"><a href=\"#什么是Redux？\" class=\"headerlink\" title=\"什么是Redux？\"></a>什么是Redux？</h2><p>对于前端页面，从数据层面来说，无非就是一系列的状态组合。<br>在传统的前端开发中，尤其是jQuery横行的年代，状态管理相关的理念一直没有什么起色。<br>自Flux横空出世以来，各种解决方案层出不穷，百花齐放，Redux也是在这种环境下诞生的。<br>如何描述Redux呢？<br>简而言之，它就是一个状态容器，里面存储了整个应用的所有状态。</p>\n<blockquote>\n<p>Redux的核心思想就是要提供<strong>_可预测</strong>_的状态管理，这对日益膨胀的大型应用来说尤其重要。</p>\n</blockquote>\n<p>原谅我有一点标题党，因为对于从来没有听说过Redux的人来说，三分钟入门可能真的不够。</p>\n<h2 id=\"预备知识\"><a href=\"#预备知识\" class=\"headerlink\" title=\"预备知识\"></a>预备知识</h2><p>Redux中有三个基本概念非常重要：store / reducer / action。<br>Store顾名思义就是状态容器，Redux使用<strong>_createStore</strong>_这个API来创建一个全局的状态容器。这里有一点比较重要的就是：</p>\n<blockquote>\n<p>Redux应用只能有一个单一的Store</p>\n</blockquote>\n<p>我们暂时不用深究Redux为何如此设计。<br>Reducer是一个纯函数，它的职责就是用来更新状态容器中的状态，<strong>_这也是Redux中更新状态的唯一途径</strong>_。<br>Action是一个普通JavaScript对象，它是把数据从应用传递到状态容器的载体。<br>将action传递到store中很简单，使用store.dispatch(action)就可以了。</p>\n<blockquote>\n<p>为了区分不同的数据来源，我们一般约定每个action都必须要有一个type字段。</p>\n</blockquote>\n<p>这样我们的reducer函数就能根据这个type字段来决定如何修改状态容器。<br>掌握了上面的一些基本概念以后，我们就可以进入正题了，先上一段代码：</p>\n<h2 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Redux的两个核心API</span><br><span class=\"line\"> * createStore用于创建状态容器</span><br><span class=\"line\"> * combineReducers用于将多个reducers合并成一个Reducer</span><br><span class=\"line\"> */</span><br><span class=\"line\">let &#123;createStore, combineReducers&#125; = Redux</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 状态容器的初始状态</span><br><span class=\"line\"> * 一般用于同构应用，服务器端返回相关数据</span><br><span class=\"line\"> */</span><br><span class=\"line\">let INITIAL_STATE = &#123;</span><br><span class=\"line\">  counter: &#123;</span><br><span class=\"line\">    count: 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * reducer函数，用于变更状态容器中的状态</span><br><span class=\"line\"> * 如果action未知，则原样返回</span><br><span class=\"line\"> * 永远不要修改state，返回一个全新的state</span><br><span class=\"line\"> */</span><br><span class=\"line\">function counter(state = INITIAL_STATE.counter, action) &#123;</span><br><span class=\"line\">  switch (action.type) &#123;</span><br><span class=\"line\">    case &apos;INCREMENT&apos;:</span><br><span class=\"line\">      return &#123;count: state.count + 1&#125;</span><br><span class=\"line\">    case &apos;DECREMENT&apos;:</span><br><span class=\"line\">      return &#123;count: state.count - 1&#125;</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      return state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 状态容器三个核心方法：</span><br><span class=\"line\"> * subscribe用于监听事件，每当dispatch的时候会执行</span><br><span class=\"line\"> * dispatch用于分发action，这是改变状态容器中state的唯一途径</span><br><span class=\"line\"> * getState获取当前state</span><br><span class=\"line\"> */</span><br><span class=\"line\">let store = createStore(combineReducers(&#123;counter&#125;), INITIAL_STATE)</span><br><span class=\"line\"></span><br><span class=\"line\">store.subscribe(() =&gt;</span><br><span class=\"line\">  console.log(&apos;获取当前状态容器：&apos;, store.getState())</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">store.dispatch(&#123; type: &apos;INCREMENT&apos; &#125;) // count = 1</span><br><span class=\"line\">store.dispatch(&#123; type: &apos;DECREMENT&apos; &#125;) // count = 0</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://codepen.io/simongfxu/pen/eJLwMb?editors=0012\" target=\"_blank\" rel=\"noopener\">在线查看DEMO</a><br>上面的DEMO代码逻辑大致如下：</p>\n<ol>\n<li>先定义reducer</li>\n<li>调用createStore创建store</li>\n<li>最后dispatch相关的action</li>\n</ol>\n<p>对应到具体业务中的过程可能是这样：</p>\n<ol>\n<li>用户点击某个按钮</li>\n<li>然后状态容器dispatch这个action</li>\n<li>action最后传达到reducer中</li>\n<li>reducer根据action的内容来修改状态</li>\n<li>状态容器状态发生改变后触发视图更新</li>\n</ol>\n<p>理解了上面的DEMO代码之后，Redux基本上就算入门啦！</p>\n<h2 id=\"后续深入\"><a href=\"#后续深入\" class=\"headerlink\" title=\"后续深入\"></a>后续深入</h2><p>学习完上面的DEMO后，推荐你先看下Redux的一些<a href=\"http://camsong.github.io/redux-in-chinese/docs/introduction/ThreePrinciples.html\" target=\"_blank\" rel=\"noopener\">基本理念</a>，了解Redux背后设计的前因后果，然后再针对性地围绕<a href=\"http://camsong.github.io/redux-in-chinese/index.html\" target=\"_blank\" rel=\"noopener\">Redux官网中文版</a>学习（个人不太推荐从头到尾的精读，时间充裕的话请自便）。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Redux三分钟入门\"><a href=\"#Redux三分钟入门\" class=\"headerlink\" title=\"Redux三分钟入门\"></a>Redux三分钟入门</h1><h2 id=\"什么是Redux？\"><a href=\"#什么是Redux？\" class=\"headerlink\" title=\"什么是Redux？\"></a>什么是Redux？</h2><p>对于前端页面，从数据层面来说，无非就是一系列的状态组合。<br>在传统的前端开发中，尤其是jQuery横行的年代，状态管理相关的理念一直没有什么起色。<br>自Flux横空出世以来，各种解决方案层出不穷，百花齐放，Redux也是在这种环境下诞生的。<br>如何描述Redux呢？<br>简而言之，它就是一个状态容器，里面存储了整个应用的所有状态。</p>\n<blockquote>\n<p>Redux的核心思想就是要提供<strong>_可预测</strong>_的状态管理，这对日益膨胀的大型应用来说尤其重要。</p>\n</blockquote>\n<p>原谅我有一点标题党，因为对于从来没有听说过Redux的人来说，三分钟入门可能真的不够。</p>\n<h2 id=\"预备知识\"><a href=\"#预备知识\" class=\"headerlink\" title=\"预备知识\"></a>预备知识</h2><p>Redux中有三个基本概念非常重要：store / reducer / action。<br>Store顾名思义就是状态容器，Redux使用<strong>_createStore</strong>_这个API来创建一个全局的状态容器。这里有一点比较重要的就是：</p>\n<blockquote>\n<p>Redux应用只能有一个单一的Store</p>\n</blockquote>\n<p>我们暂时不用深究Redux为何如此设计。<br>Reducer是一个纯函数，它的职责就是用来更新状态容器中的状态，<strong>_这也是Redux中更新状态的唯一途径</strong>_。<br>Action是一个普通JavaScript对象，它是把数据从应用传递到状态容器的载体。<br>将action传递到store中很简单，使用store.dispatch(action)就可以了。</p>\n<blockquote>\n<p>为了区分不同的数据来源，我们一般约定每个action都必须要有一个type字段。</p>\n</blockquote>\n<p>这样我们的reducer函数就能根据这个type字段来决定如何修改状态容器。<br>掌握了上面的一些基本概念以后，我们就可以进入正题了，先上一段代码：</p>\n<h2 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Redux的两个核心API</span><br><span class=\"line\"> * createStore用于创建状态容器</span><br><span class=\"line\"> * combineReducers用于将多个reducers合并成一个Reducer</span><br><span class=\"line\"> */</span><br><span class=\"line\">let &#123;createStore, combineReducers&#125; = Redux</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 状态容器的初始状态</span><br><span class=\"line\"> * 一般用于同构应用，服务器端返回相关数据</span><br><span class=\"line\"> */</span><br><span class=\"line\">let INITIAL_STATE = &#123;</span><br><span class=\"line\">  counter: &#123;</span><br><span class=\"line\">    count: 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * reducer函数，用于变更状态容器中的状态</span><br><span class=\"line\"> * 如果action未知，则原样返回</span><br><span class=\"line\"> * 永远不要修改state，返回一个全新的state</span><br><span class=\"line\"> */</span><br><span class=\"line\">function counter(state = INITIAL_STATE.counter, action) &#123;</span><br><span class=\"line\">  switch (action.type) &#123;</span><br><span class=\"line\">    case &apos;INCREMENT&apos;:</span><br><span class=\"line\">      return &#123;count: state.count + 1&#125;</span><br><span class=\"line\">    case &apos;DECREMENT&apos;:</span><br><span class=\"line\">      return &#123;count: state.count - 1&#125;</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      return state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 状态容器三个核心方法：</span><br><span class=\"line\"> * subscribe用于监听事件，每当dispatch的时候会执行</span><br><span class=\"line\"> * dispatch用于分发action，这是改变状态容器中state的唯一途径</span><br><span class=\"line\"> * getState获取当前state</span><br><span class=\"line\"> */</span><br><span class=\"line\">let store = createStore(combineReducers(&#123;counter&#125;), INITIAL_STATE)</span><br><span class=\"line\"></span><br><span class=\"line\">store.subscribe(() =&gt;</span><br><span class=\"line\">  console.log(&apos;获取当前状态容器：&apos;, store.getState())</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">store.dispatch(&#123; type: &apos;INCREMENT&apos; &#125;) // count = 1</span><br><span class=\"line\">store.dispatch(&#123; type: &apos;DECREMENT&apos; &#125;) // count = 0</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://codepen.io/simongfxu/pen/eJLwMb?editors=0012\" target=\"_blank\" rel=\"noopener\">在线查看DEMO</a><br>上面的DEMO代码逻辑大致如下：</p>\n<ol>\n<li>先定义reducer</li>\n<li>调用createStore创建store</li>\n<li>最后dispatch相关的action</li>\n</ol>\n<p>对应到具体业务中的过程可能是这样：</p>\n<ol>\n<li>用户点击某个按钮</li>\n<li>然后状态容器dispatch这个action</li>\n<li>action最后传达到reducer中</li>\n<li>reducer根据action的内容来修改状态</li>\n<li>状态容器状态发生改变后触发视图更新</li>\n</ol>\n<p>理解了上面的DEMO代码之后，Redux基本上就算入门啦！</p>\n<h2 id=\"后续深入\"><a href=\"#后续深入\" class=\"headerlink\" title=\"后续深入\"></a>后续深入</h2><p>学习完上面的DEMO后，推荐你先看下Redux的一些<a href=\"http://camsong.github.io/redux-in-chinese/docs/introduction/ThreePrinciples.html\" target=\"_blank\" rel=\"noopener\">基本理念</a>，了解Redux背后设计的前因后果，然后再针对性地围绕<a href=\"http://camsong.github.io/redux-in-chinese/index.html\" target=\"_blank\" rel=\"noopener\">Redux官网中文版</a>学习（个人不太推荐从头到尾的精读，时间充裕的话请自便）。</p>\n"},{"title":"RequireJS定义模块常用的两种方式","date":"2015-04-08T16:00:00.000Z","_content":"\nRequieJS是一个遵循AMD规范的模块加载器，其定义模块的方式非常简洁，如下：\n\n```\n define(id?, dependencies?, factory);\n```\n\n> - id为模块名称，字符串，可选参数\n> - dependencies为本模块依赖的其它模块，数组，可选\n> - factory为模块的实现，可以为一个对象或者函数，必填\n\n最常见的定义模块的方式如下：\n\n```\ndefine(['jquery'], function($){\n    var myModule = {\n        add: function(a, b) {\n               return a + b\n       }\n    }\n\n    /*\n     * 这里将对象直接返回即可\n     * 返回函数也是可以的\n     * 如果没有任何返回值，那么模块作为依赖被引入的时候就是undefined\n     */\n    return myModule\n})\n```\n\n另外还有一种类似CommonJS的方式\n\n```\ndefine(['exports'], function(exports){\n    exports.add =  function(a, b) {\n        return a + b\n    }\n})\n```\n\n这种方式将CommonJS模块的转换为AMD风格的模块十分方便。\n\n如果一个模块同时兼容AMD、CommonJS或者无模块系统的传统页面，那么就需要用到[UMD](https://github.com/umdjs/umd/blob/master/returnExports.js)\n\n```\n// root在浏览器里代表window对象，node里面则是global\n;(function (root, factory) {\n    // AMD\n    if (typeof define === 'function' && define.amd) {\n        define([], factory)\n    } else if (typeof exports === 'object') {\n        // CommonJS\n        module.exports = factory()\n    } else {\n        // 暴露出的全局变量\n        root.moduleName = factory()\n  }\n}(this, function () {\n    var myModule = {}\n    return myModule\n}))\n```\n\n参考文档\n\n---\n\n> - [AMD模块定义规范](http://segmentfault.com/a/1190000000761330)\n> - [AMD：浏览器中的模块规范](http://www.cnblogs.com/snandy/archive/2012/03/12/2390782.html)\n","source":"_posts/requirejs定义模块的两种方式.md","raw":"---\ntitle: RequireJS定义模块常用的两种方式\ndate: 2015-04-09\ntags: JavaScript\n---\n\nRequieJS是一个遵循AMD规范的模块加载器，其定义模块的方式非常简洁，如下：\n\n```\n define(id?, dependencies?, factory);\n```\n\n> - id为模块名称，字符串，可选参数\n> - dependencies为本模块依赖的其它模块，数组，可选\n> - factory为模块的实现，可以为一个对象或者函数，必填\n\n最常见的定义模块的方式如下：\n\n```\ndefine(['jquery'], function($){\n    var myModule = {\n        add: function(a, b) {\n               return a + b\n       }\n    }\n\n    /*\n     * 这里将对象直接返回即可\n     * 返回函数也是可以的\n     * 如果没有任何返回值，那么模块作为依赖被引入的时候就是undefined\n     */\n    return myModule\n})\n```\n\n另外还有一种类似CommonJS的方式\n\n```\ndefine(['exports'], function(exports){\n    exports.add =  function(a, b) {\n        return a + b\n    }\n})\n```\n\n这种方式将CommonJS模块的转换为AMD风格的模块十分方便。\n\n如果一个模块同时兼容AMD、CommonJS或者无模块系统的传统页面，那么就需要用到[UMD](https://github.com/umdjs/umd/blob/master/returnExports.js)\n\n```\n// root在浏览器里代表window对象，node里面则是global\n;(function (root, factory) {\n    // AMD\n    if (typeof define === 'function' && define.amd) {\n        define([], factory)\n    } else if (typeof exports === 'object') {\n        // CommonJS\n        module.exports = factory()\n    } else {\n        // 暴露出的全局变量\n        root.moduleName = factory()\n  }\n}(this, function () {\n    var myModule = {}\n    return myModule\n}))\n```\n\n参考文档\n\n---\n\n> - [AMD模块定义规范](http://segmentfault.com/a/1190000000761330)\n> - [AMD：浏览器中的模块规范](http://www.cnblogs.com/snandy/archive/2012/03/12/2390782.html)\n","slug":"requirejs定义模块的两种方式","published":1,"updated":"2017-12-22T15:00:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbi2gsyf000eov95xhb4pteh","content":"<p>RequieJS是一个遵循AMD规范的模块加载器，其定义模块的方式非常简洁，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(id?, dependencies?, factory);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>id为模块名称，字符串，可选参数</li>\n<li>dependencies为本模块依赖的其它模块，数组，可选</li>\n<li>factory为模块的实现，可以为一个对象或者函数，必填</li>\n</ul>\n</blockquote>\n<p>最常见的定义模块的方式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([&apos;jquery&apos;], function($)&#123;</span><br><span class=\"line\">    var myModule = &#123;</span><br><span class=\"line\">        add: function(a, b) &#123;</span><br><span class=\"line\">               return a + b</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /*</span><br><span class=\"line\">     * 这里将对象直接返回即可</span><br><span class=\"line\">     * 返回函数也是可以的</span><br><span class=\"line\">     * 如果没有任何返回值，那么模块作为依赖被引入的时候就是undefined</span><br><span class=\"line\">     */</span><br><span class=\"line\">    return myModule</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>另外还有一种类似CommonJS的方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([&apos;exports&apos;], function(exports)&#123;</span><br><span class=\"line\">    exports.add =  function(a, b) &#123;</span><br><span class=\"line\">        return a + b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这种方式将CommonJS模块的转换为AMD风格的模块十分方便。</p>\n<p>如果一个模块同时兼容AMD、CommonJS或者无模块系统的传统页面，那么就需要用到<a href=\"https://github.com/umdjs/umd/blob/master/returnExports.js\" target=\"_blank\" rel=\"noopener\">UMD</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// root在浏览器里代表window对象，node里面则是global</span><br><span class=\"line\">;(function (root, factory) &#123;</span><br><span class=\"line\">    // AMD</span><br><span class=\"line\">    if (typeof define === &apos;function&apos; &amp;&amp; define.amd) &#123;</span><br><span class=\"line\">        define([], factory)</span><br><span class=\"line\">    &#125; else if (typeof exports === &apos;object&apos;) &#123;</span><br><span class=\"line\">        // CommonJS</span><br><span class=\"line\">        module.exports = factory()</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        // 暴露出的全局变量</span><br><span class=\"line\">        root.moduleName = factory()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;(this, function () &#123;</span><br><span class=\"line\">    var myModule = &#123;&#125;</span><br><span class=\"line\">    return myModule</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n<p>参考文档</p>\n<hr>\n<blockquote>\n<ul>\n<li><a href=\"http://segmentfault.com/a/1190000000761330\" target=\"_blank\" rel=\"noopener\">AMD模块定义规范</a></li>\n<li><a href=\"http://www.cnblogs.com/snandy/archive/2012/03/12/2390782.html\" target=\"_blank\" rel=\"noopener\">AMD：浏览器中的模块规范</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>RequieJS是一个遵循AMD规范的模块加载器，其定义模块的方式非常简洁，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(id?, dependencies?, factory);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>id为模块名称，字符串，可选参数</li>\n<li>dependencies为本模块依赖的其它模块，数组，可选</li>\n<li>factory为模块的实现，可以为一个对象或者函数，必填</li>\n</ul>\n</blockquote>\n<p>最常见的定义模块的方式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([&apos;jquery&apos;], function($)&#123;</span><br><span class=\"line\">    var myModule = &#123;</span><br><span class=\"line\">        add: function(a, b) &#123;</span><br><span class=\"line\">               return a + b</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /*</span><br><span class=\"line\">     * 这里将对象直接返回即可</span><br><span class=\"line\">     * 返回函数也是可以的</span><br><span class=\"line\">     * 如果没有任何返回值，那么模块作为依赖被引入的时候就是undefined</span><br><span class=\"line\">     */</span><br><span class=\"line\">    return myModule</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>另外还有一种类似CommonJS的方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([&apos;exports&apos;], function(exports)&#123;</span><br><span class=\"line\">    exports.add =  function(a, b) &#123;</span><br><span class=\"line\">        return a + b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这种方式将CommonJS模块的转换为AMD风格的模块十分方便。</p>\n<p>如果一个模块同时兼容AMD、CommonJS或者无模块系统的传统页面，那么就需要用到<a href=\"https://github.com/umdjs/umd/blob/master/returnExports.js\" target=\"_blank\" rel=\"noopener\">UMD</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// root在浏览器里代表window对象，node里面则是global</span><br><span class=\"line\">;(function (root, factory) &#123;</span><br><span class=\"line\">    // AMD</span><br><span class=\"line\">    if (typeof define === &apos;function&apos; &amp;&amp; define.amd) &#123;</span><br><span class=\"line\">        define([], factory)</span><br><span class=\"line\">    &#125; else if (typeof exports === &apos;object&apos;) &#123;</span><br><span class=\"line\">        // CommonJS</span><br><span class=\"line\">        module.exports = factory()</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        // 暴露出的全局变量</span><br><span class=\"line\">        root.moduleName = factory()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;(this, function () &#123;</span><br><span class=\"line\">    var myModule = &#123;&#125;</span><br><span class=\"line\">    return myModule</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n<p>参考文档</p>\n<hr>\n<blockquote>\n<ul>\n<li><a href=\"http://segmentfault.com/a/1190000000761330\" target=\"_blank\" rel=\"noopener\">AMD模块定义规范</a></li>\n<li><a href=\"http://www.cnblogs.com/snandy/archive/2012/03/12/2390782.html\" target=\"_blank\" rel=\"noopener\">AMD：浏览器中的模块规范</a></li>\n</ul>\n</blockquote>\n"},{"title":"美妙的函数之isArguments","date":"2015-04-01T16:00:00.000Z","_content":"\n判断变量是否为Arguments对象没有想象中的那么简单，你可能会使用下面这种方法：\n\n```\nObject.prototype.toString.call(value) === '[Object Arguments]'\n```\n\n我们先来看看著名的es5-shim是如何实现的。\n\n```\nvar _toString = ObjectPrototype.toString;\n\nvar isFunction = function(val) {\n    return ObjectPrototype.toString.call(val) === '[object Function]';\n};\n\nvar isArguments = function isArguments(value) {\n    var str = _toString.call(value);\n    var isArgs = str === '[object Arguments]';\n    if (!isArgs) {\n        isArgs = !isArray(value) && value !== null && typeof value === 'object' && typeof value.length === 'number' && value.length >= 0 && isFunction(value.callee);\n    }\n    return isArgs;\n};\n```\n\n因为某些浏览器的[buggy](https://github.com/lodash/lodash/blob/master/lodash.src.js#L1004)行为，这个方法不得不这么长。再看看[lodash](https://github.com/lodash/lodash/blob/master/lodash.src.js#L8480)的实现：\n\n```\nvar MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;\n\nfunction isObjectLike(value) {\n    return !!value && typeof value == 'object';\n}\n\nfunction isLength(value) {\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nfunction isArguments(value) {\n  var length = isObjectLike(value) ? value.length : undefined;\n  return isLength(length) && objToString.call(value) == argsTag;\n}\n\n\n// Fallback for environments without a `toStringTag` for `arguments` objects.\nif (!support.argsTag) {\n  isArguments = function(value) {\n    var length = isObjectLike(value) ? value.length : undefined;\n    return isLength(length) && hasOwnProperty.call(value, 'callee') &&\n      !propertyIsEnumerable.call(value, 'callee');\n  };\n}\n```\n\n对比两种实现，es5-shim仅仅只是做了arguments对象特有的属性检测，而lodash的实现不论是从代码可读性还是严谨方面来考察都是极其完美的。\n","source":"_posts/isArguments.md","raw":"---\ntitle: 美妙的函数之isArguments\ndate: 2015-04-02\ntags: JavaScript\n---\n\n判断变量是否为Arguments对象没有想象中的那么简单，你可能会使用下面这种方法：\n\n```\nObject.prototype.toString.call(value) === '[Object Arguments]'\n```\n\n我们先来看看著名的es5-shim是如何实现的。\n\n```\nvar _toString = ObjectPrototype.toString;\n\nvar isFunction = function(val) {\n    return ObjectPrototype.toString.call(val) === '[object Function]';\n};\n\nvar isArguments = function isArguments(value) {\n    var str = _toString.call(value);\n    var isArgs = str === '[object Arguments]';\n    if (!isArgs) {\n        isArgs = !isArray(value) && value !== null && typeof value === 'object' && typeof value.length === 'number' && value.length >= 0 && isFunction(value.callee);\n    }\n    return isArgs;\n};\n```\n\n因为某些浏览器的[buggy](https://github.com/lodash/lodash/blob/master/lodash.src.js#L1004)行为，这个方法不得不这么长。再看看[lodash](https://github.com/lodash/lodash/blob/master/lodash.src.js#L8480)的实现：\n\n```\nvar MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;\n\nfunction isObjectLike(value) {\n    return !!value && typeof value == 'object';\n}\n\nfunction isLength(value) {\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nfunction isArguments(value) {\n  var length = isObjectLike(value) ? value.length : undefined;\n  return isLength(length) && objToString.call(value) == argsTag;\n}\n\n\n// Fallback for environments without a `toStringTag` for `arguments` objects.\nif (!support.argsTag) {\n  isArguments = function(value) {\n    var length = isObjectLike(value) ? value.length : undefined;\n    return isLength(length) && hasOwnProperty.call(value, 'callee') &&\n      !propertyIsEnumerable.call(value, 'callee');\n  };\n}\n```\n\n对比两种实现，es5-shim仅仅只是做了arguments对象特有的属性检测，而lodash的实现不论是从代码可读性还是严谨方面来考察都是极其完美的。\n","slug":"isArguments","published":1,"updated":"2017-12-22T14:59:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbi2gsyi000gov95aunoml9k","content":"<p>判断变量是否为Arguments对象没有想象中的那么简单，你可能会使用下面这种方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.prototype.toString.call(value) === &apos;[Object Arguments]&apos;</span><br></pre></td></tr></table></figure>\n<p>我们先来看看著名的es5-shim是如何实现的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var _toString = ObjectPrototype.toString;</span><br><span class=\"line\"></span><br><span class=\"line\">var isFunction = function(val) &#123;</span><br><span class=\"line\">    return ObjectPrototype.toString.call(val) === &apos;[object Function]&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var isArguments = function isArguments(value) &#123;</span><br><span class=\"line\">    var str = _toString.call(value);</span><br><span class=\"line\">    var isArgs = str === &apos;[object Arguments]&apos;;</span><br><span class=\"line\">    if (!isArgs) &#123;</span><br><span class=\"line\">        isArgs = !isArray(value) &amp;&amp; value !== null &amp;&amp; typeof value === &apos;object&apos; &amp;&amp; typeof value.length === &apos;number&apos; &amp;&amp; value.length &gt;= 0 &amp;&amp; isFunction(value.callee);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return isArgs;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>因为某些浏览器的<a href=\"https://github.com/lodash/lodash/blob/master/lodash.src.js#L1004\" target=\"_blank\" rel=\"noopener\">buggy</a>行为，这个方法不得不这么长。再看看<a href=\"https://github.com/lodash/lodash/blob/master/lodash.src.js#L8480\" target=\"_blank\" rel=\"noopener\">lodash</a>的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;</span><br><span class=\"line\"></span><br><span class=\"line\">function isObjectLike(value) &#123;</span><br><span class=\"line\">    return !!value &amp;&amp; typeof value == &apos;object&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function isLength(value) &#123;</span><br><span class=\"line\">  return typeof value == &apos;number&apos; &amp;&amp; value &gt; -1 &amp;&amp; value % 1 == 0 &amp;&amp; value &lt;= MAX_SAFE_INTEGER;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function isArguments(value) &#123;</span><br><span class=\"line\">  var length = isObjectLike(value) ? value.length : undefined;</span><br><span class=\"line\">  return isLength(length) &amp;&amp; objToString.call(value) == argsTag;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// Fallback for environments without a `toStringTag` for `arguments` objects.</span><br><span class=\"line\">if (!support.argsTag) &#123;</span><br><span class=\"line\">  isArguments = function(value) &#123;</span><br><span class=\"line\">    var length = isObjectLike(value) ? value.length : undefined;</span><br><span class=\"line\">    return isLength(length) &amp;&amp; hasOwnProperty.call(value, &apos;callee&apos;) &amp;&amp;</span><br><span class=\"line\">      !propertyIsEnumerable.call(value, &apos;callee&apos;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对比两种实现，es5-shim仅仅只是做了arguments对象特有的属性检测，而lodash的实现不论是从代码可读性还是严谨方面来考察都是极其完美的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>判断变量是否为Arguments对象没有想象中的那么简单，你可能会使用下面这种方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.prototype.toString.call(value) === &apos;[Object Arguments]&apos;</span><br></pre></td></tr></table></figure>\n<p>我们先来看看著名的es5-shim是如何实现的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var _toString = ObjectPrototype.toString;</span><br><span class=\"line\"></span><br><span class=\"line\">var isFunction = function(val) &#123;</span><br><span class=\"line\">    return ObjectPrototype.toString.call(val) === &apos;[object Function]&apos;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var isArguments = function isArguments(value) &#123;</span><br><span class=\"line\">    var str = _toString.call(value);</span><br><span class=\"line\">    var isArgs = str === &apos;[object Arguments]&apos;;</span><br><span class=\"line\">    if (!isArgs) &#123;</span><br><span class=\"line\">        isArgs = !isArray(value) &amp;&amp; value !== null &amp;&amp; typeof value === &apos;object&apos; &amp;&amp; typeof value.length === &apos;number&apos; &amp;&amp; value.length &gt;= 0 &amp;&amp; isFunction(value.callee);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return isArgs;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>因为某些浏览器的<a href=\"https://github.com/lodash/lodash/blob/master/lodash.src.js#L1004\" target=\"_blank\" rel=\"noopener\">buggy</a>行为，这个方法不得不这么长。再看看<a href=\"https://github.com/lodash/lodash/blob/master/lodash.src.js#L8480\" target=\"_blank\" rel=\"noopener\">lodash</a>的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;</span><br><span class=\"line\"></span><br><span class=\"line\">function isObjectLike(value) &#123;</span><br><span class=\"line\">    return !!value &amp;&amp; typeof value == &apos;object&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function isLength(value) &#123;</span><br><span class=\"line\">  return typeof value == &apos;number&apos; &amp;&amp; value &gt; -1 &amp;&amp; value % 1 == 0 &amp;&amp; value &lt;= MAX_SAFE_INTEGER;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function isArguments(value) &#123;</span><br><span class=\"line\">  var length = isObjectLike(value) ? value.length : undefined;</span><br><span class=\"line\">  return isLength(length) &amp;&amp; objToString.call(value) == argsTag;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// Fallback for environments without a `toStringTag` for `arguments` objects.</span><br><span class=\"line\">if (!support.argsTag) &#123;</span><br><span class=\"line\">  isArguments = function(value) &#123;</span><br><span class=\"line\">    var length = isObjectLike(value) ? value.length : undefined;</span><br><span class=\"line\">    return isLength(length) &amp;&amp; hasOwnProperty.call(value, &apos;callee&apos;) &amp;&amp;</span><br><span class=\"line\">      !propertyIsEnumerable.call(value, &apos;callee&apos;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对比两种实现，es5-shim仅仅只是做了arguments对象特有的属性检测，而lodash的实现不论是从代码可读性还是严谨方面来考察都是极其完美的。</p>\n"},{"title":"空格","date":"2016-09-08T16:00:00.000Z","_content":"\nUnicode定义的空格符号如下：\n\n[\\u0020\\u00A0\\u1680\\u180E\\u2002-\\u200D\\u202F\\u205F\\u2060\\u3000\\uFEFF]\n\n以下几种空格可以重点留意：\n- \\u0020为普通半角空格\n- \\u00A0为不换行的空格，对应HTML的&nbsp;(No-Break Space)\n- \\u200B为零宽空格（Zero Width Space）\n- \\uFEFF为零宽不换行空格（Zero Width No-Break Space）\n\n其中\\u2060为Unicode 3.2新增。\n\n在移除字符串首尾空白时，我们看看TJ的[trim](https://www.npmjs.com/package/trim):\n\n``` js\nfunction trim(str){\n  return str.replace(/^\\s*|\\s*$/g, '');\n}\n```\n\n别看这个库如此简单，但是每天的下载量达到1W+。先不说其它方面的BUG，就正则来说问题就不少。\n`\\s`匹配一个空白字符，等价于：\n\n[\\f\\n\\r\\t\\v\\u00A0\\u0020\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]\n\n可以看出很多第三方库在移除首尾空白时都没有考虑周全。\n下面我们看看浏览器内置的trim又是怎样的？\n\n示例代码：\n\n``` js\nvar s = '\\u0020\\u00A0\\u1680\\u180E\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u202F\\u205F\\u2060\\u3000\\uFEFF'\nfor (var i = 0; i < s.length; i += 1) {\n  if (s[i].trim().length > 0) {\n    console.log('\\\\u' + s.charCodeAt(i).toString(16))\n  }\n}\n```\n\n输出结果如下：\n- \\u200b\n- \\u200c\n- \\u200d\n- \\u2060\n\n结论很明朗：浏览器内置的trim也并非100%准确，所以我推荐在严格场景下面使用自定义的trim函数。\n\n[查看在线示例](https://repl.it/DZhG/2)\n## 参考链接\n- [维基百科 - 空格](https://zh.wikipedia.org/wiki/%E7%A9%BA%E6%A0%BC)\n","source":"_posts/space.md","raw":"---\ntitle: 空格\ndate: 2016-09-09\ntags: JavaScript\n---\n\nUnicode定义的空格符号如下：\n\n[\\u0020\\u00A0\\u1680\\u180E\\u2002-\\u200D\\u202F\\u205F\\u2060\\u3000\\uFEFF]\n\n以下几种空格可以重点留意：\n- \\u0020为普通半角空格\n- \\u00A0为不换行的空格，对应HTML的&nbsp;(No-Break Space)\n- \\u200B为零宽空格（Zero Width Space）\n- \\uFEFF为零宽不换行空格（Zero Width No-Break Space）\n\n其中\\u2060为Unicode 3.2新增。\n\n在移除字符串首尾空白时，我们看看TJ的[trim](https://www.npmjs.com/package/trim):\n\n``` js\nfunction trim(str){\n  return str.replace(/^\\s*|\\s*$/g, '');\n}\n```\n\n别看这个库如此简单，但是每天的下载量达到1W+。先不说其它方面的BUG，就正则来说问题就不少。\n`\\s`匹配一个空白字符，等价于：\n\n[\\f\\n\\r\\t\\v\\u00A0\\u0020\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]\n\n可以看出很多第三方库在移除首尾空白时都没有考虑周全。\n下面我们看看浏览器内置的trim又是怎样的？\n\n示例代码：\n\n``` js\nvar s = '\\u0020\\u00A0\\u1680\\u180E\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u202F\\u205F\\u2060\\u3000\\uFEFF'\nfor (var i = 0; i < s.length; i += 1) {\n  if (s[i].trim().length > 0) {\n    console.log('\\\\u' + s.charCodeAt(i).toString(16))\n  }\n}\n```\n\n输出结果如下：\n- \\u200b\n- \\u200c\n- \\u200d\n- \\u2060\n\n结论很明朗：浏览器内置的trim也并非100%准确，所以我推荐在严格场景下面使用自定义的trim函数。\n\n[查看在线示例](https://repl.it/DZhG/2)\n## 参考链接\n- [维基百科 - 空格](https://zh.wikipedia.org/wiki/%E7%A9%BA%E6%A0%BC)\n","slug":"space","published":1,"updated":"2017-12-22T15:13:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbi2gsyk000iov952dp9z1xd","content":"<p>Unicode定义的空格符号如下：</p>\n<p>[\\u0020\\u00A0\\u1680\\u180E\\u2002-\\u200D\\u202F\\u205F\\u2060\\u3000\\uFEFF]</p>\n<p>以下几种空格可以重点留意：</p>\n<ul>\n<li>\\u0020为普通半角空格</li>\n<li>\\u00A0为不换行的空格，对应HTML的&nbsp;(No-Break Space)</li>\n<li>\\u200B为零宽空格（Zero Width Space）</li>\n<li>\\uFEFF为零宽不换行空格（Zero Width No-Break Space）</li>\n</ul>\n<p>其中\\u2060为Unicode 3.2新增。</p>\n<p>在移除字符串首尾空白时，我们看看TJ的<a href=\"https://www.npmjs.com/package/trim\" target=\"_blank\" rel=\"noopener\">trim</a>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trim</span>(<span class=\"params\">str</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/^\\s*|\\s*$/g</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>别看这个库如此简单，但是每天的下载量达到1W+。先不说其它方面的BUG，就正则来说问题就不少。<br><code>\\s</code>匹配一个空白字符，等价于：</p>\n<p>[\\f\\n\\r\\t\\v\\u00A0\\u0020\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]</p>\n<p>可以看出很多第三方库在移除首尾空白时都没有考虑周全。<br>下面我们看看浏览器内置的trim又是怎样的？</p>\n<p>示例代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'\\u0020\\u00A0\\u1680\\u180E\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u202F\\u205F\\u2060\\u3000\\uFEFF'</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (s[i].trim().length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'\\\\u'</span> + s.charCodeAt(i).toString(<span class=\"number\">16</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：</p>\n<ul>\n<li>\\u200b</li>\n<li>\\u200c</li>\n<li>\\u200d</li>\n<li>\\u2060</li>\n</ul>\n<p>结论很明朗：浏览器内置的trim也并非100%准确，所以我推荐在严格场景下面使用自定义的trim函数。</p>\n<p><a href=\"https://repl.it/DZhG/2\" target=\"_blank\" rel=\"noopener\">查看在线示例</a></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E7%A9%BA%E6%A0%BC\" target=\"_blank\" rel=\"noopener\">维基百科 - 空格</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Unicode定义的空格符号如下：</p>\n<p>[\\u0020\\u00A0\\u1680\\u180E\\u2002-\\u200D\\u202F\\u205F\\u2060\\u3000\\uFEFF]</p>\n<p>以下几种空格可以重点留意：</p>\n<ul>\n<li>\\u0020为普通半角空格</li>\n<li>\\u00A0为不换行的空格，对应HTML的&nbsp;(No-Break Space)</li>\n<li>\\u200B为零宽空格（Zero Width Space）</li>\n<li>\\uFEFF为零宽不换行空格（Zero Width No-Break Space）</li>\n</ul>\n<p>其中\\u2060为Unicode 3.2新增。</p>\n<p>在移除字符串首尾空白时，我们看看TJ的<a href=\"https://www.npmjs.com/package/trim\" target=\"_blank\" rel=\"noopener\">trim</a>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trim</span>(<span class=\"params\">str</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/^\\s*|\\s*$/g</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>别看这个库如此简单，但是每天的下载量达到1W+。先不说其它方面的BUG，就正则来说问题就不少。<br><code>\\s</code>匹配一个空白字符，等价于：</p>\n<p>[\\f\\n\\r\\t\\v\\u00A0\\u0020\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]</p>\n<p>可以看出很多第三方库在移除首尾空白时都没有考虑周全。<br>下面我们看看浏览器内置的trim又是怎样的？</p>\n<p>示例代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'\\u0020\\u00A0\\u1680\\u180E\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200B\\u200C\\u200D\\u202F\\u205F\\u2060\\u3000\\uFEFF'</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (s[i].trim().length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'\\\\u'</span> + s.charCodeAt(i).toString(<span class=\"number\">16</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：</p>\n<ul>\n<li>\\u200b</li>\n<li>\\u200c</li>\n<li>\\u200d</li>\n<li>\\u2060</li>\n</ul>\n<p>结论很明朗：浏览器内置的trim也并非100%准确，所以我推荐在严格场景下面使用自定义的trim函数。</p>\n<p><a href=\"https://repl.it/DZhG/2\" target=\"_blank\" rel=\"noopener\">查看在线示例</a></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E7%A9%BA%E6%A0%BC\" target=\"_blank\" rel=\"noopener\">维基百科 - 空格</a></li>\n</ul>\n"},{"title":"violet - 值得一试的写作同步小助手","date":"2016-06-17T16:00:00.000Z","_content":"## 她是什么\n\n_violet 是一款面向写作爱好者的客户端同步工具。_\n\n对于喜欢写点东西的人来说，一般都会活跃在多个写作平台（`知乎`、`简书`、`Medium`、`GitHub`）。\n往往我们倾向于在多个平台中选择一个作为主创平台。\n\n**为什么只能选择一个平台？**\n\n因为作品在各个写作平台之间同步异常麻烦。\n\n> 各个平台编辑器支持能力不一致，人的精力有限，你不可能在每个平台上使用不同的编辑器都发布一遍。\n> 即时可以复制粘贴，但大多数时候粘贴出的格式都并非如你所愿（尤其是代码）。\n> 随之而来的格式调整会花费大量时间，慢慢地你失去了同步多个平台的动力。\n> 作品发布以后频繁的小幅更新也慢慢地在摧毁你的创作动力。\n\n**而罪魁祸首仅仅是缺少一款得心应手的工具！**\n\n从今天起就不要为这些问题担忧了，**violet** 能帮你解除后顾之忧。\n## 功能\n- 统一使用流行的写作语言 **Markdown**\n- 在各大写作平台之间同步作品（**一次编写，处处发布**）\n## 特点\n- 跨平台，兼容Windows / Mac / Linux\n- 零网络请求，零客户端数据上报（写作平台接口除外）\n- 敏感信息加密存储在本地\n- [源代码开源](https://github.com/simongfxu/violet)\n## 支持写作平台\n- 知乎\n- 简书\n- Medium\n- GitHub\n- 其它(敬请期待)\n## 功能支持\n\n功能支持请前往：[violet需求调查](https://jinshuju.net/f/2yctZ5?x_field_1=github)\n\n产品论坛和意见反馈请前往：[violet客户支持服务平台](https://violet.kf5.com/hc/)\n## DEMO\n\n本文链接：\n- [知乎](https://zhuanlan.zhihu.com/p/21376171?refer=reduxis)\n- [简书](http://www.jianshu.com/p/d93ca8b61355)\n- [GitHub](https://github.com/simongfxu/simongfxu.github.com/issues/101)\n- [Medium](https://medium.com/@damngoto/violet-%E5%80%BC%E5%BE%97%E4%B8%80%E8%AF%95%E7%9A%84%E5%86%99%E4%BD%9C%E5%90%8C%E6%AD%A5%E5%B0%8F%E5%8A%A9%E6%89%8B-2fbd2799cea4)\n\n截图：\n\n![Linux](https://pic2.zhimg.com/153f8d8cda1d4b7b95e53e3375c26fc3_r.png)\n## 名称来源\n\n我初生的女儿叫 **小紫**\n## License\n\nMIT\n","source":"_posts/violet.md","raw":"---\ntitle: violet - 值得一试的写作同步小助手\ndate: 2016-06-18\ntags: React\n---\n## 她是什么\n\n_violet 是一款面向写作爱好者的客户端同步工具。_\n\n对于喜欢写点东西的人来说，一般都会活跃在多个写作平台（`知乎`、`简书`、`Medium`、`GitHub`）。\n往往我们倾向于在多个平台中选择一个作为主创平台。\n\n**为什么只能选择一个平台？**\n\n因为作品在各个写作平台之间同步异常麻烦。\n\n> 各个平台编辑器支持能力不一致，人的精力有限，你不可能在每个平台上使用不同的编辑器都发布一遍。\n> 即时可以复制粘贴，但大多数时候粘贴出的格式都并非如你所愿（尤其是代码）。\n> 随之而来的格式调整会花费大量时间，慢慢地你失去了同步多个平台的动力。\n> 作品发布以后频繁的小幅更新也慢慢地在摧毁你的创作动力。\n\n**而罪魁祸首仅仅是缺少一款得心应手的工具！**\n\n从今天起就不要为这些问题担忧了，**violet** 能帮你解除后顾之忧。\n## 功能\n- 统一使用流行的写作语言 **Markdown**\n- 在各大写作平台之间同步作品（**一次编写，处处发布**）\n## 特点\n- 跨平台，兼容Windows / Mac / Linux\n- 零网络请求，零客户端数据上报（写作平台接口除外）\n- 敏感信息加密存储在本地\n- [源代码开源](https://github.com/simongfxu/violet)\n## 支持写作平台\n- 知乎\n- 简书\n- Medium\n- GitHub\n- 其它(敬请期待)\n## 功能支持\n\n功能支持请前往：[violet需求调查](https://jinshuju.net/f/2yctZ5?x_field_1=github)\n\n产品论坛和意见反馈请前往：[violet客户支持服务平台](https://violet.kf5.com/hc/)\n## DEMO\n\n本文链接：\n- [知乎](https://zhuanlan.zhihu.com/p/21376171?refer=reduxis)\n- [简书](http://www.jianshu.com/p/d93ca8b61355)\n- [GitHub](https://github.com/simongfxu/simongfxu.github.com/issues/101)\n- [Medium](https://medium.com/@damngoto/violet-%E5%80%BC%E5%BE%97%E4%B8%80%E8%AF%95%E7%9A%84%E5%86%99%E4%BD%9C%E5%90%8C%E6%AD%A5%E5%B0%8F%E5%8A%A9%E6%89%8B-2fbd2799cea4)\n\n截图：\n\n![Linux](https://pic2.zhimg.com/153f8d8cda1d4b7b95e53e3375c26fc3_r.png)\n## 名称来源\n\n我初生的女儿叫 **小紫**\n## License\n\nMIT\n","slug":"violet","published":1,"updated":"2017-12-22T15:12:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbi2gsyo000lov95vwa9v85o","content":"<h2 id=\"她是什么\"><a href=\"#她是什么\" class=\"headerlink\" title=\"她是什么\"></a>她是什么</h2><p><em>violet 是一款面向写作爱好者的客户端同步工具。</em></p>\n<p>对于喜欢写点东西的人来说，一般都会活跃在多个写作平台（<code>知乎</code>、<code>简书</code>、<code>Medium</code>、<code>GitHub</code>）。<br>往往我们倾向于在多个平台中选择一个作为主创平台。</p>\n<p><strong>为什么只能选择一个平台？</strong></p>\n<p>因为作品在各个写作平台之间同步异常麻烦。</p>\n<blockquote>\n<p>各个平台编辑器支持能力不一致，人的精力有限，你不可能在每个平台上使用不同的编辑器都发布一遍。<br>即时可以复制粘贴，但大多数时候粘贴出的格式都并非如你所愿（尤其是代码）。<br>随之而来的格式调整会花费大量时间，慢慢地你失去了同步多个平台的动力。<br>作品发布以后频繁的小幅更新也慢慢地在摧毁你的创作动力。</p>\n</blockquote>\n<p><strong>而罪魁祸首仅仅是缺少一款得心应手的工具！</strong></p>\n<p>从今天起就不要为这些问题担忧了，<strong>violet</strong> 能帮你解除后顾之忧。</p>\n<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><ul>\n<li>统一使用流行的写作语言 <strong>Markdown</strong></li>\n<li>在各大写作平台之间同步作品（<strong>一次编写，处处发布</strong>）<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2></li>\n<li>跨平台，兼容Windows / Mac / Linux</li>\n<li>零网络请求，零客户端数据上报（写作平台接口除外）</li>\n<li>敏感信息加密存储在本地</li>\n<li><a href=\"https://github.com/simongfxu/violet\" target=\"_blank\" rel=\"noopener\">源代码开源</a><h2 id=\"支持写作平台\"><a href=\"#支持写作平台\" class=\"headerlink\" title=\"支持写作平台\"></a>支持写作平台</h2></li>\n<li>知乎</li>\n<li>简书</li>\n<li>Medium</li>\n<li>GitHub</li>\n<li>其它(敬请期待)<h2 id=\"功能支持\"><a href=\"#功能支持\" class=\"headerlink\" title=\"功能支持\"></a>功能支持</h2></li>\n</ul>\n<p>功能支持请前往：<a href=\"https://jinshuju.net/f/2yctZ5?x_field_1=github\" target=\"_blank\" rel=\"noopener\">violet需求调查</a></p>\n<p>产品论坛和意见反馈请前往：<a href=\"https://violet.kf5.com/hc/\" target=\"_blank\" rel=\"noopener\">violet客户支持服务平台</a></p>\n<h2 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h2><p>本文链接：</p>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/21376171?refer=reduxis\" target=\"_blank\" rel=\"noopener\">知乎</a></li>\n<li><a href=\"http://www.jianshu.com/p/d93ca8b61355\" target=\"_blank\" rel=\"noopener\">简书</a></li>\n<li><a href=\"https://github.com/simongfxu/simongfxu.github.com/issues/101\" target=\"_blank\" rel=\"noopener\">GitHub</a></li>\n<li><a href=\"https://medium.com/@damngoto/violet-%E5%80%BC%E5%BE%97%E4%B8%80%E8%AF%95%E7%9A%84%E5%86%99%E4%BD%9C%E5%90%8C%E6%AD%A5%E5%B0%8F%E5%8A%A9%E6%89%8B-2fbd2799cea4\" target=\"_blank\" rel=\"noopener\">Medium</a></li>\n</ul>\n<p>截图：</p>\n<p><img src=\"https://pic2.zhimg.com/153f8d8cda1d4b7b95e53e3375c26fc3_r.png\" alt=\"Linux\"></p>\n<h2 id=\"名称来源\"><a href=\"#名称来源\" class=\"headerlink\" title=\"名称来源\"></a>名称来源</h2><p>我初生的女儿叫 <strong>小紫</strong></p>\n<h2 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h2><p>MIT</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"她是什么\"><a href=\"#她是什么\" class=\"headerlink\" title=\"她是什么\"></a>她是什么</h2><p><em>violet 是一款面向写作爱好者的客户端同步工具。</em></p>\n<p>对于喜欢写点东西的人来说，一般都会活跃在多个写作平台（<code>知乎</code>、<code>简书</code>、<code>Medium</code>、<code>GitHub</code>）。<br>往往我们倾向于在多个平台中选择一个作为主创平台。</p>\n<p><strong>为什么只能选择一个平台？</strong></p>\n<p>因为作品在各个写作平台之间同步异常麻烦。</p>\n<blockquote>\n<p>各个平台编辑器支持能力不一致，人的精力有限，你不可能在每个平台上使用不同的编辑器都发布一遍。<br>即时可以复制粘贴，但大多数时候粘贴出的格式都并非如你所愿（尤其是代码）。<br>随之而来的格式调整会花费大量时间，慢慢地你失去了同步多个平台的动力。<br>作品发布以后频繁的小幅更新也慢慢地在摧毁你的创作动力。</p>\n</blockquote>\n<p><strong>而罪魁祸首仅仅是缺少一款得心应手的工具！</strong></p>\n<p>从今天起就不要为这些问题担忧了，<strong>violet</strong> 能帮你解除后顾之忧。</p>\n<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><ul>\n<li>统一使用流行的写作语言 <strong>Markdown</strong></li>\n<li>在各大写作平台之间同步作品（<strong>一次编写，处处发布</strong>）<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2></li>\n<li>跨平台，兼容Windows / Mac / Linux</li>\n<li>零网络请求，零客户端数据上报（写作平台接口除外）</li>\n<li>敏感信息加密存储在本地</li>\n<li><a href=\"https://github.com/simongfxu/violet\" target=\"_blank\" rel=\"noopener\">源代码开源</a><h2 id=\"支持写作平台\"><a href=\"#支持写作平台\" class=\"headerlink\" title=\"支持写作平台\"></a>支持写作平台</h2></li>\n<li>知乎</li>\n<li>简书</li>\n<li>Medium</li>\n<li>GitHub</li>\n<li>其它(敬请期待)<h2 id=\"功能支持\"><a href=\"#功能支持\" class=\"headerlink\" title=\"功能支持\"></a>功能支持</h2></li>\n</ul>\n<p>功能支持请前往：<a href=\"https://jinshuju.net/f/2yctZ5?x_field_1=github\" target=\"_blank\" rel=\"noopener\">violet需求调查</a></p>\n<p>产品论坛和意见反馈请前往：<a href=\"https://violet.kf5.com/hc/\" target=\"_blank\" rel=\"noopener\">violet客户支持服务平台</a></p>\n<h2 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h2><p>本文链接：</p>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/21376171?refer=reduxis\" target=\"_blank\" rel=\"noopener\">知乎</a></li>\n<li><a href=\"http://www.jianshu.com/p/d93ca8b61355\" target=\"_blank\" rel=\"noopener\">简书</a></li>\n<li><a href=\"https://github.com/simongfxu/simongfxu.github.com/issues/101\" target=\"_blank\" rel=\"noopener\">GitHub</a></li>\n<li><a href=\"https://medium.com/@damngoto/violet-%E5%80%BC%E5%BE%97%E4%B8%80%E8%AF%95%E7%9A%84%E5%86%99%E4%BD%9C%E5%90%8C%E6%AD%A5%E5%B0%8F%E5%8A%A9%E6%89%8B-2fbd2799cea4\" target=\"_blank\" rel=\"noopener\">Medium</a></li>\n</ul>\n<p>截图：</p>\n<p><img src=\"https://pic2.zhimg.com/153f8d8cda1d4b7b95e53e3375c26fc3_r.png\" alt=\"Linux\"></p>\n<h2 id=\"名称来源\"><a href=\"#名称来源\" class=\"headerlink\" title=\"名称来源\"></a>名称来源</h2><p>我初生的女儿叫 <strong>小紫</strong></p>\n<h2 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h2><p>MIT</p>\n"},{"title":"使用SlimerJS将网页输出为PDF","date":"2016-06-28T16:00:00.000Z","_content":"\n本文主要介绍本人在项目实践中通过`SlimerJS`将网页输出为PDF文档的过程，生成的PDF文档中的文本是矢量的，可以选择复制。\n虽然网上也有一些类似的分享，但是并没有将整个过程中的可能遇到的坑以及在Web开发中的一些技术细节讲述的比较清楚。\n## 软件清单：\n- xvfb\n- gtk3\n- cups\n- firefox\n- slimerjs\n\n本文使用的操作系统版本为CentOS 7.2。\n## 安装xvfb\n\n关于xvfb的介绍可以查看[wiki](https://en.wikipedia.org/wiki/Xvfb)，简单点说它就是用于处理程序中与图形化相关的功能，但是它不会在屏幕上展示任何图形输出。\n安装以后可以使用**xvfb-run**命令来运行**headless slimerjs.**\n\n``` html\nyum install xorg-x11-server-Xvfb\n```\n## 安装Firefox\n\nSlimerJS依赖于Firefox，目前支持的版本号介于38~ 46，其它版本官方无法保证测试结果。\n所以不推荐安装大于46或者小于38的版本。\n\n``` html\nwget https://ftp.mozilla.org/pub/firefox/releases/46.0.1/linux-x86_64-EME-free/zh-CN/firefox-46.0.1.tar.bz2\ntar xjvf firefox-46.0.1.tar.bz2\n```\n\n注意这里我们下载Firefox的版本号为64的[EME](https://wiki.mozilla.org/Media/EME)版本，普通版本在渲染复杂网页时可能会出现莫名的引擎级别错误。\n## 安装GTK3\n\n由于Firefox 46[依赖](https://www.mozilla.org/en-US/firefox/46.0/system-requirements/)于GTK3，所以这里我们需要安装GTK3。\n另外如果你的操作系统版本为CentOS 6.x，那么我推荐你[放弃安装GTK3](http://itvision.altervista.org/compiling-and-installing-gtk3-in-centos6.html)，而是直接升级系统。\n\n``` html\nyum install gtk3-devel\n```\n## 安装CUPS\n\n[CUPS](https://www.cups.org/)是由苹果开发的通用Unix打印系统，如果没有安装CUPS，SlimerJS将网页渲染为PDF的时候将会[挂起](https://docs.slimerjs.org/current/faq.html#on-linux-pdf-rendering-hangs-slimerjs)。\n\n``` html\nyum install cups\n```\n## 安装SlimerJS\n\n``` html\nwget http://download.slimerjs.org/releases/0.10.0/slimerjs-0.10.0.zip\nunzip slimerjs-0.10.0.zip\n```\n## 设置环境变量\n\n``` html\n// 这里设置为firefox文件夹下的的firefox可执行文件的路径\nexport SLIMERJSLAUNCHER=PATH_TO_FIREFOX\n```\n## 开始执行\n\n``` html\ncd PATH_TO_SLIMERJS\nxvfb-run ./slimerjs SCRIPT_PATH HTTP_PAGE_URL OUTPUT_FILENAME\n```\n\n另外如果执行没有正常运行，可以加上—debug参数\n\n``` html\nxvfb-run ./slimerjs --debug test.js http://www.qq.com/ test.pdf\n```\n## 参考代码\n\n``` javascript\nvar page = require('webpage').create()\nvar system = require('system')\n\nif (system.args.length !== 3) {\n  console.log('Arguments error: xvfb-run ./slimerjs SCRIPT_PATH HTTP_PAGE_URL OUTPUT_FILENAME')\n  slimer.exit()\n} else {\n  var url = system.args[1]\n  var renderPath = system.args[2]\n\n  console.log('Page url is ' + url)\n  console.log('Output path is ' + renderPath)\n\n  page.paperSize = {\n    // magic number in my project\n    width: '1500px',\n    height: '1038px',\n    shrinkToFit: true,\n    printBGColors: true,\n    printBGImages: true\n  }\n\n  page.onLoadFinished = function() {\n    console.log('Finish loading page')\n    // 有些时候分页不理想，需要删除一些节点\n    page.evaluate(function() {\n      var nodes = document.querySelectorAll('.bottom-line')\n      for(var i = 0; i< nodes.length; i += 1) {\n        nodes[i].parentNode.removeChild(nodes[i])\n      }\n    })\n    console.log('Start rendering')\n    page.render(renderPath)\n    console.log('Finish rendering')\n    slimer.exit()\n  }\n\n  console.log('Opening page now ...')\n  page.open(url)\n}\n```\n## 字体\n\n由于服务部署在Linux服务器上，网页渲染使用的字体与Windows和macOS区别还是很大的，比如Windows的微软雅黑在Linux是无法使用的。\n另外在安装字体上也有两种选择，第一是直接安装在服务器上，第二是作为Web Fonts从网页中引入。\n## Flex布局\n\n早先我们尝试使用PhantomJS来完成此工作，虽然网上有说2.x支持Flex布局，但是我们的实践结果是不支持。SlimerJS在Flex布局上支持的很好，无需任何额外工作。\n## Canvas绘制\n\n我们的网页使用了ECharts来进行图表绘制，ECharts底层使用了canvas来绘制图表。\nPhantomJS输出的PDF在这方面支持很差，Stacked Column中莫名的出现很多空白间隙。SlimerJS的表现要好得多，不过有些淡虚线比实际要粗一些，色彩也深一些。\n## 文档分页\n\n如果希望输出的PDF能够支持分页输出（方便分页打印），需要设置paperSize的Height来确定每页pdf的高度。\n不过这里也是有坑的，每页PDF高度会有几个像素的差距，导致会多出一个空白页。\n## CSS适配\n\n渲染PDF的时候，浏览器进入打印模式，如果你没有专门适配样式，输出效果会很差。很多元素的背景颜色/文本颜色/背景图片不会展示出来。\n对于PhantomJS，网上有讨论说需要加上如下样式（我本人并未实践过此方案）：\n\n``` css\n@media print {\n  body {\n     /*https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-print-color-adjust*/\n     -webkit-print-color-adjust: exact;\n  }\n}\n```\n\n对于SlimerJS，虽然paperSize存在相关设置（printBGColors/printBGImages），但是文本颜色似乎无法设置。所以我推荐在编写CSS的时候注意如下细节：\n- 将所有背景图片转换为Base64字符串直接在css中引入（幸好有webpack）\n- 所有设置元素文本颜色和背景颜色的样式需要兼容打印模式\n- 文本颜色相关的设置不支持inherited，这点尤其注意\n\n样例代码如下：\n\n``` css\n.someClassName {\n  background-color:red;\n  color: #FFF;\n}\n\n@media print {\n  .someClassName {\n    background-color:red !important;\n    color: #FFF !important;\n  }\n}\n```\n## 最后的忠告\n\n_不要寄希望于输出的PDF与网页中展示效果100%一致，几乎不可能（尤其是网页内容相对比较复杂的时候），最终效果或多或少都会有些瑕疵。_\n","source":"_posts/slimerjs.md","raw":"---\ntitle: 使用SlimerJS将网页输出为PDF\ndate: 2016-06-29\ntags: SlimerJS\n---\n\n本文主要介绍本人在项目实践中通过`SlimerJS`将网页输出为PDF文档的过程，生成的PDF文档中的文本是矢量的，可以选择复制。\n虽然网上也有一些类似的分享，但是并没有将整个过程中的可能遇到的坑以及在Web开发中的一些技术细节讲述的比较清楚。\n## 软件清单：\n- xvfb\n- gtk3\n- cups\n- firefox\n- slimerjs\n\n本文使用的操作系统版本为CentOS 7.2。\n## 安装xvfb\n\n关于xvfb的介绍可以查看[wiki](https://en.wikipedia.org/wiki/Xvfb)，简单点说它就是用于处理程序中与图形化相关的功能，但是它不会在屏幕上展示任何图形输出。\n安装以后可以使用**xvfb-run**命令来运行**headless slimerjs.**\n\n``` html\nyum install xorg-x11-server-Xvfb\n```\n## 安装Firefox\n\nSlimerJS依赖于Firefox，目前支持的版本号介于38~ 46，其它版本官方无法保证测试结果。\n所以不推荐安装大于46或者小于38的版本。\n\n``` html\nwget https://ftp.mozilla.org/pub/firefox/releases/46.0.1/linux-x86_64-EME-free/zh-CN/firefox-46.0.1.tar.bz2\ntar xjvf firefox-46.0.1.tar.bz2\n```\n\n注意这里我们下载Firefox的版本号为64的[EME](https://wiki.mozilla.org/Media/EME)版本，普通版本在渲染复杂网页时可能会出现莫名的引擎级别错误。\n## 安装GTK3\n\n由于Firefox 46[依赖](https://www.mozilla.org/en-US/firefox/46.0/system-requirements/)于GTK3，所以这里我们需要安装GTK3。\n另外如果你的操作系统版本为CentOS 6.x，那么我推荐你[放弃安装GTK3](http://itvision.altervista.org/compiling-and-installing-gtk3-in-centos6.html)，而是直接升级系统。\n\n``` html\nyum install gtk3-devel\n```\n## 安装CUPS\n\n[CUPS](https://www.cups.org/)是由苹果开发的通用Unix打印系统，如果没有安装CUPS，SlimerJS将网页渲染为PDF的时候将会[挂起](https://docs.slimerjs.org/current/faq.html#on-linux-pdf-rendering-hangs-slimerjs)。\n\n``` html\nyum install cups\n```\n## 安装SlimerJS\n\n``` html\nwget http://download.slimerjs.org/releases/0.10.0/slimerjs-0.10.0.zip\nunzip slimerjs-0.10.0.zip\n```\n## 设置环境变量\n\n``` html\n// 这里设置为firefox文件夹下的的firefox可执行文件的路径\nexport SLIMERJSLAUNCHER=PATH_TO_FIREFOX\n```\n## 开始执行\n\n``` html\ncd PATH_TO_SLIMERJS\nxvfb-run ./slimerjs SCRIPT_PATH HTTP_PAGE_URL OUTPUT_FILENAME\n```\n\n另外如果执行没有正常运行，可以加上—debug参数\n\n``` html\nxvfb-run ./slimerjs --debug test.js http://www.qq.com/ test.pdf\n```\n## 参考代码\n\n``` javascript\nvar page = require('webpage').create()\nvar system = require('system')\n\nif (system.args.length !== 3) {\n  console.log('Arguments error: xvfb-run ./slimerjs SCRIPT_PATH HTTP_PAGE_URL OUTPUT_FILENAME')\n  slimer.exit()\n} else {\n  var url = system.args[1]\n  var renderPath = system.args[2]\n\n  console.log('Page url is ' + url)\n  console.log('Output path is ' + renderPath)\n\n  page.paperSize = {\n    // magic number in my project\n    width: '1500px',\n    height: '1038px',\n    shrinkToFit: true,\n    printBGColors: true,\n    printBGImages: true\n  }\n\n  page.onLoadFinished = function() {\n    console.log('Finish loading page')\n    // 有些时候分页不理想，需要删除一些节点\n    page.evaluate(function() {\n      var nodes = document.querySelectorAll('.bottom-line')\n      for(var i = 0; i< nodes.length; i += 1) {\n        nodes[i].parentNode.removeChild(nodes[i])\n      }\n    })\n    console.log('Start rendering')\n    page.render(renderPath)\n    console.log('Finish rendering')\n    slimer.exit()\n  }\n\n  console.log('Opening page now ...')\n  page.open(url)\n}\n```\n## 字体\n\n由于服务部署在Linux服务器上，网页渲染使用的字体与Windows和macOS区别还是很大的，比如Windows的微软雅黑在Linux是无法使用的。\n另外在安装字体上也有两种选择，第一是直接安装在服务器上，第二是作为Web Fonts从网页中引入。\n## Flex布局\n\n早先我们尝试使用PhantomJS来完成此工作，虽然网上有说2.x支持Flex布局，但是我们的实践结果是不支持。SlimerJS在Flex布局上支持的很好，无需任何额外工作。\n## Canvas绘制\n\n我们的网页使用了ECharts来进行图表绘制，ECharts底层使用了canvas来绘制图表。\nPhantomJS输出的PDF在这方面支持很差，Stacked Column中莫名的出现很多空白间隙。SlimerJS的表现要好得多，不过有些淡虚线比实际要粗一些，色彩也深一些。\n## 文档分页\n\n如果希望输出的PDF能够支持分页输出（方便分页打印），需要设置paperSize的Height来确定每页pdf的高度。\n不过这里也是有坑的，每页PDF高度会有几个像素的差距，导致会多出一个空白页。\n## CSS适配\n\n渲染PDF的时候，浏览器进入打印模式，如果你没有专门适配样式，输出效果会很差。很多元素的背景颜色/文本颜色/背景图片不会展示出来。\n对于PhantomJS，网上有讨论说需要加上如下样式（我本人并未实践过此方案）：\n\n``` css\n@media print {\n  body {\n     /*https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-print-color-adjust*/\n     -webkit-print-color-adjust: exact;\n  }\n}\n```\n\n对于SlimerJS，虽然paperSize存在相关设置（printBGColors/printBGImages），但是文本颜色似乎无法设置。所以我推荐在编写CSS的时候注意如下细节：\n- 将所有背景图片转换为Base64字符串直接在css中引入（幸好有webpack）\n- 所有设置元素文本颜色和背景颜色的样式需要兼容打印模式\n- 文本颜色相关的设置不支持inherited，这点尤其注意\n\n样例代码如下：\n\n``` css\n.someClassName {\n  background-color:red;\n  color: #FFF;\n}\n\n@media print {\n  .someClassName {\n    background-color:red !important;\n    color: #FFF !important;\n  }\n}\n```\n## 最后的忠告\n\n_不要寄希望于输出的PDF与网页中展示效果100%一致，几乎不可能（尤其是网页内容相对比较复杂的时候），最终效果或多或少都会有些瑕疵。_\n","slug":"slimerjs","published":1,"updated":"2017-12-22T15:18:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbi2gsyq000nov951q40ia1q","content":"<p>本文主要介绍本人在项目实践中通过<code>SlimerJS</code>将网页输出为PDF文档的过程，生成的PDF文档中的文本是矢量的，可以选择复制。<br>虽然网上也有一些类似的分享，但是并没有将整个过程中的可能遇到的坑以及在Web开发中的一些技术细节讲述的比较清楚。</p>\n<h2 id=\"软件清单：\"><a href=\"#软件清单：\" class=\"headerlink\" title=\"软件清单：\"></a>软件清单：</h2><ul>\n<li>xvfb</li>\n<li>gtk3</li>\n<li>cups</li>\n<li>firefox</li>\n<li>slimerjs</li>\n</ul>\n<p>本文使用的操作系统版本为CentOS 7.2。</p>\n<h2 id=\"安装xvfb\"><a href=\"#安装xvfb\" class=\"headerlink\" title=\"安装xvfb\"></a>安装xvfb</h2><p>关于xvfb的介绍可以查看<a href=\"https://en.wikipedia.org/wiki/Xvfb\" target=\"_blank\" rel=\"noopener\">wiki</a>，简单点说它就是用于处理程序中与图形化相关的功能，但是它不会在屏幕上展示任何图形输出。<br>安装以后可以使用<strong>xvfb-run</strong>命令来运行<strong>headless slimerjs.</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install xorg-x11-server-Xvfb</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装Firefox\"><a href=\"#安装Firefox\" class=\"headerlink\" title=\"安装Firefox\"></a>安装Firefox</h2><p>SlimerJS依赖于Firefox，目前支持的版本号介于38~ 46，其它版本官方无法保证测试结果。<br>所以不推荐安装大于46或者小于38的版本。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://ftp.mozilla.org/pub/firefox/releases/46.0.1/linux-x86_64-EME-free/zh-CN/firefox-46.0.1.tar.bz2</span><br><span class=\"line\">tar xjvf firefox-46.0.1.tar.bz2</span><br></pre></td></tr></table></figure>\n<p>注意这里我们下载Firefox的版本号为64的<a href=\"https://wiki.mozilla.org/Media/EME\" target=\"_blank\" rel=\"noopener\">EME</a>版本，普通版本在渲染复杂网页时可能会出现莫名的引擎级别错误。</p>\n<h2 id=\"安装GTK3\"><a href=\"#安装GTK3\" class=\"headerlink\" title=\"安装GTK3\"></a>安装GTK3</h2><p>由于Firefox 46<a href=\"https://www.mozilla.org/en-US/firefox/46.0/system-requirements/\" target=\"_blank\" rel=\"noopener\">依赖</a>于GTK3，所以这里我们需要安装GTK3。<br>另外如果你的操作系统版本为CentOS 6.x，那么我推荐你<a href=\"http://itvision.altervista.org/compiling-and-installing-gtk3-in-centos6.html\" target=\"_blank\" rel=\"noopener\">放弃安装GTK3</a>，而是直接升级系统。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gtk3-devel</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装CUPS\"><a href=\"#安装CUPS\" class=\"headerlink\" title=\"安装CUPS\"></a>安装CUPS</h2><p><a href=\"https://www.cups.org/\" target=\"_blank\" rel=\"noopener\">CUPS</a>是由苹果开发的通用Unix打印系统，如果没有安装CUPS，SlimerJS将网页渲染为PDF的时候将会<a href=\"https://docs.slimerjs.org/current/faq.html#on-linux-pdf-rendering-hangs-slimerjs\" target=\"_blank\" rel=\"noopener\">挂起</a>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install cups</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装SlimerJS\"><a href=\"#安装SlimerJS\" class=\"headerlink\" title=\"安装SlimerJS\"></a>安装SlimerJS</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.slimerjs.org/releases/0.10.0/slimerjs-0.10.0.zip</span><br><span class=\"line\">unzip slimerjs-0.10.0.zip</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 这里设置为firefox文件夹下的的firefox可执行文件的路径</span><br><span class=\"line\">export SLIMERJSLAUNCHER=PATH_TO_FIREFOX</span><br></pre></td></tr></table></figure>\n<h2 id=\"开始执行\"><a href=\"#开始执行\" class=\"headerlink\" title=\"开始执行\"></a>开始执行</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd PATH_TO_SLIMERJS</span><br><span class=\"line\">xvfb-run ./slimerjs SCRIPT_PATH HTTP_PAGE_URL OUTPUT_FILENAME</span><br></pre></td></tr></table></figure>\n<p>另外如果执行没有正常运行，可以加上—debug参数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xvfb-run ./slimerjs --debug test.js http://www.qq.com/ test.pdf</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考代码\"><a href=\"#参考代码\" class=\"headerlink\" title=\"参考代码\"></a>参考代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> page = <span class=\"built_in\">require</span>(<span class=\"string\">'webpage'</span>).create()</span><br><span class=\"line\"><span class=\"keyword\">var</span> system = <span class=\"built_in\">require</span>(<span class=\"string\">'system'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (system.args.length !== <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Arguments error: xvfb-run ./slimerjs SCRIPT_PATH HTTP_PAGE_URL OUTPUT_FILENAME'</span>)</span><br><span class=\"line\">  slimer.exit()</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> url = system.args[<span class=\"number\">1</span>]</span><br><span class=\"line\">  <span class=\"keyword\">var</span> renderPath = system.args[<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Page url is '</span> + url)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Output path is '</span> + renderPath)</span><br><span class=\"line\"></span><br><span class=\"line\">  page.paperSize = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// magic number in my project</span></span><br><span class=\"line\">    width: <span class=\"string\">'1500px'</span>,</span><br><span class=\"line\">    height: <span class=\"string\">'1038px'</span>,</span><br><span class=\"line\">    shrinkToFit: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    printBGColors: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    printBGImages: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  page.onLoadFinished = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Finish loading page'</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 有些时候分页不理想，需要删除一些节点</span></span><br><span class=\"line\">    page.evaluate(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> nodes = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.bottom-line'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i&lt; nodes.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        nodes[i].parentNode.removeChild(nodes[i])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Start rendering'</span>)</span><br><span class=\"line\">    page.render(renderPath)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Finish rendering'</span>)</span><br><span class=\"line\">    slimer.exit()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Opening page now ...'</span>)</span><br><span class=\"line\">  page.open(url)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h2><p>由于服务部署在Linux服务器上，网页渲染使用的字体与Windows和macOS区别还是很大的，比如Windows的微软雅黑在Linux是无法使用的。<br>另外在安装字体上也有两种选择，第一是直接安装在服务器上，第二是作为Web Fonts从网页中引入。</p>\n<h2 id=\"Flex布局\"><a href=\"#Flex布局\" class=\"headerlink\" title=\"Flex布局\"></a>Flex布局</h2><p>早先我们尝试使用PhantomJS来完成此工作，虽然网上有说2.x支持Flex布局，但是我们的实践结果是不支持。SlimerJS在Flex布局上支持的很好，无需任何额外工作。</p>\n<h2 id=\"Canvas绘制\"><a href=\"#Canvas绘制\" class=\"headerlink\" title=\"Canvas绘制\"></a>Canvas绘制</h2><p>我们的网页使用了ECharts来进行图表绘制，ECharts底层使用了canvas来绘制图表。<br>PhantomJS输出的PDF在这方面支持很差，Stacked Column中莫名的出现很多空白间隙。SlimerJS的表现要好得多，不过有些淡虚线比实际要粗一些，色彩也深一些。</p>\n<h2 id=\"文档分页\"><a href=\"#文档分页\" class=\"headerlink\" title=\"文档分页\"></a>文档分页</h2><p>如果希望输出的PDF能够支持分页输出（方便分页打印），需要设置paperSize的Height来确定每页pdf的高度。<br>不过这里也是有坑的，每页PDF高度会有几个像素的差距，导致会多出一个空白页。</p>\n<h2 id=\"CSS适配\"><a href=\"#CSS适配\" class=\"headerlink\" title=\"CSS适配\"></a>CSS适配</h2><p>渲染PDF的时候，浏览器进入打印模式，如果你没有专门适配样式，输出效果会很差。很多元素的背景颜色/文本颜色/背景图片不会展示出来。<br>对于PhantomJS，网上有讨论说需要加上如下样式（我本人并未实践过此方案）：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> print &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">/*https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-print-color-adjust*/</span></span><br><span class=\"line\">     <span class=\"attribute\">-webkit-print-color-adjust</span>: exact;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于SlimerJS，虽然paperSize存在相关设置（printBGColors/printBGImages），但是文本颜色似乎无法设置。所以我推荐在编写CSS的时候注意如下细节：</p>\n<ul>\n<li>将所有背景图片转换为Base64字符串直接在css中引入（幸好有webpack）</li>\n<li>所有设置元素文本颜色和背景颜色的样式需要兼容打印模式</li>\n<li>文本颜色相关的设置不支持inherited，这点尤其注意</li>\n</ul>\n<p>样例代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.someClassName</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>:red;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#FFF</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">media</span> print &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.someClassName</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>:red <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#FFF</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后的忠告\"><a href=\"#最后的忠告\" class=\"headerlink\" title=\"最后的忠告\"></a>最后的忠告</h2><p><em>不要寄希望于输出的PDF与网页中展示效果100%一致，几乎不可能（尤其是网页内容相对比较复杂的时候），最终效果或多或少都会有些瑕疵。</em></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文主要介绍本人在项目实践中通过<code>SlimerJS</code>将网页输出为PDF文档的过程，生成的PDF文档中的文本是矢量的，可以选择复制。<br>虽然网上也有一些类似的分享，但是并没有将整个过程中的可能遇到的坑以及在Web开发中的一些技术细节讲述的比较清楚。</p>\n<h2 id=\"软件清单：\"><a href=\"#软件清单：\" class=\"headerlink\" title=\"软件清单：\"></a>软件清单：</h2><ul>\n<li>xvfb</li>\n<li>gtk3</li>\n<li>cups</li>\n<li>firefox</li>\n<li>slimerjs</li>\n</ul>\n<p>本文使用的操作系统版本为CentOS 7.2。</p>\n<h2 id=\"安装xvfb\"><a href=\"#安装xvfb\" class=\"headerlink\" title=\"安装xvfb\"></a>安装xvfb</h2><p>关于xvfb的介绍可以查看<a href=\"https://en.wikipedia.org/wiki/Xvfb\" target=\"_blank\" rel=\"noopener\">wiki</a>，简单点说它就是用于处理程序中与图形化相关的功能，但是它不会在屏幕上展示任何图形输出。<br>安装以后可以使用<strong>xvfb-run</strong>命令来运行<strong>headless slimerjs.</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install xorg-x11-server-Xvfb</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装Firefox\"><a href=\"#安装Firefox\" class=\"headerlink\" title=\"安装Firefox\"></a>安装Firefox</h2><p>SlimerJS依赖于Firefox，目前支持的版本号介于38~ 46，其它版本官方无法保证测试结果。<br>所以不推荐安装大于46或者小于38的版本。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://ftp.mozilla.org/pub/firefox/releases/46.0.1/linux-x86_64-EME-free/zh-CN/firefox-46.0.1.tar.bz2</span><br><span class=\"line\">tar xjvf firefox-46.0.1.tar.bz2</span><br></pre></td></tr></table></figure>\n<p>注意这里我们下载Firefox的版本号为64的<a href=\"https://wiki.mozilla.org/Media/EME\" target=\"_blank\" rel=\"noopener\">EME</a>版本，普通版本在渲染复杂网页时可能会出现莫名的引擎级别错误。</p>\n<h2 id=\"安装GTK3\"><a href=\"#安装GTK3\" class=\"headerlink\" title=\"安装GTK3\"></a>安装GTK3</h2><p>由于Firefox 46<a href=\"https://www.mozilla.org/en-US/firefox/46.0/system-requirements/\" target=\"_blank\" rel=\"noopener\">依赖</a>于GTK3，所以这里我们需要安装GTK3。<br>另外如果你的操作系统版本为CentOS 6.x，那么我推荐你<a href=\"http://itvision.altervista.org/compiling-and-installing-gtk3-in-centos6.html\" target=\"_blank\" rel=\"noopener\">放弃安装GTK3</a>，而是直接升级系统。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gtk3-devel</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装CUPS\"><a href=\"#安装CUPS\" class=\"headerlink\" title=\"安装CUPS\"></a>安装CUPS</h2><p><a href=\"https://www.cups.org/\" target=\"_blank\" rel=\"noopener\">CUPS</a>是由苹果开发的通用Unix打印系统，如果没有安装CUPS，SlimerJS将网页渲染为PDF的时候将会<a href=\"https://docs.slimerjs.org/current/faq.html#on-linux-pdf-rendering-hangs-slimerjs\" target=\"_blank\" rel=\"noopener\">挂起</a>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install cups</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装SlimerJS\"><a href=\"#安装SlimerJS\" class=\"headerlink\" title=\"安装SlimerJS\"></a>安装SlimerJS</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.slimerjs.org/releases/0.10.0/slimerjs-0.10.0.zip</span><br><span class=\"line\">unzip slimerjs-0.10.0.zip</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 这里设置为firefox文件夹下的的firefox可执行文件的路径</span><br><span class=\"line\">export SLIMERJSLAUNCHER=PATH_TO_FIREFOX</span><br></pre></td></tr></table></figure>\n<h2 id=\"开始执行\"><a href=\"#开始执行\" class=\"headerlink\" title=\"开始执行\"></a>开始执行</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd PATH_TO_SLIMERJS</span><br><span class=\"line\">xvfb-run ./slimerjs SCRIPT_PATH HTTP_PAGE_URL OUTPUT_FILENAME</span><br></pre></td></tr></table></figure>\n<p>另外如果执行没有正常运行，可以加上—debug参数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xvfb-run ./slimerjs --debug test.js http://www.qq.com/ test.pdf</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考代码\"><a href=\"#参考代码\" class=\"headerlink\" title=\"参考代码\"></a>参考代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> page = <span class=\"built_in\">require</span>(<span class=\"string\">'webpage'</span>).create()</span><br><span class=\"line\"><span class=\"keyword\">var</span> system = <span class=\"built_in\">require</span>(<span class=\"string\">'system'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (system.args.length !== <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Arguments error: xvfb-run ./slimerjs SCRIPT_PATH HTTP_PAGE_URL OUTPUT_FILENAME'</span>)</span><br><span class=\"line\">  slimer.exit()</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> url = system.args[<span class=\"number\">1</span>]</span><br><span class=\"line\">  <span class=\"keyword\">var</span> renderPath = system.args[<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Page url is '</span> + url)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Output path is '</span> + renderPath)</span><br><span class=\"line\"></span><br><span class=\"line\">  page.paperSize = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// magic number in my project</span></span><br><span class=\"line\">    width: <span class=\"string\">'1500px'</span>,</span><br><span class=\"line\">    height: <span class=\"string\">'1038px'</span>,</span><br><span class=\"line\">    shrinkToFit: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    printBGColors: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    printBGImages: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  page.onLoadFinished = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Finish loading page'</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 有些时候分页不理想，需要删除一些节点</span></span><br><span class=\"line\">    page.evaluate(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> nodes = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.bottom-line'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i&lt; nodes.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        nodes[i].parentNode.removeChild(nodes[i])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Start rendering'</span>)</span><br><span class=\"line\">    page.render(renderPath)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Finish rendering'</span>)</span><br><span class=\"line\">    slimer.exit()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Opening page now ...'</span>)</span><br><span class=\"line\">  page.open(url)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h2><p>由于服务部署在Linux服务器上，网页渲染使用的字体与Windows和macOS区别还是很大的，比如Windows的微软雅黑在Linux是无法使用的。<br>另外在安装字体上也有两种选择，第一是直接安装在服务器上，第二是作为Web Fonts从网页中引入。</p>\n<h2 id=\"Flex布局\"><a href=\"#Flex布局\" class=\"headerlink\" title=\"Flex布局\"></a>Flex布局</h2><p>早先我们尝试使用PhantomJS来完成此工作，虽然网上有说2.x支持Flex布局，但是我们的实践结果是不支持。SlimerJS在Flex布局上支持的很好，无需任何额外工作。</p>\n<h2 id=\"Canvas绘制\"><a href=\"#Canvas绘制\" class=\"headerlink\" title=\"Canvas绘制\"></a>Canvas绘制</h2><p>我们的网页使用了ECharts来进行图表绘制，ECharts底层使用了canvas来绘制图表。<br>PhantomJS输出的PDF在这方面支持很差，Stacked Column中莫名的出现很多空白间隙。SlimerJS的表现要好得多，不过有些淡虚线比实际要粗一些，色彩也深一些。</p>\n<h2 id=\"文档分页\"><a href=\"#文档分页\" class=\"headerlink\" title=\"文档分页\"></a>文档分页</h2><p>如果希望输出的PDF能够支持分页输出（方便分页打印），需要设置paperSize的Height来确定每页pdf的高度。<br>不过这里也是有坑的，每页PDF高度会有几个像素的差距，导致会多出一个空白页。</p>\n<h2 id=\"CSS适配\"><a href=\"#CSS适配\" class=\"headerlink\" title=\"CSS适配\"></a>CSS适配</h2><p>渲染PDF的时候，浏览器进入打印模式，如果你没有专门适配样式，输出效果会很差。很多元素的背景颜色/文本颜色/背景图片不会展示出来。<br>对于PhantomJS，网上有讨论说需要加上如下样式（我本人并未实践过此方案）：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> print &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">/*https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-print-color-adjust*/</span></span><br><span class=\"line\">     <span class=\"attribute\">-webkit-print-color-adjust</span>: exact;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于SlimerJS，虽然paperSize存在相关设置（printBGColors/printBGImages），但是文本颜色似乎无法设置。所以我推荐在编写CSS的时候注意如下细节：</p>\n<ul>\n<li>将所有背景图片转换为Base64字符串直接在css中引入（幸好有webpack）</li>\n<li>所有设置元素文本颜色和背景颜色的样式需要兼容打印模式</li>\n<li>文本颜色相关的设置不支持inherited，这点尤其注意</li>\n</ul>\n<p>样例代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.someClassName</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>:red;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#FFF</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">media</span> print &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.someClassName</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>:red <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#FFF</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后的忠告\"><a href=\"#最后的忠告\" class=\"headerlink\" title=\"最后的忠告\"></a>最后的忠告</h2><p><em>不要寄希望于输出的PDF与网页中展示效果100%一致，几乎不可能（尤其是网页内容相对比较复杂的时候），最终效果或多或少都会有些瑕疵。</em></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjbhnknmz0000yx95bz6k24fq","tag_id":"cjbhne5iw0002p795lolvziiv","_id":"cjbhnknna0001yx95sj179sue"},{"post_id":"cjbhnkz0n00000n95sax1b6oh","tag_id":"cjbhne5iw0002p795lolvziiv","_id":"cjbhnkz1300010n957qtwd1yn"},{"post_id":"cjbhnla1g00002e95pjz9g91d","tag_id":"cjbhne5iw0002p795lolvziiv","_id":"cjbhnla1u00022e95ghcpcrji"},{"post_id":"cjbhnla1p00012e95r5kosbm3","tag_id":"cjbhne5iw0002p795lolvziiv","_id":"cjbhnla1w00032e95r7urjo7e"},{"post_id":"cjbhnljau00005s95hik1mrtl","tag_id":"cjbhne5iw0002p795lolvziiv","_id":"cjbhnljb900025s95d3oy7k1m"},{"post_id":"cjbhnlumr00007i956qsy03t6","tag_id":"cjbhne5iw0002p795lolvziiv","_id":"cjbhnluna00027i952sbohb0p"},{"post_id":"cjbhnlun500017i95b407evv4","tag_id":"cjbhne5iw0002p795lolvziiv","_id":"cjbhnlunb00037i95lrc70v98"},{"post_id":"cjbhnm6p7000098953bxcaqzk","tag_id":"cjbhne5iw0002p795lolvziiv","_id":"cjbhnm6pm000298959qmddk49"},{"post_id":"cjbhnm6pf00019895xvjzmbly","tag_id":"cjbhne5iw0002p795lolvziiv","_id":"cjbhnm6pn000398954pqx3u9t"},{"post_id":"cjbi067o80001bi95mzvqrfgu","tag_id":"cjbhne5iw0002p795lolvziiv","_id":"cjbi067of0004bi95wnd3hnb3"},{"post_id":"cjbi06osz0000da95nvrnoagy","tag_id":"cjbhne5iw0002p795lolvziiv","_id":"cjbi06otd0002da95l8s007fm"},{"post_id":"cjbi0v4eh00003k951eeqk90d","tag_id":"cjbhne5iw0002p795lolvziiv","_id":"cjbi0v4er00023k9576nyih0k"},{"post_id":"cjbi0v4en00013k95ypl9p4bs","tag_id":"cjbhne5iw0002p795lolvziiv","_id":"cjbi0v4es00043k95wop7ilpa"},{"post_id":"cjbi0v4er00033k95p9lsk94h","tag_id":"cjbhne5iw0002p795lolvziiv","_id":"cjbi0v4ev00063k957u0v99h8"},{"post_id":"cjbi0v4et00053k95maz5s14f","tag_id":"cjbhne5iw0002p795lolvziiv","_id":"cjbi0v4ey00083k95gdumf5yu"},{"post_id":"cjbi0v4ev00073k959d5ueom8","tag_id":"cjbhne5iw0002p795lolvziiv","_id":"cjbi0v4ez00093k95ncmw4nmr"},{"post_id":"cjbi2gsxa0000ov95lhi40mzt","tag_id":"cjbi2gsxo0002ov95d25xqwbj","_id":"cjbi2gsy30007ov95o1jyo54j"},{"post_id":"cjbi2gsy40008ov954aksqwsb","tag_id":"cjbhne5iw0002p795lolvziiv","_id":"cjbi2gsyc000bov95wk67jp9g"},{"post_id":"cjbi2gsxl0001ov958pbwxh8c","tag_id":"cjbi2gsxo0002ov95d25xqwbj","_id":"cjbi2gsye000dov95r91a40me"},{"post_id":"cjbi2gsxw0003ov95gkwsyd89","tag_id":"cjbi2gsyb000aov955np74ftp","_id":"cjbi2gsyj000hov95zidco4up"},{"post_id":"cjbi2gsyf000eov95xhb4pteh","tag_id":"cjbhne5iw0002p795lolvziiv","_id":"cjbi2gsyn000jov95b5ax41nk"},{"post_id":"cjbi2gsyi000gov95aunoml9k","tag_id":"cjbhne5iw0002p795lolvziiv","_id":"cjbi2gsyp000mov956ay650aw"},{"post_id":"cjbi2gsxy0004ov95drujokrw","tag_id":"cjbi2gsyb000aov955np74ftp","_id":"cjbi2gsys000oov955f42w1rt"},{"post_id":"cjbi2gsyk000iov952dp9z1xd","tag_id":"cjbhne5iw0002p795lolvziiv","_id":"cjbi2gsyt000qov95neibyl34"},{"post_id":"cjbi2gsyo000lov95vwa9v85o","tag_id":"cjbi2gsxo0002ov95d25xqwbj","_id":"cjbi2gsyu000rov95nol8wadf"},{"post_id":"cjbi2gsxz0005ov95j5xu2how","tag_id":"cjbi2gsyn000kov95di5g8nhg","_id":"cjbi2gsyu000tov95g7knztd6"},{"post_id":"cjbi2gsy80009ov951r44fhqe","tag_id":"cjbi2gsys000pov95ckts6let","_id":"cjbi2gsyv000uov95xec7jcrg"},{"post_id":"cjbi2gsyd000cov95dltsa6fk","tag_id":"cjbi2gsyu000sov95lpxdle8u","_id":"cjbi2gsyw000wov95q0djucdy"},{"post_id":"cjbi2gsyq000nov951q40ia1q","tag_id":"cjbi2gsyv000vov95k06z8ghd","_id":"cjbi2gsyx000xov95p83xnqur"}],"Tag":[{"name":"JavaScript,NodeJS","_id":"cjbgp5ghr0002c395k7zsqz9h"},{"name":"JavaScript","_id":"cjbhne5iw0002p795lolvziiv"},{"name":"React","_id":"cjbi2gsxo0002ov95d25xqwbj"},{"name":"持续集成","_id":"cjbi2gsyb000aov955np74ftp"},{"name":"代码管理","_id":"cjbi2gsyn000kov95di5g8nhg"},{"name":"JavaScript,解析器","_id":"cjbi2gsys000pov95ckts6let"},{"name":"Redux","_id":"cjbi2gsyu000sov95lpxdle8u"},{"name":"SlimerJS","_id":"cjbi2gsyv000vov95k06z8ghd"}]}}